# coding: utf-8


import os
os.chdir('./')

import matplotlib.lines as mlines
import matplotlib.pyplot as plt
import numpy as np
import sys
import argparse
from matplotlib import cm
from functions import *

parser=argparse.ArgumentParser(
    description='''Script to decode data from Lite DTU. ''',
    epilog="""All is well that ends well.""")
parser.add_argument('filename1', type=str, default="", help=' data to be converted')
parser.add_argument('filename2', type=str, default="", help=' data to be converted')
parser.add_argument('fallback1', type=int, default=0, help='running at 80MHz')
parser.add_argument('fallback2', type=int, default=0, help='running at 80MHz')

args=parser.parse_args()

plt.ion
    
file = args.filename1
fallback=args.fallback1

file2 = args.filename2
fallback2=args.fallback2


# Lettura dei file acquisiti in DTU mode:
# 
# 4 colonne: dout_0 (samples in output dalla DTU)
# 
# mentre su dout_1, dout_2 e dout_3 ci sono soltanto parole da 32-bit di allineamento: 5A5A5A5A -> 01011010010110100101101001011010


filename1 = file
filename2 = file2

print ("Starting conversion of file ", filename1, "Generated by the full test-bench to test all the features of the DTU")
data_32bit0 = []
data_32bit1 = []
data_32bit2 = []
data_32bit3 = []
time = []
time,data_32bit0,data_32bit1,data_32bit2,data_32bit3 = parseSimulationAllChannels(filename1,1)



print ("Starting conversion of file ", filename2, "Generated by the full test-bench to test all the features of the DTU")
data_32bit0_2 = []
data_32bit1_2 = []
data_32bit2_2 = []
data_32bit3_2 = []
time_2 = []
time_2,data_32bit0_2,data_32bit1_2,data_32bit2_2,data_32bit3_2 = parseSimulationAllChannels(filename2,1)

## Patterns for decoding
idle_pattern    = "1110"
reset_pattern= "00110101010101010101010101010101"
idle_5A = "01011010010110100101101001011010"

Nsamples = []
Nsamples_2 = []

switchToDTUMode=-1
switchToDTUMode_2=-1

for j in range(len(data_32bit3)):
    if((data_32bit3[j]==idle_5A) and (data_32bit2[j]==idle_5A) and (data_32bit1[j]==idle_5A) and (data_32bit0[j]!=idle_5A) and (data_32bit0[j][0:4] != idle_pattern) and (data_32bit0[j] != reset_pattern)):
        print("switch to dtu mode at line: ",j)
        switchToDTUMode=j
        break



for j in range(len(data_32bit3_2)):
    if((data_32bit3_2[j]==idle_5A) and (data_32bit2_2[j]==idle_5A) and (data_32bit1_2[j]==idle_5A) and (data_32bit0_2[j]!=idle_5A) and (data_32bit0_2[j][0:4] != idle_pattern) and (data_32bit0_2[j] != reset_pattern)):
        print("switch to dtu mode at line: ",j)
        switchToDTUMode_2=j
        break
    

ADCH = []
ADCL = []
ADCH,ADCL = parseTestMode(filename1,switchToDTUMode)

ADCH_2 = []
ADCL_2 = []
ADCH_2,ADCL_2 = parseTestMode(filename2,switchToDTUMode_2)
error=0;
for item in range(len(ADCH)):
    if(ADCH[item]-ADCH_2[item]!=0):
        print ("ATU ERROR!! item ",item, "has not same value in ADC1 (",ADCH[item],") or ADC2 (",ADCH[item],")");
        error=1
        break

#fig=plt.figure(1,figsize=(12,8))
fig, axs = plt.subplots(2, 1)

axs[0].plot(ADCH, 'o', color = 'coral')
axs[0].axis([0,1024, 0,  4200])
axs[1].plot(ADCH_2, 'o', color = 'blue')
axs[1].axis([0,1024, 0,  4200])
plt.show()

# 
# Decoding:
Nsamples,samples,trailers,BC0,BC0time,errors,CRC12,parity = decodeDTU(time,data_32bit0,switchToDTUMode,-1,fallback)
Nsamples_2,samples_2,trailers_2,BC0_2,BC0time_2,errors_2,CRC12_2,parity_2 = decodeDTU(time_2,data_32bit0_2,switchToDTUMode_2,-1,fallback2)

#####################################################
#####################################################

stamp, int_samples, stamp_bas, int_samples_bas,stamp_g10, int_samples_sign_g10,stamp_g1, int_samples_sign_g1 = SortSamples(samples)

stamp_2, int_samples_2, stamp_bas_2, int_samples_bas_2,stamp_g10_2, int_samples_sign_g10_2,stamp_g1_2, int_samples_sign_g1_2 = SortSamples(samples_2)

fig=plt.figure(1,figsize=(16,10))

ax = fig.add_subplot(111)

if(fallback==0 and fallback2==0):
    ax.plot(stamp,int_samples, color = 'blue', linestyle = ':')
    ax.plot(stamp_2,int_samples_2, color = 'deepskyblue', linestyle = ':')
    
    ax.plot(stamp_g1, int_samples_sign_g1, 'o', color = 'blue',markersize=12,label='Module 1')
    ax.plot(stamp_g1_2, int_samples_sign_g1_2, '*', color = 'deepskyblue',markersize=12,label='Module 2')
#    ax.plot(stamp_2,int_samples_2, color = 'blue', linestyle = 'o')
#    ax.plot(stamp_bas, int_samples_bas, 'o', color = 'deepskyblue',markersize=20,label='Baseline gain x10')
 #   ax.plot(stamp_g10, int_samples_sign_g10, 'o', color = 'blue',markersize=20,label='Signal gain x10')
  #  ax.plot(stamp_g1, int_samples_sign_g1, '*', color = 'coral',markersize=20,label='Signal gain x1')
    ymax = max(int_samples)
    xpos = int_samples.index(ymax)
    xmax = stamp[xpos]

    ymax2 = max(int_samples_2)
    xpos2 = int_samples_2.index(ymax2)
    xmax2 = stamp_2[xpos2]
    
    print ("xmax absolute: ",xmax, " xmax2 ",xmax2)
    print("ymax: ",ymax," ymax2 ", ymax)
    ax.axis([xmax-1000,xmax+1000, -100, ymax+ymax*0.15])
#    ax.axis([0,len(int_samples), 0,  ymax+ymax*0.15])
#    ax.axhline(y=63, xmin=0, xmax=10000, linewidth=1, color = 'firebrick')
#    ax.axhline(y=4095, xmin=0, xmax=10000, linewidth=1, color = "red")
    ax.legend(loc=5,fontsize = 14)
#    plt.xticks(fontsize = 16)
#    plt.yticks(fontsize = 16)
#    plt.ylabel("ADC counts",fontsize = 20)
#    plt.xlabel("samples",fontsize = 20)
    if(len(BC0)!=0): ax.axvline(x=BC0[0],ymin=0, ymax=4000, linewidth=1, color = "grey")
    if(len(BC0_2)!=0): ax.axvline(x=BC0_2[0],ymin=0, ymax=4000, linewidth=1, color = "blue")
    plt.show()
else:
    ax.plot(stamp_FB,int_samples, color = 'grey', linestyle = ':')
    ax.plot(stamp_FB_2,int_samples_2, color = 'blue', linestyle = 'o')
#    ax.plot(stamp_g10_FB, int_samples_sign_g10, 'o', color = 'blue',markersize=20,label='Signal gain x10')
#    ax.plot(stamp_g1_FB, int_samples_sign_g1, '*', color = 'coral',markersize=20,label='Signal gain x1')
#    ymax = max(int_samples)
#    print("sample length: ", len(int_samples))
#    xpos = int_samples.index(ymax)
#    xmax = stamp[xpos]
#    print ("xmax absolute: ",xmax)
#    print("ymax: ",ymax)
#    #ax.axis([xmax-20,xmax+20, 0, ymax+ymax*0.15])
#    ax.axis([0,len(int_samples), 0,  ymax+ymax*0.15])
#    ax.axhline(y=63, xmin=0, xmax=10000, linewidth=1, color = 'firebrick')
#    ax.axhline(y=4095, xmin=0, xmax=10000, linewidth=1, color = "red")
#    ax.legend(loc=5,fontsize = 16)
#    plt.xticks(fontsize = 16)
#    plt.yticks(fontsize = 16)
#    plt.ylabel("ADC counts",fontsize = 20)
#    plt.xlabel("samples",fontsize = 20)
    if(len(BC0)!=0): ax.axvline(x=BC0[0],ymin=0, ymax=4000, linewidth=1, color = "grey")
    if(len(BC0)!=0): ax.axvline(x=BC0_2[0],ymin=0, ymax=4000, linewidth=1, color = "blue")
    plt.show()


sub_base =  int_samples[xpos+10:xpos+450] 
base =sum(sub_base) / len(sub_base) 
print("average baseline: ", base)

fig=plt.figure(1,figsize=(12,8))
ax = fig.add_subplot(111)
plt.hist(int_samples[xpos+10:xpos+450])
plt.show()


print("First 400 samples: ", int_samples[0:400])

xpos=xmax;
r=int_samples[xpos-6:xpos+20]
print("Values around the maximum peak: ", r)

     
numbers = int_samples
local_maxima=FindMaxima(numbers,base)
print ("position of maxima: ",local_maxima)

nmax=0;
for i in local_maxima:
    nmax=nmax+1;
    r=int_samples[i-6:i+9]
   # print(nmax,") Values around the local maximum peak: ",r)




r=int_samples[BC0[0]-6:BC0[0]+20]
print("BC0 value: ",BC0[0])
print("Values around BC0 for module 1: ", r)


r2=int_samples[BC0_2[0]-6:BC0_2[0]+20]
print("BC0 value: ",BC0_2[0])
print("Values around BC0 for module 2: ", r2)

sampleofBC0=-1
sampleofBC0_2=-1

for i in range (0,len(time)):
    if(time[i]==BC0time[0]):
        sampleofBC0=i 
        break

for i in range (0,len(time_2)):
    if(time_2[i]==BC0time_2[0]):
        sampleofBC0_2=i 
        break


r=int_samples[sampleofBC0-6:sampleofBC0+20]
print("sampleofBC0: ",sampleofBC0)
print("Values around BC0 for module 1: ", r)


r2=int_samples[sampleofBC0_2-6:sampleofBC0_2+20]
print("sampleofBC0_2: ",sampleofBC0_2)
print("Values around BC0 for module 2: ", r2)
