/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ../LiteDTUv2_0_AUTOTMR/6_LDTU_DATA32muxTMR.v                                           *
 *                                                                                                  *
 * user    : soldi                                                                                  *
 * host    : elt159xl.to.infn.it                                                                    *
 * date    : 03/03/2021 13:21:38                                                                    *
 *                                                                                                  *
 * workdir : /export/elt159xl/disk0/users/soldi/LiTE-DTU_v2.0_2021_Simulations/pre-synth/LiteDTUv2_0_NoTMR *
 * cmd     : /export/elt159xl/disk0/users/soldi/LiTE-DTU_v2.0_2021_Simulations/tmrg/bin/tmrg -c     *
 *           tmr_Config/Last_DTU_v2.cfg --tmr-dir=../LiteDTUv2_0_AUTOTMR/                           *
 * tmrg rev: ececa199b20e3753893c07f87ef839ce926b269f                                               *
 *                                                                                                  *
 * src file: 6_LDTU_DATA32mux.v                                                                     *
 *           File is NOT under version control!                                                     *
 *           Modification time : 2021-03-02 15:44:01.986052                                         *
 *           File Size         : 1760                                                               *
 *           MD5 hash          : 7eb70507895549575e0f7bc4ae9f51e9                                   *
 *                                                                                                  *
 ****************************************************************************************************/

`timescale     1ps/1ps

module LDTU_DATA32_ATU_DTUTMR(
  CLKA,
  CLKB,
  CLKC,
  RSTA,
  RSTB,
  RSTC,
  CALIBRATION_BUSYA,
  CALIBRATION_BUSYB,
  CALIBRATION_BUSYC,
  TEST_ENABLEA,
  TEST_ENABLEB,
  TEST_ENABLEC,
  DATA32_ATU_0A,
  DATA32_ATU_0B,
  DATA32_ATU_0C,
  DATA32_ATU_1A,
  DATA32_ATU_1B,
  DATA32_ATU_1C,
  DATA32_ATU_2A,
  DATA32_ATU_2B,
  DATA32_ATU_2C,
  DATA32_ATU_3A,
  DATA32_ATU_3B,
  DATA32_ATU_3C,
  DATA32_DTUA,
  DATA32_DTUB,
  DATA32_DTUC,
  DATA32_0A,
  DATA32_0B,
  DATA32_0C,
  DATA32_1A,
  DATA32_1B,
  DATA32_1C,
  DATA32_2A,
  DATA32_2B,
  DATA32_2C,
  DATA32_3A,
  DATA32_3B,
  DATA32_3C,
  SeuError
);
parameter    Nbits_32=32;
parameter    idle_patternEA=32'b11101010101010101010101010101010;
parameter    idle_pattern5A=32'b01011010010110100101101001011010;
input CLKA;
input CLKB;
input CLKC;
input RSTA;
input RSTB;
input RSTC;
input CALIBRATION_BUSYA;
input CALIBRATION_BUSYB;
input CALIBRATION_BUSYC;
input TEST_ENABLEA;
input TEST_ENABLEB;
input TEST_ENABLEC;
input [Nbits_32-1:0] DATA32_ATU_0A;
input [Nbits_32-1:0] DATA32_ATU_0B;
input [Nbits_32-1:0] DATA32_ATU_0C;
input [Nbits_32-1:0] DATA32_ATU_1A;
input [Nbits_32-1:0] DATA32_ATU_1B;
input [Nbits_32-1:0] DATA32_ATU_1C;
input [Nbits_32-1:0] DATA32_ATU_2A;
input [Nbits_32-1:0] DATA32_ATU_2B;
input [Nbits_32-1:0] DATA32_ATU_2C;
input [Nbits_32-1:0] DATA32_ATU_3A;
input [Nbits_32-1:0] DATA32_ATU_3B;
input [Nbits_32-1:0] DATA32_ATU_3C;
input [Nbits_32-1:0] DATA32_DTUA;
input [Nbits_32-1:0] DATA32_DTUB;
input [Nbits_32-1:0] DATA32_DTUC;
output reg   [Nbits_32-1:0] DATA32_0A;
output reg   [Nbits_32-1:0] DATA32_0B;
output reg   [Nbits_32-1:0] DATA32_0C;
output reg   [Nbits_32-1:0] DATA32_1A;
output reg   [Nbits_32-1:0] DATA32_1B;
output reg   [Nbits_32-1:0] DATA32_1C;
output reg   [Nbits_32-1:0] DATA32_2A;
output reg   [Nbits_32-1:0] DATA32_2B;
output reg   [Nbits_32-1:0] DATA32_2C;
output reg   [Nbits_32-1:0] DATA32_3A;
output reg   [Nbits_32-1:0] DATA32_3B;
output reg   [Nbits_32-1:0] DATA32_3C;
output SeuError;

always @( posedge CLKA )
  begin
    if (RSTA==1'b0)
      begin
        if (TEST_ENABLEA==1'b0)
          DATA32_0A =  idle_patternEA;
        else
          DATA32_0A =  idle_pattern5A;
        DATA32_1A =  idle_pattern5A;
        DATA32_2A =  idle_pattern5A;
        DATA32_3A =  idle_pattern5A;
      end
    else
      begin
        if (TEST_ENABLEA==1'b0)
          begin
            if (CALIBRATION_BUSYA==1'b0)
              DATA32_0A =  DATA32_DTUA;
            else
              DATA32_0A =  idle_patternEA;
            DATA32_1A =  idle_pattern5A;
            DATA32_2A =  idle_pattern5A;
            DATA32_3A =  idle_pattern5A;
          end
        else
          begin
            DATA32_0A =  DATA32_ATU_0A;
            DATA32_1A =  DATA32_ATU_1A;
            DATA32_2A =  DATA32_ATU_2A;
            DATA32_3A =  DATA32_ATU_3A;
          end
      end
  end

always @( posedge CLKB )
  begin
    if (RSTB==1'b0)
      begin
        if (TEST_ENABLEB==1'b0)
          DATA32_0B =  idle_patternEA;
        else
          DATA32_0B =  idle_pattern5A;
        DATA32_1B =  idle_pattern5A;
        DATA32_2B =  idle_pattern5A;
        DATA32_3B =  idle_pattern5A;
      end
    else
      begin
        if (TEST_ENABLEB==1'b0)
          begin
            if (CALIBRATION_BUSYB==1'b0)
              DATA32_0B =  DATA32_DTUB;
            else
              DATA32_0B =  idle_patternEA;
            DATA32_1B =  idle_pattern5A;
            DATA32_2B =  idle_pattern5A;
            DATA32_3B =  idle_pattern5A;
          end
        else
          begin
            DATA32_0B =  DATA32_ATU_0B;
            DATA32_1B =  DATA32_ATU_1B;
            DATA32_2B =  DATA32_ATU_2B;
            DATA32_3B =  DATA32_ATU_3B;
          end
      end
  end

always @( posedge CLKC )
  begin
    if (RSTC==1'b0)
      begin
        if (TEST_ENABLEC==1'b0)
          DATA32_0C =  idle_patternEA;
        else
          DATA32_0C =  idle_pattern5A;
        DATA32_1C =  idle_pattern5A;
        DATA32_2C =  idle_pattern5A;
        DATA32_3C =  idle_pattern5A;
      end
    else
      begin
        if (TEST_ENABLEC==1'b0)
          begin
            if (CALIBRATION_BUSYC==1'b0)
              DATA32_0C =  DATA32_DTUC;
            else
              DATA32_0C =  idle_patternEA;
            DATA32_1C =  idle_pattern5A;
            DATA32_2C =  idle_pattern5A;
            DATA32_3C =  idle_pattern5A;
          end
        else
          begin
            DATA32_0C =  DATA32_ATU_0C;
            DATA32_1C =  DATA32_ATU_1C;
            DATA32_2C =  DATA32_ATU_2C;
            DATA32_3C =  DATA32_ATU_3C;
          end
      end
  end
endmodule

