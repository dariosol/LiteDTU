
// Generated by Cadence Genus(TM) Synthesis Solution 17.11-s014_1
// Generated on: Apr 29 2020 11:20:31 CEST (Apr 29 2020 09:20:31 UTC)

// Verification Directory fv/LiTE_DTU_160MHz_v1_2 

module and_op(A, B, Z);
  input [11:0] A, B;
  output [11:0] Z;
  wire [11:0] A, B;
  wire [11:0] Z;
  and g1 (Z[0], A[0], B[0]);
  and g2 (Z[1], A[1], B[1]);
  and g3 (Z[2], A[2], B[2]);
  and g4 (Z[3], A[3], B[3]);
  and g5 (Z[4], A[4], B[4]);
  and g6 (Z[5], A[5], B[5]);
  and g7 (Z[6], A[6], B[6]);
  and g8 (Z[7], A[7], B[7]);
  and g9 (Z[8], A[8], B[8]);
  and g10 (Z[9], A[9], B[9]);
  and g11 (Z[10], A[10], B[10]);
  and g12 (Z[11], A[11], B[11]);
endmodule

module and_op_1(A, B, Z);
  input [11:0] A, B;
  output [11:0] Z;
  wire [11:0] A, B;
  wire [11:0] Z;
  and g1 (Z[0], A[0], B[0]);
  and g2 (Z[1], A[1], B[1]);
  and g3 (Z[2], A[2], B[2]);
  and g4 (Z[3], A[3], B[3]);
  and g5 (Z[4], A[4], B[4]);
  and g6 (Z[5], A[5], B[5]);
  and g7 (Z[6], A[6], B[6]);
  and g8 (Z[7], A[7], B[7]);
  and g9 (Z[8], A[8], B[8]);
  and g10 (Z[9], A[9], B[9]);
  and g11 (Z[10], A[10], B[10]);
  and g12 (Z[11], A[11], B[11]);
endmodule

module and_op_2(A, B, Z);
  input [11:0] A, B;
  output [11:0] Z;
  wire [11:0] A, B;
  wire [11:0] Z;
  and g1 (Z[0], A[0], B[0]);
  and g2 (Z[1], A[1], B[1]);
  and g3 (Z[2], A[2], B[2]);
  and g4 (Z[3], A[3], B[3]);
  and g5 (Z[4], A[4], B[4]);
  and g6 (Z[5], A[5], B[5]);
  and g7 (Z[6], A[6], B[6]);
  and g8 (Z[7], A[7], B[7]);
  and g9 (Z[8], A[8], B[8]);
  and g10 (Z[9], A[9], B[9]);
  and g11 (Z[10], A[10], B[10]);
  and g12 (Z[11], A[11], B[11]);
endmodule

module nequal_unsigned(A, B, Z);
  input [11:0] A, B;
  output Z;
  wire [11:0] A, B;
  wire Z;
  wire n_26, n_27, n_28, n_29, n_30, n_31, n_32, n_33;
  wire n_34, n_35, n_36, n_37, n_38, n_39, n_40, n_41;
  xnor g1 (n_26, A[0], B[0]);
  xnor g2 (n_27, A[1], B[1]);
  xnor g3 (n_28, A[2], B[2]);
  xnor g4 (n_29, A[3], B[3]);
  xnor g5 (n_30, A[4], B[4]);
  xnor g6 (n_31, A[5], B[5]);
  xnor g7 (n_32, A[6], B[6]);
  xnor g8 (n_33, A[7], B[7]);
  xnor g9 (n_34, A[8], B[8]);
  xnor g10 (n_35, A[9], B[9]);
  xnor g11 (n_36, A[10], B[10]);
  xnor g12 (n_37, A[11], B[11]);
  nand g13 (n_38, n_26, n_27, n_28, n_29);
  nand g14 (n_39, n_30, n_31, n_32, n_33);
  nand g15 (n_40, n_34, n_35, n_36, n_37);
  nor g16 (n_41, n_38, n_39, n_40);
  not g17 (Z, n_41);
endmodule

module bmux(ctl, in_0, in_1, z);
  input ctl, in_0, in_1;
  output z;
  wire ctl, in_0, in_1;
  wire z;
  CDN_bmux2 g1(.sel0 (ctl), .data0 (in_0), .data1 (in_1), .z (z));
endmodule

module majorityVoter_WIDTH12(inA, inB, inC, out, tmrErr);
  input [11:0] inA, inB, inC;
  output [11:0] out;
  output tmrErr;
  wire [11:0] inA, inB, inC;
  wire [11:0] out;
  wire tmrErr;
  wire n_3, n_40, n_41, n_42, n_43, n_44, n_45, n_46;
  wire n_47, n_48, n_49, n_50, n_51, n_52, n_53, n_54;
  wire n_55, n_56, n_57, n_58, n_59, n_60, n_61, n_62;
  wire n_63, n_64, n_65, n_66, n_67, n_68, n_69, n_70;
  wire n_71, n_72, n_73, n_74, n_75, n_76, n_77, n_78;
  wire n_79, n_80, n_81, n_82, n_83, n_84, n_85, n_86;
  wire n_87, n_88, n_89, n_90, n_91;
  and_op g1(.A (inA), .B (inB), .Z ({n_51, n_50, n_49, n_48, n_47,
       n_46, n_45, n_44, n_43, n_42, n_41, n_40}));
  and_op_1 g2(.A (inA), .B (inC), .Z ({n_63, n_62, n_61, n_60, n_59,
       n_58, n_57, n_56, n_55, n_54, n_53, n_52}));
  and_op_2 g4(.A (inB), .B (inC), .Z ({n_87, n_86, n_85, n_84, n_83,
       n_82, n_81, n_80, n_79, n_78, n_77, n_76}));
  nequal_unsigned neq_169_11(.A (inA), .B (inB), .Z (n_88));
  nequal_unsigned neq_169_23(.A (inA), .B (inC), .Z (n_89));
  nequal_unsigned neq_169_35(.A (inB), .B (inC), .Z (n_91));
  bmux mux_tmrErr_169_29(.ctl (n_3), .in_0 (1'b0), .in_1 (1'b1), .z
       (tmrErr));
  or g9 (n_64, n_40, n_52);
  or g10 (n_65, n_41, n_53);
  or g3 (n_66, n_42, n_54);
  or g11 (n_67, n_43, n_55);
  or g12 (n_68, n_44, n_56);
  or g13 (n_69, n_45, n_57);
  or g14 (n_70, n_46, n_58);
  or g15 (n_71, n_47, n_59);
  or g16 (n_72, n_48, n_60);
  or g17 (n_73, n_49, n_61);
  or g18 (n_74, n_50, n_62);
  or g19 (n_75, n_51, n_63);
  or g20 (out[0], n_64, n_76);
  or g21 (out[1], n_65, n_77);
  or g22 (out[2], n_66, n_78);
  or g23 (out[3], n_67, n_79);
  or g5 (out[4], n_68, n_80);
  or g24 (out[5], n_69, n_81);
  or g25 (out[6], n_70, n_82);
  or g26 (out[7], n_71, n_83);
  or g27 (out[8], n_72, n_84);
  or g28 (out[9], n_73, n_85);
  or g29 (out[10], n_74, n_86);
  or g30 (out[11], n_75, n_87);
  or g31 (n_90, n_88, n_89);
  or g32 (n_3, n_90, n_91);
endmodule

module sub_unsigned(A, B, Z);
  input [11:0] A;
  input [7:0] B;
  output [11:0] Z;
  wire [11:0] A;
  wire [7:0] B;
  wire [11:0] Z;
  wire n_43, n_44, n_45, n_46, n_47, n_48, n_49, n_50;
  wire n_53, n_55, n_56, n_57, n_58, n_59, n_60, n_61;
  wire n_62, n_63, n_64, n_65, n_66, n_67, n_68, n_69;
  wire n_70, n_71, n_72, n_73, n_74, n_75, n_76, n_77;
  wire n_78, n_90, n_91, n_92, n_93, n_94, n_95, n_96;
  wire n_97, n_98, n_99, n_100, n_101, n_102, n_103, n_104;
  wire n_105, n_106, n_107, n_116, n_117, n_118, n_119, n_120;
  wire n_121, n_122, n_123, n_124, n_125, n_126, n_127, n_128;
  wire n_130, n_134, n_140, n_141, n_142, n_143, n_144, n_145;
  wire n_146, n_147, n_148, n_149, n_150, n_151, n_152, n_153;
  wire n_156, n_158, n_161, n_163;
  not g6 (n_43, B[7]);
  not g7 (n_44, B[6]);
  not g8 (n_45, B[5]);
  not g9 (n_46, B[4]);
  not g10 (n_47, B[3]);
  not g11 (n_48, B[2]);
  not g12 (n_49, B[1]);
  not g13 (n_50, B[0]);
  xor g15 (n_163, A[0], n_50);
  nand g18 (n_56, n_53, B[0]);
  nor g19 (n_55, A[1], n_49);
  nand g20 (n_58, A[1], n_49);
  nor g21 (n_65, A[2], n_48);
  nand g22 (n_60, A[2], n_48);
  nor g23 (n_61, A[3], n_47);
  nand g24 (n_62, A[3], n_47);
  nor g25 (n_71, A[4], n_46);
  nand g26 (n_66, A[4], n_46);
  nor g27 (n_67, A[5], n_45);
  nand g28 (n_68, A[5], n_45);
  nor g29 (n_77, A[6], n_44);
  nand g30 (n_72, A[6], n_44);
  nor g31 (n_73, A[7], n_43);
  nand g32 (n_74, A[7], n_43);
  not g41 (n_57, n_55);
  nand g42 (n_59, n_56, n_57);
  nand g43 (n_90, n_58, n_59);
  nor g44 (n_63, n_60, n_61);
  not g45 (n_64, n_62);
  nor g46 (n_94, n_63, n_64);
  nor g47 (n_93, n_65, n_61);
  nor g48 (n_69, n_66, n_67);
  not g49 (n_70, n_68);
  nor g50 (n_96, n_69, n_70);
  nor g51 (n_99, n_71, n_67);
  nor g52 (n_75, n_72, n_73);
  not g53 (n_76, n_74);
  nor g54 (n_103, n_75, n_76);
  nor g55 (n_101, n_77, n_73);
  nor g58 (n_106, A[8], A[9]);
  not g64 (n_91, n_65);
  nand g65 (n_92, n_90, n_91);
  nand g66 (n_143, n_60, n_92);
  nand g67 (n_95, n_93, n_90);
  nand g68 (n_116, n_94, n_95);
  nor g69 (n_97, n_77, n_96);
  not g70 (n_98, n_72);
  nor g71 (n_122, n_97, n_98);
  not g72 (n_100, n_77);
  nand g73 (n_120, n_99, n_100);
  not g74 (n_102, n_101);
  nor g75 (n_104, n_96, n_102);
  not g76 (n_105, n_103);
  nor g77 (n_126, n_104, n_105);
  nand g78 (n_124, n_99, n_101);
  nor g81 (n_134, n_107, A[10]);
  not g89 (n_117, n_71);
  nand g90 (n_118, n_116, n_117);
  nand g91 (n_147, n_66, n_118);
  nand g92 (n_119, n_99, n_116);
  nand g93 (n_149, n_96, n_119);
  not g94 (n_121, n_120);
  nand g95 (n_123, n_116, n_121);
  nand g96 (n_152, n_122, n_123);
  not g97 (n_125, n_124);
  nand g98 (n_127, n_116, n_125);
  nand g99 (n_128, n_126, n_127);
  nand g102 (n_156, n_78, n_130);
  nand g104 (n_158, n_106, n_130);
  nand g107 (n_161, n_134, n_130);
  nand g111 (n_140, n_57, n_58);
  xnor g112 (Z[1], n_56, n_140);
  nand g113 (n_141, n_91, n_60);
  xnor g114 (Z[2], n_90, n_141);
  not g115 (n_142, n_61);
  nand g116 (n_144, n_142, n_62);
  xnor g117 (Z[3], n_143, n_144);
  nand g118 (n_145, n_117, n_66);
  xnor g119 (Z[4], n_116, n_145);
  not g120 (n_146, n_67);
  nand g121 (n_148, n_146, n_68);
  xnor g122 (Z[5], n_147, n_148);
  nand g123 (n_150, n_100, n_72);
  xnor g124 (Z[6], n_149, n_150);
  not g125 (n_151, n_73);
  nand g126 (n_153, n_151, n_74);
  xnor g127 (Z[7], n_152, n_153);
  xnor g129 (Z[8], n_128, A[8]);
  xnor g132 (Z[9], n_156, A[9]);
  xnor g134 (Z[10], n_158, A[10]);
  xnor g137 (Z[11], n_161, A[11]);
  not g139 (n_78, A[8]);
  not g143 (n_53, A[0]);
  not g144 (Z[0], n_163);
  not g145 (n_107, n_106);
  not g146 (n_130, n_128);
endmodule

module bmux_19(ctl, in_0, in_1, z);
  input ctl;
  input [11:0] in_0, in_1;
  output [11:0] z;
  wire ctl;
  wire [11:0] in_0, in_1;
  wire [11:0] z;
  CDN_bmux2 g1(.sel0 (ctl), .data0 (in_0[11]), .data1 (in_1[11]), .z
       (z[11]));
  CDN_bmux2 g2(.sel0 (ctl), .data0 (in_0[10]), .data1 (in_1[10]), .z
       (z[10]));
  CDN_bmux2 g3(.sel0 (ctl), .data0 (in_0[9]), .data1 (in_1[9]), .z
       (z[9]));
  CDN_bmux2 g4(.sel0 (ctl), .data0 (in_0[8]), .data1 (in_1[8]), .z
       (z[8]));
  CDN_bmux2 g5(.sel0 (ctl), .data0 (in_0[7]), .data1 (in_1[7]), .z
       (z[7]));
  CDN_bmux2 g6(.sel0 (ctl), .data0 (in_0[6]), .data1 (in_1[6]), .z
       (z[6]));
  CDN_bmux2 g7(.sel0 (ctl), .data0 (in_0[5]), .data1 (in_1[5]), .z
       (z[5]));
  CDN_bmux2 g8(.sel0 (ctl), .data0 (in_0[4]), .data1 (in_1[4]), .z
       (z[4]));
  CDN_bmux2 g9(.sel0 (ctl), .data0 (in_0[3]), .data1 (in_1[3]), .z
       (z[3]));
  CDN_bmux2 g10(.sel0 (ctl), .data0 (in_0[2]), .data1 (in_1[2]), .z
       (z[2]));
  CDN_bmux2 g11(.sel0 (ctl), .data0 (in_0[1]), .data1 (in_1[1]), .z
       (z[1]));
  CDN_bmux2 g12(.sel0 (ctl), .data0 (in_0[0]), .data1 (in_1[0]), .z
       (z[0]));
endmodule

module LDTU_BSTMR_Nbits_1212_Nbits_88(DCLK_1, DCLK_10, CLK_A, CLK_B,
     CLK_C, reset_A, reset_B, reset_C, DATA12_g01, DATA12_g10,
     BSL_VAL_g01, BSL_VAL_g10, DATA_gain_01, DATA_gain_10, tmrError);
  input DCLK_1, DCLK_10, CLK_A, CLK_B, CLK_C, reset_A, reset_B, reset_C;
  input [11:0] DATA12_g01, DATA12_g10;
  input [7:0] BSL_VAL_g01, BSL_VAL_g10;
  output [11:0] DATA_gain_01, DATA_gain_10;
  output tmrError;
  wire DCLK_1, DCLK_10, CLK_A, CLK_B, CLK_C, reset_A, reset_B, reset_C;
  wire [11:0] DATA12_g01, DATA12_g10;
  wire [7:0] BSL_VAL_g01, BSL_VAL_g10;
  wire [11:0] DATA_gain_01, DATA_gain_10;
  wire tmrError;
  wire [11:0] dg01_A;
  wire [11:0] dg01_B;
  wire [11:0] dg01_C;
  wire [11:0] dg10_A;
  wire [11:0] dg10_B;
  wire [11:0] dg10_C;
  wire [11:0] d_g01_A;
  wire [11:0] DATA_g_01_A;
  wire [11:0] d_g10_A;
  wire [11:0] DATA_g_10_A;
  wire [11:0] d_g01_B;
  wire [11:0] DATA_g_01_B;
  wire [11:0] d_g10_B;
  wire [11:0] DATA_g_10_B;
  wire [11:0] d_g01_C;
  wire [11:0] DATA_g_01_C;
  wire [11:0] d_g10_C;
  wire [11:0] DATA_g_10_C;
  wire UNCONNECTED, UNCONNECTED0, UNCONNECTED1, UNCONNECTED2,
       UNCONNECTED3, UNCONNECTED4, UNCONNECTED5, UNCONNECTED6;
  wire UNCONNECTED7, UNCONNECTED8, UNCONNECTED9, UNCONNECTED10,
       UNCONNECTED11, UNCONNECTED12, UNCONNECTED13, UNCONNECTED14;
  wire UNCONNECTED15, UNCONNECTED16, UNCONNECTED17, UNCONNECTED18,
       UNCONNECTED19, UNCONNECTED20, UNCONNECTED21, UNCONNECTED22;
  wire UNCONNECTED23, UNCONNECTED24, UNCONNECTED25, UNCONNECTED26,
       UNCONNECTED27, UNCONNECTED28, UNCONNECTED29, UNCONNECTED30;
  wire UNCONNECTED31, UNCONNECTED32, UNCONNECTED33, UNCONNECTED34,
       UNCONNECTED35, UNCONNECTED36, UNCONNECTED37, UNCONNECTED38;
  wire UNCONNECTED39, UNCONNECTED40, UNCONNECTED41, UNCONNECTED42,
       UNCONNECTED43, UNCONNECTED44, UNCONNECTED45, UNCONNECTED46;
  wire UNCONNECTED47, UNCONNECTED48, UNCONNECTED49, UNCONNECTED50,
       UNCONNECTED51, UNCONNECTED52, UNCONNECTED53, UNCONNECTED54;
  wire UNCONNECTED55, UNCONNECTED56, UNCONNECTED57, UNCONNECTED58,
       UNCONNECTED59, UNCONNECTED60, UNCONNECTED61, UNCONNECTED62;
  wire UNCONNECTED63, UNCONNECTED64, UNCONNECTED65, UNCONNECTED66,
       UNCONNECTED67, UNCONNECTED68, UNCONNECTED69, UNCONNECTED70;
  wire dg01_TmrError, dg10_TmrError, n_76, n_101, n_102;
  majorityVoter_WIDTH12 d_g01_Voter(.inA (dg01_A), .inB (dg01_B), .inC
       (dg01_C), .out (DATA_gain_01), .tmrErr (dg01_TmrError));
  majorityVoter_WIDTH12 d_g10_Voter(.inA (dg10_A), .inB (dg10_B), .inC
       (dg10_C), .out (DATA_gain_10), .tmrErr (dg10_TmrError));
  sub_unsigned sub_89_30(.A (d_g01_A), .B (BSL_VAL_g01), .Z
       (DATA_g_01_A));
  sub_unsigned sub_90_30(.A (d_g10_A), .B (BSL_VAL_g10), .Z
       (DATA_g_10_A));
  sub_unsigned sub_91_30(.A (d_g01_B), .B (BSL_VAL_g01), .Z
       (DATA_g_01_B));
  sub_unsigned sub_92_30(.A (d_g10_B), .B (BSL_VAL_g10), .Z
       (DATA_g_10_B));
  sub_unsigned sub_93_30(.A (d_g01_C), .B (BSL_VAL_g01), .Z
       (DATA_g_01_C));
  sub_unsigned sub_94_30(.A (d_g10_C), .B (BSL_VAL_g10), .Z
       (DATA_g_10_C));
  bmux_19 mux_d_g10_C_121_15(.ctl (n_76), .in_0 (DATA12_g10), .in_1
       (12'b000000000000), .z ({UNCONNECTED10, UNCONNECTED9,
       UNCONNECTED8, UNCONNECTED7, UNCONNECTED6, UNCONNECTED5,
       UNCONNECTED4, UNCONNECTED3, UNCONNECTED2, UNCONNECTED1,
       UNCONNECTED0, UNCONNECTED}));
  bmux_19 mux_d_g01_C_106_15(.ctl (n_76), .in_0 (DATA12_g01), .in_1
       (12'b000000000000), .z ({UNCONNECTED22, UNCONNECTED21,
       UNCONNECTED20, UNCONNECTED19, UNCONNECTED18, UNCONNECTED17,
       UNCONNECTED16, UNCONNECTED15, UNCONNECTED14, UNCONNECTED13,
       UNCONNECTED12, UNCONNECTED11}));
  bmux_19 mux_d_g10_B_117_15(.ctl (n_101), .in_0 (DATA12_g10), .in_1
       (12'b000000000000), .z ({UNCONNECTED34, UNCONNECTED33,
       UNCONNECTED32, UNCONNECTED31, UNCONNECTED30, UNCONNECTED29,
       UNCONNECTED28, UNCONNECTED27, UNCONNECTED26, UNCONNECTED25,
       UNCONNECTED24, UNCONNECTED23}));
  bmux_19 mux_d_g01_B_102_15(.ctl (n_101), .in_0 (DATA12_g01), .in_1
       (12'b000000000000), .z ({UNCONNECTED46, UNCONNECTED45,
       UNCONNECTED44, UNCONNECTED43, UNCONNECTED42, UNCONNECTED41,
       UNCONNECTED40, UNCONNECTED39, UNCONNECTED38, UNCONNECTED37,
       UNCONNECTED36, UNCONNECTED35}));
  bmux_19 mux_d_g10_A_113_15(.ctl (n_102), .in_0 (DATA12_g10), .in_1
       (12'b000000000000), .z ({UNCONNECTED58, UNCONNECTED57,
       UNCONNECTED56, UNCONNECTED55, UNCONNECTED54, UNCONNECTED53,
       UNCONNECTED52, UNCONNECTED51, UNCONNECTED50, UNCONNECTED49,
       UNCONNECTED48, UNCONNECTED47}));
  bmux_19 mux_d_g01_A_98_15(.ctl (n_102), .in_0 (DATA12_g01), .in_1
       (12'b000000000000), .z ({UNCONNECTED70, UNCONNECTED69,
       UNCONNECTED68, UNCONNECTED67, UNCONNECTED66, UNCONNECTED65,
       UNCONNECTED64, UNCONNECTED63, UNCONNECTED62, UNCONNECTED61,
       UNCONNECTED60, UNCONNECTED59}));
  or g13 (tmrError, dg01_TmrError, dg10_TmrError);
  CDN_flop \d_g01_A_reg[0] (.clk (DCLK_1), .d (DATA12_g01[0]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_102), .srd (1'b0),
       .q (d_g01_A[0]));
  CDN_flop \d_g01_A_reg[1] (.clk (DCLK_1), .d (DATA12_g01[1]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_102), .srd (1'b0),
       .q (d_g01_A[1]));
  CDN_flop \d_g01_A_reg[2] (.clk (DCLK_1), .d (DATA12_g01[2]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_102), .srd (1'b0),
       .q (d_g01_A[2]));
  CDN_flop \d_g01_A_reg[3] (.clk (DCLK_1), .d (DATA12_g01[3]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_102), .srd (1'b0),
       .q (d_g01_A[3]));
  CDN_flop \d_g01_A_reg[4] (.clk (DCLK_1), .d (DATA12_g01[4]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_102), .srd (1'b0),
       .q (d_g01_A[4]));
  CDN_flop \d_g01_A_reg[5] (.clk (DCLK_1), .d (DATA12_g01[5]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_102), .srd (1'b0),
       .q (d_g01_A[5]));
  CDN_flop \d_g01_A_reg[6] (.clk (DCLK_1), .d (DATA12_g01[6]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_102), .srd (1'b0),
       .q (d_g01_A[6]));
  CDN_flop \d_g01_A_reg[7] (.clk (DCLK_1), .d (DATA12_g01[7]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_102), .srd (1'b0),
       .q (d_g01_A[7]));
  CDN_flop \d_g01_A_reg[8] (.clk (DCLK_1), .d (DATA12_g01[8]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_102), .srd (1'b0),
       .q (d_g01_A[8]));
  CDN_flop \d_g01_A_reg[9] (.clk (DCLK_1), .d (DATA12_g01[9]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_102), .srd (1'b0),
       .q (d_g01_A[9]));
  CDN_flop \d_g01_A_reg[10] (.clk (DCLK_1), .d (DATA12_g01[10]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_102), .srd (1'b0),
       .q (d_g01_A[10]));
  CDN_flop \d_g01_A_reg[11] (.clk (DCLK_1), .d (DATA12_g01[11]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_102), .srd (1'b0),
       .q (d_g01_A[11]));
  CDN_flop \d_g01_B_reg[0] (.clk (DCLK_1), .d (DATA12_g01[0]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_101), .srd (1'b0),
       .q (d_g01_B[0]));
  CDN_flop \d_g01_B_reg[1] (.clk (DCLK_1), .d (DATA12_g01[1]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_101), .srd (1'b0),
       .q (d_g01_B[1]));
  CDN_flop \d_g01_B_reg[2] (.clk (DCLK_1), .d (DATA12_g01[2]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_101), .srd (1'b0),
       .q (d_g01_B[2]));
  CDN_flop \d_g01_B_reg[3] (.clk (DCLK_1), .d (DATA12_g01[3]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_101), .srd (1'b0),
       .q (d_g01_B[3]));
  CDN_flop \d_g01_B_reg[4] (.clk (DCLK_1), .d (DATA12_g01[4]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_101), .srd (1'b0),
       .q (d_g01_B[4]));
  CDN_flop \d_g01_B_reg[5] (.clk (DCLK_1), .d (DATA12_g01[5]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_101), .srd (1'b0),
       .q (d_g01_B[5]));
  CDN_flop \d_g01_B_reg[6] (.clk (DCLK_1), .d (DATA12_g01[6]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_101), .srd (1'b0),
       .q (d_g01_B[6]));
  CDN_flop \d_g01_B_reg[7] (.clk (DCLK_1), .d (DATA12_g01[7]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_101), .srd (1'b0),
       .q (d_g01_B[7]));
  CDN_flop \d_g01_B_reg[8] (.clk (DCLK_1), .d (DATA12_g01[8]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_101), .srd (1'b0),
       .q (d_g01_B[8]));
  CDN_flop \d_g01_B_reg[9] (.clk (DCLK_1), .d (DATA12_g01[9]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_101), .srd (1'b0),
       .q (d_g01_B[9]));
  CDN_flop \d_g01_B_reg[10] (.clk (DCLK_1), .d (DATA12_g01[10]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_101), .srd (1'b0),
       .q (d_g01_B[10]));
  CDN_flop \d_g01_B_reg[11] (.clk (DCLK_1), .d (DATA12_g01[11]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_101), .srd (1'b0),
       .q (d_g01_B[11]));
  CDN_flop \d_g01_C_reg[0] (.clk (DCLK_1), .d (DATA12_g01[0]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_76), .srd (1'b0), .q
       (d_g01_C[0]));
  CDN_flop \d_g01_C_reg[1] (.clk (DCLK_1), .d (DATA12_g01[1]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_76), .srd (1'b0), .q
       (d_g01_C[1]));
  CDN_flop \d_g01_C_reg[2] (.clk (DCLK_1), .d (DATA12_g01[2]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_76), .srd (1'b0), .q
       (d_g01_C[2]));
  CDN_flop \d_g01_C_reg[3] (.clk (DCLK_1), .d (DATA12_g01[3]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_76), .srd (1'b0), .q
       (d_g01_C[3]));
  CDN_flop \d_g01_C_reg[4] (.clk (DCLK_1), .d (DATA12_g01[4]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_76), .srd (1'b0), .q
       (d_g01_C[4]));
  CDN_flop \d_g01_C_reg[5] (.clk (DCLK_1), .d (DATA12_g01[5]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_76), .srd (1'b0), .q
       (d_g01_C[5]));
  CDN_flop \d_g01_C_reg[6] (.clk (DCLK_1), .d (DATA12_g01[6]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_76), .srd (1'b0), .q
       (d_g01_C[6]));
  CDN_flop \d_g01_C_reg[7] (.clk (DCLK_1), .d (DATA12_g01[7]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_76), .srd (1'b0), .q
       (d_g01_C[7]));
  CDN_flop \d_g01_C_reg[8] (.clk (DCLK_1), .d (DATA12_g01[8]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_76), .srd (1'b0), .q
       (d_g01_C[8]));
  CDN_flop \d_g01_C_reg[9] (.clk (DCLK_1), .d (DATA12_g01[9]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_76), .srd (1'b0), .q
       (d_g01_C[9]));
  CDN_flop \d_g01_C_reg[10] (.clk (DCLK_1), .d (DATA12_g01[10]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_76), .srd (1'b0), .q
       (d_g01_C[10]));
  CDN_flop \d_g01_C_reg[11] (.clk (DCLK_1), .d (DATA12_g01[11]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_76), .srd (1'b0), .q
       (d_g01_C[11]));
  CDN_flop \d_g10_A_reg[0] (.clk (DCLK_10), .d (DATA12_g10[0]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_102), .srd (1'b0),
       .q (d_g10_A[0]));
  CDN_flop \d_g10_A_reg[1] (.clk (DCLK_10), .d (DATA12_g10[1]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_102), .srd (1'b0),
       .q (d_g10_A[1]));
  CDN_flop \d_g10_A_reg[2] (.clk (DCLK_10), .d (DATA12_g10[2]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_102), .srd (1'b0),
       .q (d_g10_A[2]));
  CDN_flop \d_g10_A_reg[3] (.clk (DCLK_10), .d (DATA12_g10[3]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_102), .srd (1'b0),
       .q (d_g10_A[3]));
  CDN_flop \d_g10_A_reg[4] (.clk (DCLK_10), .d (DATA12_g10[4]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_102), .srd (1'b0),
       .q (d_g10_A[4]));
  CDN_flop \d_g10_A_reg[5] (.clk (DCLK_10), .d (DATA12_g10[5]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_102), .srd (1'b0),
       .q (d_g10_A[5]));
  CDN_flop \d_g10_A_reg[6] (.clk (DCLK_10), .d (DATA12_g10[6]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_102), .srd (1'b0),
       .q (d_g10_A[6]));
  CDN_flop \d_g10_A_reg[7] (.clk (DCLK_10), .d (DATA12_g10[7]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_102), .srd (1'b0),
       .q (d_g10_A[7]));
  CDN_flop \d_g10_A_reg[8] (.clk (DCLK_10), .d (DATA12_g10[8]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_102), .srd (1'b0),
       .q (d_g10_A[8]));
  CDN_flop \d_g10_A_reg[9] (.clk (DCLK_10), .d (DATA12_g10[9]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_102), .srd (1'b0),
       .q (d_g10_A[9]));
  CDN_flop \d_g10_A_reg[10] (.clk (DCLK_10), .d (DATA12_g10[10]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_102), .srd (1'b0),
       .q (d_g10_A[10]));
  CDN_flop \d_g10_A_reg[11] (.clk (DCLK_10), .d (DATA12_g10[11]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_102), .srd (1'b0),
       .q (d_g10_A[11]));
  CDN_flop \d_g10_B_reg[0] (.clk (DCLK_10), .d (DATA12_g10[0]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_101), .srd (1'b0),
       .q (d_g10_B[0]));
  CDN_flop \d_g10_B_reg[1] (.clk (DCLK_10), .d (DATA12_g10[1]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_101), .srd (1'b0),
       .q (d_g10_B[1]));
  CDN_flop \d_g10_B_reg[2] (.clk (DCLK_10), .d (DATA12_g10[2]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_101), .srd (1'b0),
       .q (d_g10_B[2]));
  CDN_flop \d_g10_B_reg[3] (.clk (DCLK_10), .d (DATA12_g10[3]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_101), .srd (1'b0),
       .q (d_g10_B[3]));
  CDN_flop \d_g10_B_reg[4] (.clk (DCLK_10), .d (DATA12_g10[4]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_101), .srd (1'b0),
       .q (d_g10_B[4]));
  CDN_flop \d_g10_B_reg[5] (.clk (DCLK_10), .d (DATA12_g10[5]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_101), .srd (1'b0),
       .q (d_g10_B[5]));
  CDN_flop \d_g10_B_reg[6] (.clk (DCLK_10), .d (DATA12_g10[6]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_101), .srd (1'b0),
       .q (d_g10_B[6]));
  CDN_flop \d_g10_B_reg[7] (.clk (DCLK_10), .d (DATA12_g10[7]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_101), .srd (1'b0),
       .q (d_g10_B[7]));
  CDN_flop \d_g10_B_reg[8] (.clk (DCLK_10), .d (DATA12_g10[8]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_101), .srd (1'b0),
       .q (d_g10_B[8]));
  CDN_flop \d_g10_B_reg[9] (.clk (DCLK_10), .d (DATA12_g10[9]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_101), .srd (1'b0),
       .q (d_g10_B[9]));
  CDN_flop \d_g10_B_reg[10] (.clk (DCLK_10), .d (DATA12_g10[10]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_101), .srd (1'b0),
       .q (d_g10_B[10]));
  CDN_flop \d_g10_B_reg[11] (.clk (DCLK_10), .d (DATA12_g10[11]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_101), .srd (1'b0),
       .q (d_g10_B[11]));
  CDN_flop \d_g10_C_reg[0] (.clk (DCLK_10), .d (DATA12_g10[0]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_76), .srd (1'b0), .q
       (d_g10_C[0]));
  CDN_flop \d_g10_C_reg[1] (.clk (DCLK_10), .d (DATA12_g10[1]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_76), .srd (1'b0), .q
       (d_g10_C[1]));
  CDN_flop \d_g10_C_reg[2] (.clk (DCLK_10), .d (DATA12_g10[2]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_76), .srd (1'b0), .q
       (d_g10_C[2]));
  CDN_flop \d_g10_C_reg[3] (.clk (DCLK_10), .d (DATA12_g10[3]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_76), .srd (1'b0), .q
       (d_g10_C[3]));
  CDN_flop \d_g10_C_reg[4] (.clk (DCLK_10), .d (DATA12_g10[4]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_76), .srd (1'b0), .q
       (d_g10_C[4]));
  CDN_flop \d_g10_C_reg[5] (.clk (DCLK_10), .d (DATA12_g10[5]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_76), .srd (1'b0), .q
       (d_g10_C[5]));
  CDN_flop \d_g10_C_reg[6] (.clk (DCLK_10), .d (DATA12_g10[6]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_76), .srd (1'b0), .q
       (d_g10_C[6]));
  CDN_flop \d_g10_C_reg[7] (.clk (DCLK_10), .d (DATA12_g10[7]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_76), .srd (1'b0), .q
       (d_g10_C[7]));
  CDN_flop \d_g10_C_reg[8] (.clk (DCLK_10), .d (DATA12_g10[8]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_76), .srd (1'b0), .q
       (d_g10_C[8]));
  CDN_flop \d_g10_C_reg[9] (.clk (DCLK_10), .d (DATA12_g10[9]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_76), .srd (1'b0), .q
       (d_g10_C[9]));
  CDN_flop \d_g10_C_reg[10] (.clk (DCLK_10), .d (DATA12_g10[10]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_76), .srd (1'b0), .q
       (d_g10_C[10]));
  CDN_flop \d_g10_C_reg[11] (.clk (DCLK_10), .d (DATA12_g10[11]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_76), .srd (1'b0), .q
       (d_g10_C[11]));
  CDN_flop \dg01_A_reg[0] (.clk (CLK_A), .d (DATA_g_01_A[0]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg01_A[0]));
  CDN_flop \dg01_A_reg[1] (.clk (CLK_A), .d (DATA_g_01_A[1]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg01_A[1]));
  CDN_flop \dg01_A_reg[2] (.clk (CLK_A), .d (DATA_g_01_A[2]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg01_A[2]));
  CDN_flop \dg01_A_reg[3] (.clk (CLK_A), .d (DATA_g_01_A[3]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg01_A[3]));
  CDN_flop \dg01_A_reg[4] (.clk (CLK_A), .d (DATA_g_01_A[4]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg01_A[4]));
  CDN_flop \dg01_A_reg[5] (.clk (CLK_A), .d (DATA_g_01_A[5]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg01_A[5]));
  CDN_flop \dg01_A_reg[6] (.clk (CLK_A), .d (DATA_g_01_A[6]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg01_A[6]));
  CDN_flop \dg01_A_reg[7] (.clk (CLK_A), .d (DATA_g_01_A[7]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg01_A[7]));
  CDN_flop \dg01_A_reg[8] (.clk (CLK_A), .d (DATA_g_01_A[8]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg01_A[8]));
  CDN_flop \dg01_A_reg[9] (.clk (CLK_A), .d (DATA_g_01_A[9]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg01_A[9]));
  CDN_flop \dg01_A_reg[10] (.clk (CLK_A), .d (DATA_g_01_A[10]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg01_A[10]));
  CDN_flop \dg01_A_reg[11] (.clk (CLK_A), .d (DATA_g_01_A[11]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg01_A[11]));
  CDN_flop \dg10_A_reg[0] (.clk (CLK_A), .d (DATA_g_10_A[0]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg10_A[0]));
  CDN_flop \dg10_A_reg[1] (.clk (CLK_A), .d (DATA_g_10_A[1]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg10_A[1]));
  CDN_flop \dg10_A_reg[2] (.clk (CLK_A), .d (DATA_g_10_A[2]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg10_A[2]));
  CDN_flop \dg10_A_reg[3] (.clk (CLK_A), .d (DATA_g_10_A[3]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg10_A[3]));
  CDN_flop \dg10_A_reg[4] (.clk (CLK_A), .d (DATA_g_10_A[4]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg10_A[4]));
  CDN_flop \dg10_A_reg[5] (.clk (CLK_A), .d (DATA_g_10_A[5]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg10_A[5]));
  CDN_flop \dg10_A_reg[6] (.clk (CLK_A), .d (DATA_g_10_A[6]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg10_A[6]));
  CDN_flop \dg10_A_reg[7] (.clk (CLK_A), .d (DATA_g_10_A[7]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg10_A[7]));
  CDN_flop \dg10_A_reg[8] (.clk (CLK_A), .d (DATA_g_10_A[8]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg10_A[8]));
  CDN_flop \dg10_A_reg[9] (.clk (CLK_A), .d (DATA_g_10_A[9]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg10_A[9]));
  CDN_flop \dg10_A_reg[10] (.clk (CLK_A), .d (DATA_g_10_A[10]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg10_A[10]));
  CDN_flop \dg10_A_reg[11] (.clk (CLK_A), .d (DATA_g_10_A[11]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg10_A[11]));
  CDN_flop \dg01_B_reg[0] (.clk (CLK_B), .d (DATA_g_01_B[0]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg01_B[0]));
  CDN_flop \dg01_B_reg[1] (.clk (CLK_B), .d (DATA_g_01_B[1]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg01_B[1]));
  CDN_flop \dg01_B_reg[2] (.clk (CLK_B), .d (DATA_g_01_B[2]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg01_B[2]));
  CDN_flop \dg01_B_reg[3] (.clk (CLK_B), .d (DATA_g_01_B[3]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg01_B[3]));
  CDN_flop \dg01_B_reg[4] (.clk (CLK_B), .d (DATA_g_01_B[4]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg01_B[4]));
  CDN_flop \dg01_B_reg[5] (.clk (CLK_B), .d (DATA_g_01_B[5]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg01_B[5]));
  CDN_flop \dg01_B_reg[6] (.clk (CLK_B), .d (DATA_g_01_B[6]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg01_B[6]));
  CDN_flop \dg01_B_reg[7] (.clk (CLK_B), .d (DATA_g_01_B[7]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg01_B[7]));
  CDN_flop \dg01_B_reg[8] (.clk (CLK_B), .d (DATA_g_01_B[8]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg01_B[8]));
  CDN_flop \dg01_B_reg[9] (.clk (CLK_B), .d (DATA_g_01_B[9]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg01_B[9]));
  CDN_flop \dg01_B_reg[10] (.clk (CLK_B), .d (DATA_g_01_B[10]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg01_B[10]));
  CDN_flop \dg01_B_reg[11] (.clk (CLK_B), .d (DATA_g_01_B[11]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg01_B[11]));
  CDN_flop \dg10_B_reg[0] (.clk (CLK_B), .d (DATA_g_10_B[0]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg10_B[0]));
  CDN_flop \dg10_B_reg[1] (.clk (CLK_B), .d (DATA_g_10_B[1]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg10_B[1]));
  CDN_flop \dg10_B_reg[2] (.clk (CLK_B), .d (DATA_g_10_B[2]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg10_B[2]));
  CDN_flop \dg10_B_reg[3] (.clk (CLK_B), .d (DATA_g_10_B[3]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg10_B[3]));
  CDN_flop \dg10_B_reg[4] (.clk (CLK_B), .d (DATA_g_10_B[4]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg10_B[4]));
  CDN_flop \dg10_B_reg[5] (.clk (CLK_B), .d (DATA_g_10_B[5]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg10_B[5]));
  CDN_flop \dg10_B_reg[6] (.clk (CLK_B), .d (DATA_g_10_B[6]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg10_B[6]));
  CDN_flop \dg10_B_reg[7] (.clk (CLK_B), .d (DATA_g_10_B[7]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg10_B[7]));
  CDN_flop \dg10_B_reg[8] (.clk (CLK_B), .d (DATA_g_10_B[8]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg10_B[8]));
  CDN_flop \dg10_B_reg[9] (.clk (CLK_B), .d (DATA_g_10_B[9]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg10_B[9]));
  CDN_flop \dg10_B_reg[10] (.clk (CLK_B), .d (DATA_g_10_B[10]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg10_B[10]));
  CDN_flop \dg10_B_reg[11] (.clk (CLK_B), .d (DATA_g_10_B[11]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg10_B[11]));
  CDN_flop \dg01_C_reg[0] (.clk (CLK_C), .d (DATA_g_01_C[0]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg01_C[0]));
  CDN_flop \dg01_C_reg[1] (.clk (CLK_C), .d (DATA_g_01_C[1]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg01_C[1]));
  CDN_flop \dg01_C_reg[2] (.clk (CLK_C), .d (DATA_g_01_C[2]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg01_C[2]));
  CDN_flop \dg01_C_reg[3] (.clk (CLK_C), .d (DATA_g_01_C[3]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg01_C[3]));
  CDN_flop \dg01_C_reg[4] (.clk (CLK_C), .d (DATA_g_01_C[4]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg01_C[4]));
  CDN_flop \dg01_C_reg[5] (.clk (CLK_C), .d (DATA_g_01_C[5]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg01_C[5]));
  CDN_flop \dg01_C_reg[6] (.clk (CLK_C), .d (DATA_g_01_C[6]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg01_C[6]));
  CDN_flop \dg01_C_reg[7] (.clk (CLK_C), .d (DATA_g_01_C[7]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg01_C[7]));
  CDN_flop \dg01_C_reg[8] (.clk (CLK_C), .d (DATA_g_01_C[8]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg01_C[8]));
  CDN_flop \dg01_C_reg[9] (.clk (CLK_C), .d (DATA_g_01_C[9]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg01_C[9]));
  CDN_flop \dg01_C_reg[10] (.clk (CLK_C), .d (DATA_g_01_C[10]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg01_C[10]));
  CDN_flop \dg01_C_reg[11] (.clk (CLK_C), .d (DATA_g_01_C[11]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg01_C[11]));
  CDN_flop \dg10_C_reg[0] (.clk (CLK_C), .d (DATA_g_10_C[0]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg10_C[0]));
  CDN_flop \dg10_C_reg[1] (.clk (CLK_C), .d (DATA_g_10_C[1]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg10_C[1]));
  CDN_flop \dg10_C_reg[2] (.clk (CLK_C), .d (DATA_g_10_C[2]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg10_C[2]));
  CDN_flop \dg10_C_reg[3] (.clk (CLK_C), .d (DATA_g_10_C[3]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg10_C[3]));
  CDN_flop \dg10_C_reg[4] (.clk (CLK_C), .d (DATA_g_10_C[4]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg10_C[4]));
  CDN_flop \dg10_C_reg[5] (.clk (CLK_C), .d (DATA_g_10_C[5]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg10_C[5]));
  CDN_flop \dg10_C_reg[6] (.clk (CLK_C), .d (DATA_g_10_C[6]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg10_C[6]));
  CDN_flop \dg10_C_reg[7] (.clk (CLK_C), .d (DATA_g_10_C[7]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg10_C[7]));
  CDN_flop \dg10_C_reg[8] (.clk (CLK_C), .d (DATA_g_10_C[8]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg10_C[8]));
  CDN_flop \dg10_C_reg[9] (.clk (CLK_C), .d (DATA_g_10_C[9]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg10_C[9]));
  CDN_flop \dg10_C_reg[10] (.clk (CLK_C), .d (DATA_g_10_C[10]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg10_C[10]));
  CDN_flop \dg10_C_reg[11] (.clk (CLK_C), .d (DATA_g_10_C[11]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dg10_C[11]));
  not g19 (n_76, reset_C);
  not g20 (n_101, reset_B);
  not g21 (n_102, reset_A);
endmodule

module and_op_18(A, B, Z);
  input [12:0] A, B;
  output [12:0] Z;
  wire [12:0] A, B;
  wire [12:0] Z;
  and g1 (Z[0], A[0], B[0]);
  and g2 (Z[1], A[1], B[1]);
  and g3 (Z[2], A[2], B[2]);
  and g4 (Z[3], A[3], B[3]);
  and g5 (Z[4], A[4], B[4]);
  and g6 (Z[5], A[5], B[5]);
  and g7 (Z[6], A[6], B[6]);
  and g8 (Z[7], A[7], B[7]);
  and g9 (Z[8], A[8], B[8]);
  and g10 (Z[9], A[9], B[9]);
  and g11 (Z[10], A[10], B[10]);
  and g12 (Z[11], A[11], B[11]);
  and g13 (Z[12], A[12], B[12]);
endmodule

module and_op_19(A, B, Z);
  input [12:0] A, B;
  output [12:0] Z;
  wire [12:0] A, B;
  wire [12:0] Z;
  and g1 (Z[0], A[0], B[0]);
  and g2 (Z[1], A[1], B[1]);
  and g3 (Z[2], A[2], B[2]);
  and g4 (Z[3], A[3], B[3]);
  and g5 (Z[4], A[4], B[4]);
  and g6 (Z[5], A[5], B[5]);
  and g7 (Z[6], A[6], B[6]);
  and g8 (Z[7], A[7], B[7]);
  and g9 (Z[8], A[8], B[8]);
  and g10 (Z[9], A[9], B[9]);
  and g11 (Z[10], A[10], B[10]);
  and g12 (Z[11], A[11], B[11]);
  and g13 (Z[12], A[12], B[12]);
endmodule

module and_op_20(A, B, Z);
  input [12:0] A, B;
  output [12:0] Z;
  wire [12:0] A, B;
  wire [12:0] Z;
  and g1 (Z[0], A[0], B[0]);
  and g2 (Z[1], A[1], B[1]);
  and g3 (Z[2], A[2], B[2]);
  and g4 (Z[3], A[3], B[3]);
  and g5 (Z[4], A[4], B[4]);
  and g6 (Z[5], A[5], B[5]);
  and g7 (Z[6], A[6], B[6]);
  and g8 (Z[7], A[7], B[7]);
  and g9 (Z[8], A[8], B[8]);
  and g10 (Z[9], A[9], B[9]);
  and g11 (Z[10], A[10], B[10]);
  and g12 (Z[11], A[11], B[11]);
  and g13 (Z[12], A[12], B[12]);
endmodule

module nequal_unsigned_26(A, B, Z);
  input [12:0] A, B;
  output Z;
  wire [12:0] A, B;
  wire Z;
  wire n_28, n_29, n_30, n_31, n_32, n_33, n_34, n_35;
  wire n_36, n_37, n_38, n_39, n_40, n_41, n_42, n_43;
  wire n_44, n_45;
  xnor g1 (n_28, A[0], B[0]);
  xnor g2 (n_29, A[1], B[1]);
  xnor g3 (n_30, A[2], B[2]);
  xnor g4 (n_31, A[3], B[3]);
  xnor g5 (n_32, A[4], B[4]);
  xnor g6 (n_33, A[5], B[5]);
  xnor g7 (n_34, A[6], B[6]);
  xnor g8 (n_35, A[7], B[7]);
  xnor g9 (n_36, A[8], B[8]);
  xnor g10 (n_37, A[9], B[9]);
  xnor g11 (n_38, A[10], B[10]);
  xnor g12 (n_39, A[11], B[11]);
  xnor g13 (n_40, A[12], B[12]);
  nand g14 (n_42, n_28, n_29, n_30, n_31);
  nand g15 (n_43, n_32, n_33, n_34, n_35);
  nand g16 (n_44, n_36, n_37, n_38, n_39);
  not g17 (n_41, n_40);
  nor g18 (n_45, n_41, n_42, n_43, n_44);
  not g19 (Z, n_45);
endmodule

module majorityVoter_WIDTH13(inA, inB, inC, out, tmrErr);
  input [12:0] inA, inB, inC;
  output [12:0] out;
  output tmrErr;
  wire [12:0] inA, inB, inC;
  wire [12:0] out;
  wire tmrErr;
  wire n_3, n_43, n_44, n_45, n_46, n_47, n_48, n_49;
  wire n_50, n_51, n_52, n_53, n_54, n_55, n_56, n_57;
  wire n_58, n_59, n_60, n_61, n_62, n_63, n_64, n_65;
  wire n_66, n_67, n_68, n_69, n_70, n_71, n_72, n_73;
  wire n_74, n_75, n_76, n_77, n_78, n_79, n_80, n_81;
  wire n_82, n_83, n_84, n_85, n_86, n_87, n_88, n_89;
  wire n_90, n_91, n_92, n_93, n_94, n_95, n_96, n_97;
  wire n_98;
  and_op_18 g1(.A (inA), .B (inB), .Z ({n_55, n_54, n_53, n_52, n_51,
       n_50, n_49, n_48, n_47, n_46, n_45, n_44, n_43}));
  and_op_19 g2(.A (inA), .B (inC), .Z ({n_68, n_67, n_66, n_65, n_64,
       n_63, n_62, n_61, n_60, n_59, n_58, n_57, n_56}));
  and_op_20 g4(.A (inB), .B (inC), .Z ({n_94, n_93, n_92, n_91, n_90,
       n_89, n_88, n_87, n_86, n_85, n_84, n_83, n_82}));
  nequal_unsigned_26 neq_169_11(.A (inA), .B (inB), .Z (n_95));
  nequal_unsigned_26 neq_169_23(.A (inA), .B (inC), .Z (n_96));
  nequal_unsigned_26 neq_169_35(.A (inB), .B (inC), .Z (n_98));
  bmux mux_tmrErr_169_29(.ctl (n_3), .in_0 (1'b0), .in_1 (1'b1), .z
       (tmrErr));
  or g9 (n_69, n_43, n_56);
  or g10 (n_70, n_44, n_57);
  or g3 (n_71, n_45, n_58);
  or g11 (n_72, n_46, n_59);
  or g12 (n_73, n_47, n_60);
  or g13 (n_74, n_48, n_61);
  or g14 (n_75, n_49, n_62);
  or g15 (n_76, n_50, n_63);
  or g16 (n_77, n_51, n_64);
  or g17 (n_78, n_52, n_65);
  or g18 (n_79, n_53, n_66);
  or g19 (n_80, n_54, n_67);
  or g20 (n_81, n_55, n_68);
  or g21 (out[0], n_69, n_82);
  or g22 (out[1], n_70, n_83);
  or g23 (out[2], n_71, n_84);
  or g24 (out[3], n_72, n_85);
  or g5 (out[4], n_73, n_86);
  or g25 (out[5], n_74, n_87);
  or g26 (out[6], n_75, n_88);
  or g27 (out[7], n_76, n_89);
  or g28 (out[8], n_77, n_90);
  or g29 (out[9], n_78, n_91);
  or g30 (out[10], n_79, n_92);
  or g31 (out[11], n_80, n_93);
  or g32 (out[12], n_81, n_94);
  or g33 (n_97, n_95, n_96);
  or g34 (n_3, n_97, n_98);
endmodule

module majorityVoter(inA, inB, inC, out, tmrErr);
  input [0:0] inA, inB, inC;
  output [0:0] out;
  output tmrErr;
  wire [0:0] inA, inB, inC;
  wire [0:0] out;
  wire tmrErr;
  wire n_3, n_7, n_8, n_9, n_10, n_11, n_12, n_13;
  wire n_14, n_17, n_18, n_19;
  bmux mux_tmrErr_169_29(.ctl (n_3), .in_0 (1'b0), .in_1 (1'b1), .z
       (tmrErr));
  and g1 (n_7, inA, inB);
  and g2 (n_8, inA, inC);
  or g3 (n_9, n_7, n_8);
  and g4 (n_10, inB, inC);
  or g5 (out, n_9, n_10);
  or g9 (n_13, n_11, n_12);
  or g10 (n_3, n_13, n_14);
  xnor g11 (n_17, inA, inB);
  not g12 (n_11, n_17);
  xnor g13 (n_18, inA, inC);
  not g14 (n_12, n_18);
  xnor g15 (n_19, inB, inC);
  not g16 (n_14, n_19);
endmodule

module fanout_WIDTH2(in, outA, outB, outC);
  input [1:0] in;
  output [1:0] outA, outB, outC;
  wire [1:0] in;
  wire [1:0] outA, outB, outC;
  assign outC[0] = in[0];
  assign outC[1] = in[1];
  assign outB[0] = in[0];
  assign outB[1] = in[1];
  assign outA[0] = in[0];
  assign outA[1] = in[1];
endmodule

module geq_unsigned(A, B, Z);
  input [11:0] A, B;
  output Z;
  wire [11:0] A, B;
  wire Z;
  wire n_40, n_41, n_42, n_43, n_44, n_45, n_46, n_47;
  wire n_48, n_49, n_50, n_53, n_55, n_56, n_57, n_58;
  wire n_59, n_60, n_61, n_62, n_63, n_64, n_65, n_66;
  wire n_67, n_68, n_69, n_70, n_71, n_72, n_73, n_74;
  wire n_75, n_76, n_77, n_78, n_79, n_80, n_81, n_82;
  wire n_83, n_84, n_85, n_86, n_87, n_88, n_89, n_90;
  wire n_93, n_94, n_95, n_96, n_99, n_101, n_102, n_103;
  wire n_104, n_105, n_106, n_109, n_111, n_112, n_113, n_114;
  wire n_115, n_116, n_124, n_125, n_126, n_127, n_128, n_136;
  wire n_137, n_138, n_139;
  not g3 (n_40, B[11]);
  not g4 (n_41, B[10]);
  not g5 (n_42, B[9]);
  not g6 (n_43, B[8]);
  not g7 (n_44, B[7]);
  not g8 (n_45, B[6]);
  not g9 (n_46, B[5]);
  not g10 (n_47, B[4]);
  not g11 (n_48, B[3]);
  not g12 (n_49, B[2]);
  not g13 (n_50, B[1]);
  nand g18 (n_56, n_53, B[0]);
  nor g19 (n_55, A[1], n_50);
  nand g20 (n_58, A[1], n_50);
  nor g21 (n_65, A[2], n_49);
  nand g22 (n_60, A[2], n_49);
  nor g23 (n_61, A[3], n_48);
  nand g24 (n_62, A[3], n_48);
  nor g25 (n_71, A[4], n_47);
  nand g26 (n_66, A[4], n_47);
  nor g27 (n_67, A[5], n_46);
  nand g28 (n_68, A[5], n_46);
  nor g29 (n_77, A[6], n_45);
  nand g30 (n_72, A[6], n_45);
  nor g31 (n_73, A[7], n_44);
  nand g32 (n_74, A[7], n_44);
  nor g33 (n_83, A[8], n_43);
  nand g34 (n_78, A[8], n_43);
  nor g35 (n_79, A[9], n_42);
  nand g36 (n_80, A[9], n_42);
  nor g37 (n_89, A[10], n_41);
  nand g38 (n_84, A[10], n_41);
  nor g39 (n_85, A[11], n_40);
  nand g40 (n_86, A[11], n_40);
  not g41 (n_57, n_55);
  nand g42 (n_59, n_56, n_57);
  nand g43 (n_90, n_58, n_59);
  nor g44 (n_63, n_60, n_61);
  not g45 (n_64, n_62);
  nor g46 (n_94, n_63, n_64);
  nor g47 (n_93, n_65, n_61);
  nor g48 (n_69, n_66, n_67);
  not g49 (n_70, n_68);
  nor g50 (n_96, n_69, n_70);
  nor g51 (n_99, n_71, n_67);
  nor g52 (n_75, n_72, n_73);
  not g53 (n_76, n_74);
  nor g54 (n_103, n_75, n_76);
  nor g55 (n_101, n_77, n_73);
  nor g56 (n_81, n_78, n_79);
  not g57 (n_82, n_80);
  nor g58 (n_106, n_81, n_82);
  nor g59 (n_109, n_83, n_79);
  nor g60 (n_87, n_84, n_85);
  not g61 (n_88, n_86);
  nor g62 (n_113, n_87, n_88);
  nor g63 (n_111, n_89, n_85);
  nand g67 (n_95, n_93, n_90);
  nand g68 (n_116, n_94, n_95);
  not g74 (n_102, n_101);
  nor g75 (n_104, n_96, n_102);
  not g76 (n_105, n_103);
  nor g77 (n_126, n_104, n_105);
  nand g78 (n_124, n_99, n_101);
  not g84 (n_112, n_111);
  nor g85 (n_114, n_106, n_112);
  not g86 (n_115, n_113);
  nor g87 (n_138, n_114, n_115);
  nand g88 (n_136, n_109, n_111);
  not g97 (n_125, n_124);
  nand g98 (n_127, n_116, n_125);
  nand g99 (n_128, n_126, n_127);
  not g108 (n_137, n_136);
  nand g109 (n_139, n_128, n_137);
  nand g110 (Z, n_138, n_139);
  not g139 (n_53, A[0]);
endmodule

module add_unsigned(A, B, Z);
  input [2:0] A;
  input B;
  output [2:0] Z;
  wire [2:0] A;
  wire B;
  wire [2:0] Z;
  wire n_9, n_15, n_18, n_20, n_24, n_25;
  xor g1 (Z[0], A[0], B);
  nand g2 (n_9, A[0], B);
  nand g11 (n_18, n_15, A[1]);
  xnor g17 (Z[1], n_15, n_24);
  xnor g19 (Z[2], n_20, n_25);
  not g23 (n_15, n_9);
  not g24 (n_24, A[1]);
  not g25 (n_25, A[2]);
  not g26 (n_20, n_18);
endmodule

module add_unsigned_89(A, B, Z);
  input [2:0] A;
  input [1:0] B;
  output [2:0] Z;
  wire [2:0] A;
  wire [1:0] B;
  wire [2:0] Z;
  wire n_10, n_14, n_15, n_16, n_17, n_18, n_20, n_24;
  wire n_25;
  xor g1 (Z[0], A[0], B[0]);
  nand g2 (n_10, A[0], B[0]);
  nor g6 (n_14, A[1], B[1]);
  nand g7 (n_17, A[1], B[1]);
  not g10 (n_16, n_14);
  nand g11 (n_18, n_15, n_16);
  nand g12 (n_20, n_17, n_18);
  nand g16 (n_24, n_16, n_17);
  xnor g17 (Z[1], n_15, n_24);
  xnor g19 (Z[2], n_20, n_25);
  not g22 (n_15, n_10);
  not g23 (n_25, A[2]);
endmodule

module bmux_98(ctl, in_0, in_1, z);
  input ctl;
  input [2:0] in_0, in_1;
  output [2:0] z;
  wire ctl;
  wire [2:0] in_0, in_1;
  wire [2:0] z;
  CDN_bmux2 g1(.sel0 (ctl), .data0 (in_0[2]), .data1 (in_1[2]), .z
       (z[2]));
  CDN_bmux2 g2(.sel0 (ctl), .data0 (in_0[1]), .data1 (in_1[1]), .z
       (z[1]));
  CDN_bmux2 g3(.sel0 (ctl), .data0 (in_0[0]), .data1 (in_1[0]), .z
       (z[0]));
endmodule

module bmux_107(ctl, in_0, in_1, in_2, in_3, in_4, in_5, in_6, in_7, z);
  input [2:0] ctl;
  input [11:0] in_0, in_1, in_2, in_3, in_4, in_5, in_6, in_7;
  output [11:0] z;
  wire [2:0] ctl;
  wire [11:0] in_0, in_1, in_2, in_3, in_4, in_5, in_6, in_7;
  wire [11:0] z;
  CDN_bmux8 g1(.sel0 (ctl[0]), .data0 (in_0[11]), .data1 (in_1[11]),
       .sel1 (ctl[1]), .data2 (in_2[11]), .data3 (in_3[11]), .sel2
       (ctl[2]), .data4 (in_4[11]), .data5 (in_5[11]), .data6
       (in_6[11]), .data7 (in_7[11]), .z (z[11]));
  CDN_bmux8 g2(.sel0 (ctl[0]), .data0 (in_0[10]), .data1 (in_1[10]),
       .sel1 (ctl[1]), .data2 (in_2[10]), .data3 (in_3[10]), .sel2
       (ctl[2]), .data4 (in_4[10]), .data5 (in_5[10]), .data6
       (in_6[10]), .data7 (in_7[10]), .z (z[10]));
  CDN_bmux8 g3(.sel0 (ctl[0]), .data0 (in_0[9]), .data1 (in_1[9]),
       .sel1 (ctl[1]), .data2 (in_2[9]), .data3 (in_3[9]), .sel2
       (ctl[2]), .data4 (in_4[9]), .data5 (in_5[9]), .data6 (in_6[9]),
       .data7 (in_7[9]), .z (z[9]));
  CDN_bmux8 g4(.sel0 (ctl[0]), .data0 (in_0[8]), .data1 (in_1[8]),
       .sel1 (ctl[1]), .data2 (in_2[8]), .data3 (in_3[8]), .sel2
       (ctl[2]), .data4 (in_4[8]), .data5 (in_5[8]), .data6 (in_6[8]),
       .data7 (in_7[8]), .z (z[8]));
  CDN_bmux8 g5(.sel0 (ctl[0]), .data0 (in_0[7]), .data1 (in_1[7]),
       .sel1 (ctl[1]), .data2 (in_2[7]), .data3 (in_3[7]), .sel2
       (ctl[2]), .data4 (in_4[7]), .data5 (in_5[7]), .data6 (in_6[7]),
       .data7 (in_7[7]), .z (z[7]));
  CDN_bmux8 g6(.sel0 (ctl[0]), .data0 (in_0[6]), .data1 (in_1[6]),
       .sel1 (ctl[1]), .data2 (in_2[6]), .data3 (in_3[6]), .sel2
       (ctl[2]), .data4 (in_4[6]), .data5 (in_5[6]), .data6 (in_6[6]),
       .data7 (in_7[6]), .z (z[6]));
  CDN_bmux8 g7(.sel0 (ctl[0]), .data0 (in_0[5]), .data1 (in_1[5]),
       .sel1 (ctl[1]), .data2 (in_2[5]), .data3 (in_3[5]), .sel2
       (ctl[2]), .data4 (in_4[5]), .data5 (in_5[5]), .data6 (in_6[5]),
       .data7 (in_7[5]), .z (z[5]));
  CDN_bmux8 g8(.sel0 (ctl[0]), .data0 (in_0[4]), .data1 (in_1[4]),
       .sel1 (ctl[1]), .data2 (in_2[4]), .data3 (in_3[4]), .sel2
       (ctl[2]), .data4 (in_4[4]), .data5 (in_5[4]), .data6 (in_6[4]),
       .data7 (in_7[4]), .z (z[4]));
  CDN_bmux8 g9(.sel0 (ctl[0]), .data0 (in_0[3]), .data1 (in_1[3]),
       .sel1 (ctl[1]), .data2 (in_2[3]), .data3 (in_3[3]), .sel2
       (ctl[2]), .data4 (in_4[3]), .data5 (in_5[3]), .data6 (in_6[3]),
       .data7 (in_7[3]), .z (z[3]));
  CDN_bmux8 g10(.sel0 (ctl[0]), .data0 (in_0[2]), .data1 (in_1[2]),
       .sel1 (ctl[1]), .data2 (in_2[2]), .data3 (in_3[2]), .sel2
       (ctl[2]), .data4 (in_4[2]), .data5 (in_5[2]), .data6 (in_6[2]),
       .data7 (in_7[2]), .z (z[2]));
  CDN_bmux8 g11(.sel0 (ctl[0]), .data0 (in_0[1]), .data1 (in_1[1]),
       .sel1 (ctl[1]), .data2 (in_2[1]), .data3 (in_3[1]), .sel2
       (ctl[2]), .data4 (in_4[1]), .data5 (in_5[1]), .data6 (in_6[1]),
       .data7 (in_7[1]), .z (z[1]));
  CDN_bmux8 g12(.sel0 (ctl[0]), .data0 (in_0[0]), .data1 (in_1[0]),
       .sel1 (ctl[1]), .data2 (in_2[0]), .data3 (in_3[0]), .sel2
       (ctl[2]), .data4 (in_4[0]), .data5 (in_5[0]), .data6 (in_6[0]),
       .data7 (in_7[0]), .z (z[0]));
endmodule

module bmux_112(ctl, in_0, in_1, z);
  input ctl;
  input [7:0] in_0, in_1;
  output [7:0] z;
  wire ctl;
  wire [7:0] in_0, in_1;
  wire [7:0] z;
  CDN_bmux2 g1(.sel0 (ctl), .data0 (in_0[7]), .data1 (in_1[7]), .z
       (z[7]));
  CDN_bmux2 g2(.sel0 (ctl), .data0 (in_0[6]), .data1 (in_1[6]), .z
       (z[6]));
  CDN_bmux2 g3(.sel0 (ctl), .data0 (in_0[5]), .data1 (in_1[5]), .z
       (z[5]));
  CDN_bmux2 g4(.sel0 (ctl), .data0 (in_0[4]), .data1 (in_1[4]), .z
       (z[4]));
  CDN_bmux2 g5(.sel0 (ctl), .data0 (in_0[3]), .data1 (in_1[3]), .z
       (z[3]));
  CDN_bmux2 g6(.sel0 (ctl), .data0 (in_0[2]), .data1 (in_1[2]), .z
       (z[2]));
  CDN_bmux2 g7(.sel0 (ctl), .data0 (in_0[1]), .data1 (in_1[1]), .z
       (z[1]));
  CDN_bmux2 g8(.sel0 (ctl), .data0 (in_0[0]), .data1 (in_1[0]), .z
       (z[0]));
endmodule

module bmux_169(ctl, in_0, in_1, z);
  input ctl;
  input [12:0] in_0, in_1;
  output [12:0] z;
  wire ctl;
  wire [12:0] in_0, in_1;
  wire [12:0] z;
  CDN_bmux2 g1(.sel0 (ctl), .data0 (in_0[12]), .data1 (in_1[12]), .z
       (z[12]));
  CDN_bmux2 g2(.sel0 (ctl), .data0 (in_0[11]), .data1 (in_1[11]), .z
       (z[11]));
  CDN_bmux2 g3(.sel0 (ctl), .data0 (in_0[10]), .data1 (in_1[10]), .z
       (z[10]));
  CDN_bmux2 g4(.sel0 (ctl), .data0 (in_0[9]), .data1 (in_1[9]), .z
       (z[9]));
  CDN_bmux2 g5(.sel0 (ctl), .data0 (in_0[8]), .data1 (in_1[8]), .z
       (z[8]));
  CDN_bmux2 g6(.sel0 (ctl), .data0 (in_0[7]), .data1 (in_1[7]), .z
       (z[7]));
  CDN_bmux2 g7(.sel0 (ctl), .data0 (in_0[6]), .data1 (in_1[6]), .z
       (z[6]));
  CDN_bmux2 g8(.sel0 (ctl), .data0 (in_0[5]), .data1 (in_1[5]), .z
       (z[5]));
  CDN_bmux2 g9(.sel0 (ctl), .data0 (in_0[4]), .data1 (in_1[4]), .z
       (z[4]));
  CDN_bmux2 g10(.sel0 (ctl), .data0 (in_0[3]), .data1 (in_1[3]), .z
       (z[3]));
  CDN_bmux2 g11(.sel0 (ctl), .data0 (in_0[2]), .data1 (in_1[2]), .z
       (z[2]));
  CDN_bmux2 g12(.sel0 (ctl), .data0 (in_0[1]), .data1 (in_1[1]), .z
       (z[1]));
  CDN_bmux2 g13(.sel0 (ctl), .data0 (in_0[0]), .data1 (in_1[0]), .z
       (z[0]));
endmodule

module LDTU_iFIFOTMR_Nbits_1212_FifoDepth8_NBitsCnt3(CLK_A, CLK_B,
     CLK_C, reset_A, reset_B, reset_C, GAIN_SEL_MODE, DATA_gain_01,
     DATA_gain_10, SATURATION_value, DATA_to_enc, baseline_flag,
     tmrError);
  input CLK_A, CLK_B, CLK_C, reset_A, reset_B, reset_C;
  input [1:0] GAIN_SEL_MODE;
  input [11:0] DATA_gain_01, DATA_gain_10, SATURATION_value;
  output [12:0] DATA_to_enc;
  output baseline_flag, tmrError;
  wire CLK_A, CLK_B, CLK_C, reset_A, reset_B, reset_C;
  wire [1:0] GAIN_SEL_MODE;
  wire [11:0] DATA_gain_01, DATA_gain_10, SATURATION_value;
  wire [12:0] DATA_to_enc;
  wire baseline_flag, tmrError;
  wire [12:0] DATA_to_enc_A;
  wire [12:0] DATA_to_enc_B;
  wire [12:0] DATA_to_enc_C;
  wire [1:0] GAIN_SEL_MODE_A;
  wire [1:0] GAIN_SEL_MODE_B;
  wire [1:0] GAIN_SEL_MODE_C;
  wire [11:0] FIFO_g10_ref_A;
  wire [11:0] SATval_A;
  wire [11:0] FIFO_g10_ref_B;
  wire [11:0] SATval_B;
  wire [11:0] FIFO_g10_ref_C;
  wire [11:0] SATval_C;
  wire [2:0] wr_ptr_A;
  wire [2:0] ref_ptr_A;
  wire [2:0] wr_ptr_B;
  wire [2:0] ref_ptr_B;
  wire [2:0] wr_ptr_C;
  wire [2:0] ref_ptr_C;
  wire [11:0] \FIFO_g10_C[0] ;
  wire [11:0] \FIFO_g10_C[1] ;
  wire [11:0] \FIFO_g10_C[2] ;
  wire [11:0] \FIFO_g10_C[3] ;
  wire [11:0] \FIFO_g10_C[4] ;
  wire [11:0] \FIFO_g10_C[5] ;
  wire [11:0] \FIFO_g10_C[6] ;
  wire [11:0] \FIFO_g10_C[7] ;
  wire [7:0] gain_sel_C;
  wire [11:0] \FIFO_g10_B[0] ;
  wire [11:0] \FIFO_g10_B[1] ;
  wire [11:0] \FIFO_g10_B[2] ;
  wire [11:0] \FIFO_g10_B[3] ;
  wire [11:0] \FIFO_g10_B[4] ;
  wire [11:0] \FIFO_g10_B[5] ;
  wire [11:0] \FIFO_g10_B[6] ;
  wire [11:0] \FIFO_g10_B[7] ;
  wire [7:0] gain_sel_B;
  wire [11:0] \FIFO_g10_A[0] ;
  wire [11:0] \FIFO_g10_A[1] ;
  wire [11:0] \FIFO_g10_A[2] ;
  wire [11:0] \FIFO_g10_A[3] ;
  wire [11:0] \FIFO_g10_A[4] ;
  wire [11:0] \FIFO_g10_A[5] ;
  wire [11:0] \FIFO_g10_A[6] ;
  wire [11:0] \FIFO_g10_A[7] ;
  wire [7:0] gain_sel_A;
  wire [11:0] dout_g10_A;
  wire [11:0] \FIFO_g1_A[0] ;
  wire [11:0] \FIFO_g1_A[1] ;
  wire [11:0] \FIFO_g1_A[2] ;
  wire [11:0] \FIFO_g1_A[3] ;
  wire [11:0] \FIFO_g1_A[4] ;
  wire [11:0] \FIFO_g1_A[5] ;
  wire [11:0] \FIFO_g1_A[6] ;
  wire [11:0] \FIFO_g1_A[7] ;
  wire [11:0] dout_g1_A;
  wire [11:0] dout_g10_B;
  wire [11:0] \FIFO_g1_B[0] ;
  wire [11:0] \FIFO_g1_B[1] ;
  wire [11:0] \FIFO_g1_B[2] ;
  wire [11:0] \FIFO_g1_B[3] ;
  wire [11:0] \FIFO_g1_B[4] ;
  wire [11:0] \FIFO_g1_B[5] ;
  wire [11:0] \FIFO_g1_B[6] ;
  wire [11:0] \FIFO_g1_B[7] ;
  wire [11:0] dout_g1_B;
  wire [11:0] dout_g10_C;
  wire [11:0] \FIFO_g1_C[0] ;
  wire [11:0] \FIFO_g1_C[1] ;
  wire [11:0] \FIFO_g1_C[2] ;
  wire [11:0] \FIFO_g1_C[3] ;
  wire [11:0] \FIFO_g1_C[4] ;
  wire [11:0] \FIFO_g1_C[5] ;
  wire [11:0] \FIFO_g1_C[6] ;
  wire [11:0] \FIFO_g1_C[7] ;
  wire [11:0] dout_g1_C;
  wire DATA_to_encTmrError, UNCONNECTED71, UNCONNECTED72,
       UNCONNECTED73, UNCONNECTED74, UNCONNECTED75, UNCONNECTED76,
       UNCONNECTED77;
  wire UNCONNECTED78, UNCONNECTED79, UNCONNECTED80, UNCONNECTED81,
       UNCONNECTED82, UNCONNECTED83, UNCONNECTED84, UNCONNECTED85;
  wire UNCONNECTED86, UNCONNECTED87, UNCONNECTED88, UNCONNECTED89,
       UNCONNECTED90, UNCONNECTED91, UNCONNECTED92, UNCONNECTED93;
  wire UNCONNECTED94, UNCONNECTED95, UNCONNECTED96, UNCONNECTED97,
       UNCONNECTED98, UNCONNECTED99, UNCONNECTED100, UNCONNECTED101;
  wire UNCONNECTED102, UNCONNECTED103, UNCONNECTED104, UNCONNECTED105,
       UNCONNECTED106, UNCONNECTED107, UNCONNECTED108, UNCONNECTED109;
  wire UNCONNECTED110, UNCONNECTED111, UNCONNECTED112, UNCONNECTED113,
       UNCONNECTED114, UNCONNECTED115, UNCONNECTED116, UNCONNECTED117;
  wire UNCONNECTED118, UNCONNECTED119, UNCONNECTED120, UNCONNECTED121,
       UNCONNECTED122, UNCONNECTED123, UNCONNECTED124, UNCONNECTED125;
  wire UNCONNECTED126, UNCONNECTED127, UNCONNECTED128, UNCONNECTED129,
       UNCONNECTED130, UNCONNECTED131, UNCONNECTED132, UNCONNECTED133;
  wire UNCONNECTED134, UNCONNECTED135, UNCONNECTED136, UNCONNECTED137,
       UNCONNECTED138, UNCONNECTED139, UNCONNECTED140, UNCONNECTED141;
  wire UNCONNECTED142, UNCONNECTED143, UNCONNECTED144, UNCONNECTED145,
       UNCONNECTED146, UNCONNECTED147, UNCONNECTED148, UNCONNECTED149;
  wire UNCONNECTED150, UNCONNECTED151, UNCONNECTED152, UNCONNECTED153,
       UNCONNECTED154, UNCONNECTED155, UNCONNECTED156, UNCONNECTED157;
  wire UNCONNECTED158, UNCONNECTED159, UNCONNECTED160, UNCONNECTED161,
       UNCONNECTED162, UNCONNECTED163, UNCONNECTED164, UNCONNECTED165;
  wire UNCONNECTED166, UNCONNECTED167, UNCONNECTED168, UNCONNECTED169,
       UNCONNECTED170, UNCONNECTED171, UNCONNECTED172, UNCONNECTED173;
  wire UNCONNECTED174, UNCONNECTED175, UNCONNECTED176, UNCONNECTED177,
       UNCONNECTED178, UNCONNECTED179, UNCONNECTED180, UNCONNECTED181;
  wire UNCONNECTED182, UNCONNECTED183, UNCONNECTED184, UNCONNECTED185,
       UNCONNECTED186, UNCONNECTED187, UNCONNECTED188, UNCONNECTED189;
  wire UNCONNECTED190, UNCONNECTED191, UNCONNECTED192, UNCONNECTED193,
       UNCONNECTED194, UNCONNECTED195, UNCONNECTED196, UNCONNECTED197;
  wire UNCONNECTED198, UNCONNECTED199, UNCONNECTED200, UNCONNECTED201,
       UNCONNECTED202, UNCONNECTED203, UNCONNECTED204, UNCONNECTED205;
  wire UNCONNECTED206, UNCONNECTED207, UNCONNECTED208, UNCONNECTED209,
       UNCONNECTED210, UNCONNECTED211, UNCONNECTED212, UNCONNECTED213;
  wire UNCONNECTED214, UNCONNECTED215, UNCONNECTED216, UNCONNECTED217,
       UNCONNECTED218, UNCONNECTED219, UNCONNECTED220, UNCONNECTED221;
  wire UNCONNECTED222, UNCONNECTED223, UNCONNECTED224, UNCONNECTED225,
       UNCONNECTED226, UNCONNECTED227, UNCONNECTED228, UNCONNECTED229;
  wire UNCONNECTED230, UNCONNECTED231, UNCONNECTED232, UNCONNECTED233,
       UNCONNECTED234, UNCONNECTED235, UNCONNECTED236, UNCONNECTED237;
  wire UNCONNECTED238, UNCONNECTED239, UNCONNECTED240, UNCONNECTED241,
       UNCONNECTED242, UNCONNECTED243, UNCONNECTED244, UNCONNECTED245;
  wire UNCONNECTED246, UNCONNECTED247, UNCONNECTED248, UNCONNECTED249,
       UNCONNECTED250, UNCONNECTED251, UNCONNECTED252, UNCONNECTED253;
  wire UNCONNECTED254, UNCONNECTED255, UNCONNECTED256, UNCONNECTED257,
       UNCONNECTED258, UNCONNECTED259, UNCONNECTED260, UNCONNECTED261;
  wire UNCONNECTED262, UNCONNECTED263, UNCONNECTED264, UNCONNECTED265,
       UNCONNECTED266, UNCONNECTED267, UNCONNECTED268, UNCONNECTED269;
  wire UNCONNECTED270, UNCONNECTED271, UNCONNECTED272, UNCONNECTED273,
       UNCONNECTED274, UNCONNECTED275, UNCONNECTED276, UNCONNECTED277;
  wire UNCONNECTED278, UNCONNECTED279, UNCONNECTED280, UNCONNECTED281,
       UNCONNECTED282, UNCONNECTED283, UNCONNECTED284, UNCONNECTED285;
  wire UNCONNECTED286, UNCONNECTED287, UNCONNECTED288, UNCONNECTED289,
       UNCONNECTED290, UNCONNECTED291, UNCONNECTED292, UNCONNECTED293;
  wire UNCONNECTED294, UNCONNECTED295, UNCONNECTED296, UNCONNECTED297,
       UNCONNECTED298, UNCONNECTED299, UNCONNECTED300, UNCONNECTED301;
  wire UNCONNECTED302, UNCONNECTED303, UNCONNECTED304, UNCONNECTED305,
       UNCONNECTED306, UNCONNECTED307, UNCONNECTED308, UNCONNECTED309;
  wire UNCONNECTED310, UNCONNECTED311, UNCONNECTED312, UNCONNECTED313,
       UNCONNECTED314, UNCONNECTED315, UNCONNECTED316, UNCONNECTED317;
  wire UNCONNECTED318, UNCONNECTED319, UNCONNECTED320, UNCONNECTED321,
       UNCONNECTED322, UNCONNECTED323, UNCONNECTED324, UNCONNECTED325;
  wire UNCONNECTED326, UNCONNECTED327, UNCONNECTED328, UNCONNECTED329,
       UNCONNECTED330, UNCONNECTED331, UNCONNECTED332, UNCONNECTED333;
  wire UNCONNECTED334, UNCONNECTED335, UNCONNECTED336, UNCONNECTED337,
       UNCONNECTED338, UNCONNECTED339, UNCONNECTED340, UNCONNECTED341;
  wire UNCONNECTED342, UNCONNECTED343, UNCONNECTED344, UNCONNECTED345,
       UNCONNECTED346, UNCONNECTED347, UNCONNECTED348, UNCONNECTED349;
  wire UNCONNECTED350, UNCONNECTED351, UNCONNECTED352, UNCONNECTED353,
       UNCONNECTED354, UNCONNECTED355, UNCONNECTED356, UNCONNECTED357;
  wire UNCONNECTED358, UNCONNECTED359, UNCONNECTED360, UNCONNECTED361,
       UNCONNECTED362, UNCONNECTED363, UNCONNECTED364, UNCONNECTED365;
  wire UNCONNECTED366, UNCONNECTED367, UNCONNECTED368, UNCONNECTED369,
       UNCONNECTED370, UNCONNECTED371, UNCONNECTED372, UNCONNECTED373;
  wire UNCONNECTED374, UNCONNECTED375, UNCONNECTED376, UNCONNECTED377,
       UNCONNECTED378, UNCONNECTED379, UNCONNECTED380, UNCONNECTED381;
  wire UNCONNECTED382, UNCONNECTED383, UNCONNECTED384, UNCONNECTED385,
       UNCONNECTED386, UNCONNECTED387, UNCONNECTED388, UNCONNECTED389;
  wire UNCONNECTED390, UNCONNECTED391, UNCONNECTED392, UNCONNECTED393,
       UNCONNECTED394, UNCONNECTED395, UNCONNECTED396, UNCONNECTED397;
  wire UNCONNECTED398, UNCONNECTED399, UNCONNECTED400, UNCONNECTED401,
       UNCONNECTED402, UNCONNECTED403, UNCONNECTED404, UNCONNECTED405;
  wire UNCONNECTED406, UNCONNECTED407, UNCONNECTED408, UNCONNECTED409,
       UNCONNECTED410, UNCONNECTED411, UNCONNECTED412, UNCONNECTED413;
  wire UNCONNECTED414, UNCONNECTED415, UNCONNECTED416, UNCONNECTED417,
       UNCONNECTED418, UNCONNECTED419, UNCONNECTED420, UNCONNECTED421;
  wire UNCONNECTED422, UNCONNECTED423, UNCONNECTED424, UNCONNECTED425,
       UNCONNECTED426, UNCONNECTED427, UNCONNECTED428, UNCONNECTED429;
  wire UNCONNECTED430, UNCONNECTED431, UNCONNECTED432, UNCONNECTED433,
       UNCONNECTED434, UNCONNECTED435, UNCONNECTED436, UNCONNECTED437;
  wire UNCONNECTED438, UNCONNECTED439, UNCONNECTED440, UNCONNECTED441,
       UNCONNECTED442, UNCONNECTED443, UNCONNECTED444, UNCONNECTED445;
  wire UNCONNECTED446, UNCONNECTED447, UNCONNECTED448, UNCONNECTED449,
       UNCONNECTED450, UNCONNECTED451, UNCONNECTED452, UNCONNECTED453;
  wire UNCONNECTED454, UNCONNECTED455, UNCONNECTED456, UNCONNECTED457,
       UNCONNECTED458, UNCONNECTED459, UNCONNECTED460, UNCONNECTED461;
  wire UNCONNECTED462, UNCONNECTED463, UNCONNECTED464, UNCONNECTED465,
       UNCONNECTED466, UNCONNECTED467, UNCONNECTED468, UNCONNECTED469;
  wire UNCONNECTED470, UNCONNECTED471, UNCONNECTED472, UNCONNECTED473,
       UNCONNECTED474, UNCONNECTED475, UNCONNECTED476, UNCONNECTED477;
  wire UNCONNECTED478, UNCONNECTED479, UNCONNECTED480, UNCONNECTED481,
       UNCONNECTED482, UNCONNECTED483, UNCONNECTED484, UNCONNECTED485;
  wire UNCONNECTED486, UNCONNECTED487, UNCONNECTED488, UNCONNECTED489,
       UNCONNECTED490, UNCONNECTED491, UNCONNECTED492, UNCONNECTED493;
  wire UNCONNECTED494, UNCONNECTED495, UNCONNECTED496, UNCONNECTED497,
       UNCONNECTED498, UNCONNECTED499, UNCONNECTED500, UNCONNECTED501;
  wire UNCONNECTED502, UNCONNECTED503, UNCONNECTED504, UNCONNECTED505,
       UNCONNECTED506, UNCONNECTED507, UNCONNECTED508, UNCONNECTED509;
  wire UNCONNECTED510, UNCONNECTED511, UNCONNECTED512, UNCONNECTED513,
       UNCONNECTED514, UNCONNECTED515, UNCONNECTED516, UNCONNECTED517;
  wire UNCONNECTED518, UNCONNECTED519, UNCONNECTED520, UNCONNECTED521,
       UNCONNECTED522, UNCONNECTED523, UNCONNECTED524, UNCONNECTED525;
  wire UNCONNECTED526, UNCONNECTED527, UNCONNECTED528, UNCONNECTED529,
       UNCONNECTED530, UNCONNECTED531, UNCONNECTED532, UNCONNECTED533;
  wire UNCONNECTED534, UNCONNECTED535, UNCONNECTED536, UNCONNECTED537,
       UNCONNECTED538, UNCONNECTED539, UNCONNECTED540, UNCONNECTED541;
  wire UNCONNECTED542, UNCONNECTED543, UNCONNECTED544, UNCONNECTED545,
       UNCONNECTED546, UNCONNECTED547, UNCONNECTED548, UNCONNECTED549;
  wire UNCONNECTED550, UNCONNECTED551, UNCONNECTED552, UNCONNECTED553,
       UNCONNECTED554, UNCONNECTED555, UNCONNECTED556, UNCONNECTED557;
  wire UNCONNECTED558, UNCONNECTED559, UNCONNECTED560, UNCONNECTED561,
       UNCONNECTED562, UNCONNECTED563, UNCONNECTED564, UNCONNECTED565;
  wire UNCONNECTED566, UNCONNECTED567, UNCONNECTED568, UNCONNECTED569,
       UNCONNECTED570, UNCONNECTED571, UNCONNECTED572, UNCONNECTED573;
  wire UNCONNECTED574, UNCONNECTED575, UNCONNECTED576, UNCONNECTED577,
       UNCONNECTED578, UNCONNECTED579, UNCONNECTED580, UNCONNECTED581;
  wire UNCONNECTED582, UNCONNECTED583, UNCONNECTED584, UNCONNECTED585,
       UNCONNECTED586, UNCONNECTED587, UNCONNECTED588, UNCONNECTED589;
  wire UNCONNECTED590, UNCONNECTED591, UNCONNECTED592, UNCONNECTED593,
       UNCONNECTED594, UNCONNECTED595, UNCONNECTED596, UNCONNECTED597;
  wire UNCONNECTED598, UNCONNECTED599, UNCONNECTED600, UNCONNECTED601,
       UNCONNECTED602, UNCONNECTED603, UNCONNECTED604, UNCONNECTED605;
  wire UNCONNECTED606, UNCONNECTED607, UNCONNECTED608, UNCONNECTED609,
       UNCONNECTED610, UNCONNECTED611, UNCONNECTED612, UNCONNECTED613;
  wire UNCONNECTED614, UNCONNECTED615, UNCONNECTED616, UNCONNECTED617,
       UNCONNECTED618, UNCONNECTED619, UNCONNECTED620, UNCONNECTED621;
  wire UNCONNECTED622, UNCONNECTED623, UNCONNECTED624, UNCONNECTED625,
       UNCONNECTED626, UNCONNECTED627, UNCONNECTED628, UNCONNECTED629;
  wire UNCONNECTED630, UNCONNECTED631, UNCONNECTED632, UNCONNECTED633,
       UNCONNECTED634, UNCONNECTED635, UNCONNECTED636, UNCONNECTED637;
  wire UNCONNECTED638, UNCONNECTED639, UNCONNECTED640, UNCONNECTED641,
       UNCONNECTED642, UNCONNECTED643, UNCONNECTED644, UNCONNECTED645;
  wire UNCONNECTED646, UNCONNECTED647, UNCONNECTED648, UNCONNECTED649,
       UNCONNECTED650, UNCONNECTED651, UNCONNECTED652, UNCONNECTED653;
  wire UNCONNECTED654, UNCONNECTED655, UNCONNECTED656, UNCONNECTED657,
       UNCONNECTED658, UNCONNECTED659, UNCONNECTED660, UNCONNECTED661;
  wire UNCONNECTED662, UNCONNECTED663, UNCONNECTED664, UNCONNECTED665,
       UNCONNECTED666, UNCONNECTED667, UNCONNECTED668, UNCONNECTED669;
  wire UNCONNECTED670, UNCONNECTED671, UNCONNECTED672, UNCONNECTED673,
       UNCONNECTED674, UNCONNECTED675, UNCONNECTED676, UNCONNECTED677;
  wire UNCONNECTED678, UNCONNECTED679, UNCONNECTED680, UNCONNECTED681,
       UNCONNECTED682, UNCONNECTED683, UNCONNECTED684, UNCONNECTED685;
  wire UNCONNECTED686, UNCONNECTED687, UNCONNECTED688, UNCONNECTED689,
       UNCONNECTED690, UNCONNECTED691, UNCONNECTED692, UNCONNECTED693;
  wire UNCONNECTED694, UNCONNECTED695, UNCONNECTED696, UNCONNECTED697,
       UNCONNECTED698, UNCONNECTED699, UNCONNECTED700, UNCONNECTED701;
  wire UNCONNECTED702, UNCONNECTED703, UNCONNECTED704, UNCONNECTED705,
       UNCONNECTED706, UNCONNECTED707, UNCONNECTED708, UNCONNECTED709;
  wire UNCONNECTED710, UNCONNECTED711, UNCONNECTED712, UNCONNECTED713,
       UNCONNECTED714, UNCONNECTED715, b_flag_A, b_flag_B;
  wire b_flag_C, bas_flag_A, bas_flag_B, bas_flag_C,
       baseline_flagTmrError, baseline_flag_A, baseline_flag_B,
       baseline_flag_C;
  wire n_25, n_27, n_39, n_61, n_62, n_63, n_64, n_65;
  wire n_66, n_67, n_68, n_715, n_716, n_717, n_718, n_719;
  wire n_720, n_745, n_746, n_747, n_748, n_749, n_750, n_751;
  wire n_752, n_753, n_754, n_755, n_756, n_757, n_758, n_759;
  wire n_760, n_761, n_762, n_763, n_764, n_765, n_766, n_767;
  wire n_768, n_769, n_770, n_771, n_772, n_773, n_774, n_775;
  wire n_776, n_777, n_778, n_779, n_780, n_786, n_787, n_788;
  wire n_789, n_790, n_791, n_792, n_793, n_802, n_803, n_804;
  wire n_805, n_806, n_807, n_808, n_809, n_818, n_819, n_820;
  wire n_821, n_822, n_823, n_824, n_825, n_835, n_837, n_839;
  wire n_2745, n_2771, n_2797, n_2801, n_2803, n_2804, n_2807, n_2809;
  wire n_2810, n_2813, n_2815, n_2816, n_2817, n_2818, n_2819, n_2820;
  wire n_2821, n_2822, n_2823, n_2824, n_2825, n_2826, n_2827, n_2828;
  wire n_2829, n_2830, n_2831, n_2832, n_2833, n_2835, n_2836, n_2837;
  wire n_2838, n_2839, n_2840, n_2841, n_2843, n_2844, n_2845, n_2846;
  wire n_2847, n_2848, n_2849, n_2851, n_2852, n_2870, n_2871, n_2872;
  wire n_2873, n_2874, n_2875, n_2876, n_2877, n_2878, n_2879, n_2880;
  wire n_2898, n_2899, n_2900, n_2901, n_2902, n_2903, n_2904, n_2905;
  wire n_2906, n_2907, n_2908, ref_sat_A, ref_sat_B, ref_sat_C;
  majorityVoter_WIDTH13 DATA_to_encVoter(.inA (DATA_to_enc_A), .inB
       (DATA_to_enc_B), .inC (DATA_to_enc_C), .out (DATA_to_enc),
       .tmrErr (DATA_to_encTmrError));
  majorityVoter baseline_flagVoter(.inA (baseline_flag_A), .inB
       (baseline_flag_B), .inC (baseline_flag_C), .out (baseline_flag),
       .tmrErr (baseline_flagTmrError));
  fanout_WIDTH2 GAIN_SEL_MODEFanout(.in (GAIN_SEL_MODE), .outA
       (GAIN_SEL_MODE_A), .outB (GAIN_SEL_MODE_B), .outC
       (GAIN_SEL_MODE_C));
  geq_unsigned gte_206_109(.A (FIFO_g10_ref_A), .B (SATval_A), .Z
       (n_763));
  geq_unsigned gte_207_109(.A (FIFO_g10_ref_B), .B (SATval_B), .Z
       (n_754));
  geq_unsigned gte_208_109(.A (FIFO_g10_ref_C), .B (SATval_C), .Z
       (n_745));
  add_unsigned add_186_29(.A (wr_ptr_A), .B (1'b1), .Z ({n_762, n_761,
       n_760}));
  add_unsigned_89 add_191_30(.A ({n_762, n_761, n_760}), .B (2'b11), .Z
       (ref_ptr_A));
  add_unsigned add_187_29(.A (wr_ptr_B), .B (1'b1), .Z ({n_753, n_752,
       n_751}));
  add_unsigned_89 add_192_30(.A ({n_753, n_752, n_751}), .B (2'b11), .Z
       (ref_ptr_B));
  add_unsigned add_188_29(.A (wr_ptr_C), .B (1'b1), .Z ({n_720, n_719,
       n_718}));
  add_unsigned_89 add_193_30(.A ({n_720, n_719, n_718}), .B (2'b11), .Z
       (ref_ptr_C));
  bmux_98 mux_wr_ptr_C_141_15(.ctl (n_715), .in_0 ({n_720, n_719,
       n_718}), .in_1 (3'b000), .z ({UNCONNECTED73, UNCONNECTED72,
       UNCONNECTED71}));
  bmux_19 \mux_FIFO_g10_C[0]_172_15 (.ctl (n_715), .in_0
       (DATA_gain_10), .in_1 (12'b000000000000), .z ({UNCONNECTED85,
       UNCONNECTED84, UNCONNECTED83, UNCONNECTED82, UNCONNECTED81,
       UNCONNECTED80, UNCONNECTED79, UNCONNECTED78, UNCONNECTED77,
       UNCONNECTED76, UNCONNECTED75, UNCONNECTED74}));
  bmux_19 \mux_FIFO_g10_C[1]_172_15 (.ctl (n_715), .in_0
       (DATA_gain_10), .in_1 (12'b000000000000), .z ({UNCONNECTED97,
       UNCONNECTED96, UNCONNECTED95, UNCONNECTED94, UNCONNECTED93,
       UNCONNECTED92, UNCONNECTED91, UNCONNECTED90, UNCONNECTED89,
       UNCONNECTED88, UNCONNECTED87, UNCONNECTED86}));
  bmux_19 \mux_FIFO_g10_C[2]_172_15 (.ctl (n_715), .in_0
       (DATA_gain_10), .in_1 (12'b000000000000), .z ({UNCONNECTED109,
       UNCONNECTED108, UNCONNECTED107, UNCONNECTED106, UNCONNECTED105,
       UNCONNECTED104, UNCONNECTED103, UNCONNECTED102, UNCONNECTED101,
       UNCONNECTED100, UNCONNECTED99, UNCONNECTED98}));
  bmux_19 \mux_FIFO_g10_C[3]_172_15 (.ctl (n_715), .in_0
       (DATA_gain_10), .in_1 (12'b000000000000), .z ({UNCONNECTED121,
       UNCONNECTED120, UNCONNECTED119, UNCONNECTED118, UNCONNECTED117,
       UNCONNECTED116, UNCONNECTED115, UNCONNECTED114, UNCONNECTED113,
       UNCONNECTED112, UNCONNECTED111, UNCONNECTED110}));
  bmux_19 \mux_FIFO_g10_C[4]_172_15 (.ctl (n_715), .in_0
       (DATA_gain_10), .in_1 (12'b000000000000), .z ({UNCONNECTED133,
       UNCONNECTED132, UNCONNECTED131, UNCONNECTED130, UNCONNECTED129,
       UNCONNECTED128, UNCONNECTED127, UNCONNECTED126, UNCONNECTED125,
       UNCONNECTED124, UNCONNECTED123, UNCONNECTED122}));
  bmux_19 \mux_FIFO_g10_C[5]_172_15 (.ctl (n_715), .in_0
       (DATA_gain_10), .in_1 (12'b000000000000), .z ({UNCONNECTED145,
       UNCONNECTED144, UNCONNECTED143, UNCONNECTED142, UNCONNECTED141,
       UNCONNECTED140, UNCONNECTED139, UNCONNECTED138, UNCONNECTED137,
       UNCONNECTED136, UNCONNECTED135, UNCONNECTED134}));
  bmux_19 \mux_FIFO_g10_C[6]_172_15 (.ctl (n_715), .in_0
       (DATA_gain_10), .in_1 (12'b000000000000), .z ({UNCONNECTED157,
       UNCONNECTED156, UNCONNECTED155, UNCONNECTED154, UNCONNECTED153,
       UNCONNECTED152, UNCONNECTED151, UNCONNECTED150, UNCONNECTED149,
       UNCONNECTED148, UNCONNECTED147, UNCONNECTED146}));
  bmux_19 \mux_FIFO_g10_C[7]_172_15 (.ctl (n_715), .in_0
       (DATA_gain_10), .in_1 (12'b000000000000), .z ({UNCONNECTED169,
       UNCONNECTED168, UNCONNECTED167, UNCONNECTED166, UNCONNECTED165,
       UNCONNECTED164, UNCONNECTED163, UNCONNECTED162, UNCONNECTED161,
       UNCONNECTED160, UNCONNECTED159, UNCONNECTED158}));
  bmux_107 \mux_FIFO_g10_C[ref_ptr_C]_198_26 (.ctl (ref_ptr_C), .in_0
       ({\FIFO_g10_C[0] [11], \FIFO_g10_C[0] [10], \FIFO_g10_C[0] [9],
       \FIFO_g10_C[0] [8], \FIFO_g10_C[0] [7], \FIFO_g10_C[0] [6],
       \FIFO_g10_C[0] [5], \FIFO_g10_C[0] [4], \FIFO_g10_C[0] [3],
       \FIFO_g10_C[0] [2], \FIFO_g10_C[0] [1], \FIFO_g10_C[0] [0]}),
       .in_1 ({\FIFO_g10_C[1] [11], \FIFO_g10_C[1] [10],
       \FIFO_g10_C[1] [9], \FIFO_g10_C[1] [8], \FIFO_g10_C[1] [7],
       \FIFO_g10_C[1] [6], \FIFO_g10_C[1] [5], \FIFO_g10_C[1] [4],
       \FIFO_g10_C[1] [3], \FIFO_g10_C[1] [2], \FIFO_g10_C[1] [1],
       \FIFO_g10_C[1] [0]}), .in_2 ({\FIFO_g10_C[2] [11],
       \FIFO_g10_C[2] [10], \FIFO_g10_C[2] [9], \FIFO_g10_C[2] [8],
       \FIFO_g10_C[2] [7], \FIFO_g10_C[2] [6], \FIFO_g10_C[2] [5],
       \FIFO_g10_C[2] [4], \FIFO_g10_C[2] [3], \FIFO_g10_C[2] [2],
       \FIFO_g10_C[2] [1], \FIFO_g10_C[2] [0]}), .in_3
       ({\FIFO_g10_C[3] [11], \FIFO_g10_C[3] [10], \FIFO_g10_C[3] [9],
       \FIFO_g10_C[3] [8], \FIFO_g10_C[3] [7], \FIFO_g10_C[3] [6],
       \FIFO_g10_C[3] [5], \FIFO_g10_C[3] [4], \FIFO_g10_C[3] [3],
       \FIFO_g10_C[3] [2], \FIFO_g10_C[3] [1], \FIFO_g10_C[3] [0]}),
       .in_4 ({\FIFO_g10_C[4] [11], \FIFO_g10_C[4] [10],
       \FIFO_g10_C[4] [9], \FIFO_g10_C[4] [8], \FIFO_g10_C[4] [7],
       \FIFO_g10_C[4] [6], \FIFO_g10_C[4] [5], \FIFO_g10_C[4] [4],
       \FIFO_g10_C[4] [3], \FIFO_g10_C[4] [2], \FIFO_g10_C[4] [1],
       \FIFO_g10_C[4] [0]}), .in_5 ({\FIFO_g10_C[5] [11],
       \FIFO_g10_C[5] [10], \FIFO_g10_C[5] [9], \FIFO_g10_C[5] [8],
       \FIFO_g10_C[5] [7], \FIFO_g10_C[5] [6], \FIFO_g10_C[5] [5],
       \FIFO_g10_C[5] [4], \FIFO_g10_C[5] [3], \FIFO_g10_C[5] [2],
       \FIFO_g10_C[5] [1], \FIFO_g10_C[5] [0]}), .in_6
       ({\FIFO_g10_C[6] [11], \FIFO_g10_C[6] [10], \FIFO_g10_C[6] [9],
       \FIFO_g10_C[6] [8], \FIFO_g10_C[6] [7], \FIFO_g10_C[6] [6],
       \FIFO_g10_C[6] [5], \FIFO_g10_C[6] [4], \FIFO_g10_C[6] [3],
       \FIFO_g10_C[6] [2], \FIFO_g10_C[6] [1], \FIFO_g10_C[6] [0]}),
       .in_7 ({\FIFO_g10_C[7] [11], \FIFO_g10_C[7] [10],
       \FIFO_g10_C[7] [9], \FIFO_g10_C[7] [8], \FIFO_g10_C[7] [7],
       \FIFO_g10_C[7] [6], \FIFO_g10_C[7] [5], \FIFO_g10_C[7] [4],
       \FIFO_g10_C[7] [3], \FIFO_g10_C[7] [2], \FIFO_g10_C[7] [1],
       \FIFO_g10_C[7] [0]}), .z (FIFO_g10_ref_C));
  bmux_19 mux_SATval_C_124_15(.ctl (n_715), .in_0 (SATURATION_value),
       .in_1 (12'b111111111111), .z ({UNCONNECTED181, UNCONNECTED180,
       UNCONNECTED179, UNCONNECTED178, UNCONNECTED177, UNCONNECTED176,
       UNCONNECTED175, UNCONNECTED174, UNCONNECTED173, UNCONNECTED172,
       UNCONNECTED171, UNCONNECTED170}));
  bmux mux_208_109(.ctl (n_745), .in_0 (1'b0), .in_1 (1'b1), .z
       (n_746));
  bmux mux_208_74(.ctl (n_717), .in_0 (n_746), .in_1 (1'b0), .z
       (n_747));
  bmux mux_208_38(.ctl (n_716), .in_0 (n_747), .in_1 (1'b1), .z
       (ref_sat_C));
  bmux_112 mux_gain_sel_C_221_15(.ctl (n_715), .in_0 ({gain_sel_C[6:0],
       ref_sat_C}), .in_1 (8'b00000000), .z ({UNCONNECTED189,
       UNCONNECTED188, UNCONNECTED187, UNCONNECTED186, UNCONNECTED185,
       UNCONNECTED184, UNCONNECTED183, UNCONNECTED182}));
  bmux_98 mux_wr_ptr_B_136_15(.ctl (n_748), .in_0 ({n_753, n_752,
       n_751}), .in_1 (3'b000), .z ({UNCONNECTED192, UNCONNECTED191,
       UNCONNECTED190}));
  bmux_19 \mux_FIFO_g10_B[0]_160_15 (.ctl (n_748), .in_0
       (DATA_gain_10), .in_1 (12'b000000000000), .z ({UNCONNECTED204,
       UNCONNECTED203, UNCONNECTED202, UNCONNECTED201, UNCONNECTED200,
       UNCONNECTED199, UNCONNECTED198, UNCONNECTED197, UNCONNECTED196,
       UNCONNECTED195, UNCONNECTED194, UNCONNECTED193}));
  bmux_19 \mux_FIFO_g10_B[1]_160_15 (.ctl (n_748), .in_0
       (DATA_gain_10), .in_1 (12'b000000000000), .z ({UNCONNECTED216,
       UNCONNECTED215, UNCONNECTED214, UNCONNECTED213, UNCONNECTED212,
       UNCONNECTED211, UNCONNECTED210, UNCONNECTED209, UNCONNECTED208,
       UNCONNECTED207, UNCONNECTED206, UNCONNECTED205}));
  bmux_19 \mux_FIFO_g10_B[2]_160_15 (.ctl (n_748), .in_0
       (DATA_gain_10), .in_1 (12'b000000000000), .z ({UNCONNECTED228,
       UNCONNECTED227, UNCONNECTED226, UNCONNECTED225, UNCONNECTED224,
       UNCONNECTED223, UNCONNECTED222, UNCONNECTED221, UNCONNECTED220,
       UNCONNECTED219, UNCONNECTED218, UNCONNECTED217}));
  bmux_19 \mux_FIFO_g10_B[3]_160_15 (.ctl (n_748), .in_0
       (DATA_gain_10), .in_1 (12'b000000000000), .z ({UNCONNECTED240,
       UNCONNECTED239, UNCONNECTED238, UNCONNECTED237, UNCONNECTED236,
       UNCONNECTED235, UNCONNECTED234, UNCONNECTED233, UNCONNECTED232,
       UNCONNECTED231, UNCONNECTED230, UNCONNECTED229}));
  bmux_19 \mux_FIFO_g10_B[4]_160_15 (.ctl (n_748), .in_0
       (DATA_gain_10), .in_1 (12'b000000000000), .z ({UNCONNECTED252,
       UNCONNECTED251, UNCONNECTED250, UNCONNECTED249, UNCONNECTED248,
       UNCONNECTED247, UNCONNECTED246, UNCONNECTED245, UNCONNECTED244,
       UNCONNECTED243, UNCONNECTED242, UNCONNECTED241}));
  bmux_19 \mux_FIFO_g10_B[5]_160_15 (.ctl (n_748), .in_0
       (DATA_gain_10), .in_1 (12'b000000000000), .z ({UNCONNECTED264,
       UNCONNECTED263, UNCONNECTED262, UNCONNECTED261, UNCONNECTED260,
       UNCONNECTED259, UNCONNECTED258, UNCONNECTED257, UNCONNECTED256,
       UNCONNECTED255, UNCONNECTED254, UNCONNECTED253}));
  bmux_19 \mux_FIFO_g10_B[6]_160_15 (.ctl (n_748), .in_0
       (DATA_gain_10), .in_1 (12'b000000000000), .z ({UNCONNECTED276,
       UNCONNECTED275, UNCONNECTED274, UNCONNECTED273, UNCONNECTED272,
       UNCONNECTED271, UNCONNECTED270, UNCONNECTED269, UNCONNECTED268,
       UNCONNECTED267, UNCONNECTED266, UNCONNECTED265}));
  bmux_19 \mux_FIFO_g10_B[7]_160_15 (.ctl (n_748), .in_0
       (DATA_gain_10), .in_1 (12'b000000000000), .z ({UNCONNECTED288,
       UNCONNECTED287, UNCONNECTED286, UNCONNECTED285, UNCONNECTED284,
       UNCONNECTED283, UNCONNECTED282, UNCONNECTED281, UNCONNECTED280,
       UNCONNECTED279, UNCONNECTED278, UNCONNECTED277}));
  bmux_107 \mux_FIFO_g10_B[ref_ptr_B]_197_26 (.ctl (ref_ptr_B), .in_0
       ({\FIFO_g10_B[0] [11], \FIFO_g10_B[0] [10], \FIFO_g10_B[0] [9],
       \FIFO_g10_B[0] [8], \FIFO_g10_B[0] [7], \FIFO_g10_B[0] [6],
       \FIFO_g10_B[0] [5], \FIFO_g10_B[0] [4], \FIFO_g10_B[0] [3],
       \FIFO_g10_B[0] [2], \FIFO_g10_B[0] [1], \FIFO_g10_B[0] [0]}),
       .in_1 ({\FIFO_g10_B[1] [11], \FIFO_g10_B[1] [10],
       \FIFO_g10_B[1] [9], \FIFO_g10_B[1] [8], \FIFO_g10_B[1] [7],
       \FIFO_g10_B[1] [6], \FIFO_g10_B[1] [5], \FIFO_g10_B[1] [4],
       \FIFO_g10_B[1] [3], \FIFO_g10_B[1] [2], \FIFO_g10_B[1] [1],
       \FIFO_g10_B[1] [0]}), .in_2 ({\FIFO_g10_B[2] [11],
       \FIFO_g10_B[2] [10], \FIFO_g10_B[2] [9], \FIFO_g10_B[2] [8],
       \FIFO_g10_B[2] [7], \FIFO_g10_B[2] [6], \FIFO_g10_B[2] [5],
       \FIFO_g10_B[2] [4], \FIFO_g10_B[2] [3], \FIFO_g10_B[2] [2],
       \FIFO_g10_B[2] [1], \FIFO_g10_B[2] [0]}), .in_3
       ({\FIFO_g10_B[3] [11], \FIFO_g10_B[3] [10], \FIFO_g10_B[3] [9],
       \FIFO_g10_B[3] [8], \FIFO_g10_B[3] [7], \FIFO_g10_B[3] [6],
       \FIFO_g10_B[3] [5], \FIFO_g10_B[3] [4], \FIFO_g10_B[3] [3],
       \FIFO_g10_B[3] [2], \FIFO_g10_B[3] [1], \FIFO_g10_B[3] [0]}),
       .in_4 ({\FIFO_g10_B[4] [11], \FIFO_g10_B[4] [10],
       \FIFO_g10_B[4] [9], \FIFO_g10_B[4] [8], \FIFO_g10_B[4] [7],
       \FIFO_g10_B[4] [6], \FIFO_g10_B[4] [5], \FIFO_g10_B[4] [4],
       \FIFO_g10_B[4] [3], \FIFO_g10_B[4] [2], \FIFO_g10_B[4] [1],
       \FIFO_g10_B[4] [0]}), .in_5 ({\FIFO_g10_B[5] [11],
       \FIFO_g10_B[5] [10], \FIFO_g10_B[5] [9], \FIFO_g10_B[5] [8],
       \FIFO_g10_B[5] [7], \FIFO_g10_B[5] [6], \FIFO_g10_B[5] [5],
       \FIFO_g10_B[5] [4], \FIFO_g10_B[5] [3], \FIFO_g10_B[5] [2],
       \FIFO_g10_B[5] [1], \FIFO_g10_B[5] [0]}), .in_6
       ({\FIFO_g10_B[6] [11], \FIFO_g10_B[6] [10], \FIFO_g10_B[6] [9],
       \FIFO_g10_B[6] [8], \FIFO_g10_B[6] [7], \FIFO_g10_B[6] [6],
       \FIFO_g10_B[6] [5], \FIFO_g10_B[6] [4], \FIFO_g10_B[6] [3],
       \FIFO_g10_B[6] [2], \FIFO_g10_B[6] [1], \FIFO_g10_B[6] [0]}),
       .in_7 ({\FIFO_g10_B[7] [11], \FIFO_g10_B[7] [10],
       \FIFO_g10_B[7] [9], \FIFO_g10_B[7] [8], \FIFO_g10_B[7] [7],
       \FIFO_g10_B[7] [6], \FIFO_g10_B[7] [5], \FIFO_g10_B[7] [4],
       \FIFO_g10_B[7] [3], \FIFO_g10_B[7] [2], \FIFO_g10_B[7] [1],
       \FIFO_g10_B[7] [0]}), .z (FIFO_g10_ref_B));
  bmux_19 mux_SATval_B_120_15(.ctl (n_748), .in_0 (SATURATION_value),
       .in_1 (12'b111111111111), .z ({UNCONNECTED300, UNCONNECTED299,
       UNCONNECTED298, UNCONNECTED297, UNCONNECTED296, UNCONNECTED295,
       UNCONNECTED294, UNCONNECTED293, UNCONNECTED292, UNCONNECTED291,
       UNCONNECTED290, UNCONNECTED289}));
  bmux mux_207_109(.ctl (n_754), .in_0 (1'b0), .in_1 (1'b1), .z
       (n_755));
  bmux mux_207_74(.ctl (n_750), .in_0 (n_755), .in_1 (1'b0), .z
       (n_756));
  bmux mux_207_38(.ctl (n_749), .in_0 (n_756), .in_1 (1'b1), .z
       (ref_sat_B));
  bmux_112 mux_gain_sel_B_216_15(.ctl (n_748), .in_0 ({gain_sel_B[6:0],
       ref_sat_B}), .in_1 (8'b00000000), .z ({UNCONNECTED308,
       UNCONNECTED307, UNCONNECTED306, UNCONNECTED305, UNCONNECTED304,
       UNCONNECTED303, UNCONNECTED302, UNCONNECTED301}));
  bmux_98 mux_wr_ptr_A_131_15(.ctl (n_757), .in_0 ({n_762, n_761,
       n_760}), .in_1 (3'b000), .z ({UNCONNECTED311, UNCONNECTED310,
       UNCONNECTED309}));
  bmux_19 \mux_FIFO_g10_A[0]_148_15 (.ctl (n_757), .in_0
       (DATA_gain_10), .in_1 (12'b000000000000), .z ({UNCONNECTED323,
       UNCONNECTED322, UNCONNECTED321, UNCONNECTED320, UNCONNECTED319,
       UNCONNECTED318, UNCONNECTED317, UNCONNECTED316, UNCONNECTED315,
       UNCONNECTED314, UNCONNECTED313, UNCONNECTED312}));
  bmux_19 \mux_FIFO_g10_A[1]_148_15 (.ctl (n_757), .in_0
       (DATA_gain_10), .in_1 (12'b000000000000), .z ({UNCONNECTED335,
       UNCONNECTED334, UNCONNECTED333, UNCONNECTED332, UNCONNECTED331,
       UNCONNECTED330, UNCONNECTED329, UNCONNECTED328, UNCONNECTED327,
       UNCONNECTED326, UNCONNECTED325, UNCONNECTED324}));
  bmux_19 \mux_FIFO_g10_A[2]_148_15 (.ctl (n_757), .in_0
       (DATA_gain_10), .in_1 (12'b000000000000), .z ({UNCONNECTED347,
       UNCONNECTED346, UNCONNECTED345, UNCONNECTED344, UNCONNECTED343,
       UNCONNECTED342, UNCONNECTED341, UNCONNECTED340, UNCONNECTED339,
       UNCONNECTED338, UNCONNECTED337, UNCONNECTED336}));
  bmux_19 \mux_FIFO_g10_A[3]_148_15 (.ctl (n_757), .in_0
       (DATA_gain_10), .in_1 (12'b000000000000), .z ({UNCONNECTED359,
       UNCONNECTED358, UNCONNECTED357, UNCONNECTED356, UNCONNECTED355,
       UNCONNECTED354, UNCONNECTED353, UNCONNECTED352, UNCONNECTED351,
       UNCONNECTED350, UNCONNECTED349, UNCONNECTED348}));
  bmux_19 \mux_FIFO_g10_A[4]_148_15 (.ctl (n_757), .in_0
       (DATA_gain_10), .in_1 (12'b000000000000), .z ({UNCONNECTED371,
       UNCONNECTED370, UNCONNECTED369, UNCONNECTED368, UNCONNECTED367,
       UNCONNECTED366, UNCONNECTED365, UNCONNECTED364, UNCONNECTED363,
       UNCONNECTED362, UNCONNECTED361, UNCONNECTED360}));
  bmux_19 \mux_FIFO_g10_A[5]_148_15 (.ctl (n_757), .in_0
       (DATA_gain_10), .in_1 (12'b000000000000), .z ({UNCONNECTED383,
       UNCONNECTED382, UNCONNECTED381, UNCONNECTED380, UNCONNECTED379,
       UNCONNECTED378, UNCONNECTED377, UNCONNECTED376, UNCONNECTED375,
       UNCONNECTED374, UNCONNECTED373, UNCONNECTED372}));
  bmux_19 \mux_FIFO_g10_A[6]_148_15 (.ctl (n_757), .in_0
       (DATA_gain_10), .in_1 (12'b000000000000), .z ({UNCONNECTED395,
       UNCONNECTED394, UNCONNECTED393, UNCONNECTED392, UNCONNECTED391,
       UNCONNECTED390, UNCONNECTED389, UNCONNECTED388, UNCONNECTED387,
       UNCONNECTED386, UNCONNECTED385, UNCONNECTED384}));
  bmux_19 \mux_FIFO_g10_A[7]_148_15 (.ctl (n_757), .in_0
       (DATA_gain_10), .in_1 (12'b000000000000), .z ({UNCONNECTED407,
       UNCONNECTED406, UNCONNECTED405, UNCONNECTED404, UNCONNECTED403,
       UNCONNECTED402, UNCONNECTED401, UNCONNECTED400, UNCONNECTED399,
       UNCONNECTED398, UNCONNECTED397, UNCONNECTED396}));
  bmux_107 \mux_FIFO_g10_A[ref_ptr_A]_196_26 (.ctl (ref_ptr_A), .in_0
       ({\FIFO_g10_A[0] [11], \FIFO_g10_A[0] [10], \FIFO_g10_A[0] [9],
       \FIFO_g10_A[0] [8], \FIFO_g10_A[0] [7], \FIFO_g10_A[0] [6],
       \FIFO_g10_A[0] [5], \FIFO_g10_A[0] [4], \FIFO_g10_A[0] [3],
       \FIFO_g10_A[0] [2], \FIFO_g10_A[0] [1], \FIFO_g10_A[0] [0]}),
       .in_1 ({\FIFO_g10_A[1] [11], \FIFO_g10_A[1] [10],
       \FIFO_g10_A[1] [9], \FIFO_g10_A[1] [8], \FIFO_g10_A[1] [7],
       \FIFO_g10_A[1] [6], \FIFO_g10_A[1] [5], \FIFO_g10_A[1] [4],
       \FIFO_g10_A[1] [3], \FIFO_g10_A[1] [2], \FIFO_g10_A[1] [1],
       \FIFO_g10_A[1] [0]}), .in_2 ({\FIFO_g10_A[2] [11],
       \FIFO_g10_A[2] [10], \FIFO_g10_A[2] [9], \FIFO_g10_A[2] [8],
       \FIFO_g10_A[2] [7], \FIFO_g10_A[2] [6], \FIFO_g10_A[2] [5],
       \FIFO_g10_A[2] [4], \FIFO_g10_A[2] [3], \FIFO_g10_A[2] [2],
       \FIFO_g10_A[2] [1], \FIFO_g10_A[2] [0]}), .in_3
       ({\FIFO_g10_A[3] [11], \FIFO_g10_A[3] [10], \FIFO_g10_A[3] [9],
       \FIFO_g10_A[3] [8], \FIFO_g10_A[3] [7], \FIFO_g10_A[3] [6],
       \FIFO_g10_A[3] [5], \FIFO_g10_A[3] [4], \FIFO_g10_A[3] [3],
       \FIFO_g10_A[3] [2], \FIFO_g10_A[3] [1], \FIFO_g10_A[3] [0]}),
       .in_4 ({\FIFO_g10_A[4] [11], \FIFO_g10_A[4] [10],
       \FIFO_g10_A[4] [9], \FIFO_g10_A[4] [8], \FIFO_g10_A[4] [7],
       \FIFO_g10_A[4] [6], \FIFO_g10_A[4] [5], \FIFO_g10_A[4] [4],
       \FIFO_g10_A[4] [3], \FIFO_g10_A[4] [2], \FIFO_g10_A[4] [1],
       \FIFO_g10_A[4] [0]}), .in_5 ({\FIFO_g10_A[5] [11],
       \FIFO_g10_A[5] [10], \FIFO_g10_A[5] [9], \FIFO_g10_A[5] [8],
       \FIFO_g10_A[5] [7], \FIFO_g10_A[5] [6], \FIFO_g10_A[5] [5],
       \FIFO_g10_A[5] [4], \FIFO_g10_A[5] [3], \FIFO_g10_A[5] [2],
       \FIFO_g10_A[5] [1], \FIFO_g10_A[5] [0]}), .in_6
       ({\FIFO_g10_A[6] [11], \FIFO_g10_A[6] [10], \FIFO_g10_A[6] [9],
       \FIFO_g10_A[6] [8], \FIFO_g10_A[6] [7], \FIFO_g10_A[6] [6],
       \FIFO_g10_A[6] [5], \FIFO_g10_A[6] [4], \FIFO_g10_A[6] [3],
       \FIFO_g10_A[6] [2], \FIFO_g10_A[6] [1], \FIFO_g10_A[6] [0]}),
       .in_7 ({\FIFO_g10_A[7] [11], \FIFO_g10_A[7] [10],
       \FIFO_g10_A[7] [9], \FIFO_g10_A[7] [8], \FIFO_g10_A[7] [7],
       \FIFO_g10_A[7] [6], \FIFO_g10_A[7] [5], \FIFO_g10_A[7] [4],
       \FIFO_g10_A[7] [3], \FIFO_g10_A[7] [2], \FIFO_g10_A[7] [1],
       \FIFO_g10_A[7] [0]}), .z (FIFO_g10_ref_A));
  bmux_19 mux_SATval_A_116_15(.ctl (n_757), .in_0 (SATURATION_value),
       .in_1 (12'b111111111111), .z ({UNCONNECTED419, UNCONNECTED418,
       UNCONNECTED417, UNCONNECTED416, UNCONNECTED415, UNCONNECTED414,
       UNCONNECTED413, UNCONNECTED412, UNCONNECTED411, UNCONNECTED410,
       UNCONNECTED409, UNCONNECTED408}));
  bmux mux_206_109(.ctl (n_763), .in_0 (1'b0), .in_1 (1'b1), .z
       (n_764));
  bmux mux_206_74(.ctl (n_759), .in_0 (n_764), .in_1 (1'b0), .z
       (n_765));
  bmux mux_206_38(.ctl (n_758), .in_0 (n_765), .in_1 (1'b1), .z
       (ref_sat_A));
  bmux_112 mux_gain_sel_A_211_15(.ctl (n_757), .in_0 ({gain_sel_A[6:0],
       ref_sat_A}), .in_1 (8'b00000000), .z ({UNCONNECTED427,
       UNCONNECTED426, UNCONNECTED425, UNCONNECTED424, UNCONNECTED423,
       UNCONNECTED422, UNCONNECTED421, UNCONNECTED420}));
  bmux_19 \mux_FIFO_g1_C[7]_172_15 (.ctl (n_715), .in_0 (DATA_gain_01),
       .in_1 (12'b000000000000), .z ({UNCONNECTED439, UNCONNECTED438,
       UNCONNECTED437, UNCONNECTED436, UNCONNECTED435, UNCONNECTED434,
       UNCONNECTED433, UNCONNECTED432, UNCONNECTED431, UNCONNECTED430,
       UNCONNECTED429, UNCONNECTED428}));
  bmux_19 \mux_FIFO_g1_C[6]_172_15 (.ctl (n_715), .in_0 (DATA_gain_01),
       .in_1 (12'b000000000000), .z ({UNCONNECTED451, UNCONNECTED450,
       UNCONNECTED449, UNCONNECTED448, UNCONNECTED447, UNCONNECTED446,
       UNCONNECTED445, UNCONNECTED444, UNCONNECTED443, UNCONNECTED442,
       UNCONNECTED441, UNCONNECTED440}));
  bmux_19 \mux_FIFO_g1_C[5]_172_15 (.ctl (n_715), .in_0 (DATA_gain_01),
       .in_1 (12'b000000000000), .z ({UNCONNECTED463, UNCONNECTED462,
       UNCONNECTED461, UNCONNECTED460, UNCONNECTED459, UNCONNECTED458,
       UNCONNECTED457, UNCONNECTED456, UNCONNECTED455, UNCONNECTED454,
       UNCONNECTED453, UNCONNECTED452}));
  bmux_19 \mux_FIFO_g1_C[4]_172_15 (.ctl (n_715), .in_0 (DATA_gain_01),
       .in_1 (12'b000000000000), .z ({UNCONNECTED475, UNCONNECTED474,
       UNCONNECTED473, UNCONNECTED472, UNCONNECTED471, UNCONNECTED470,
       UNCONNECTED469, UNCONNECTED468, UNCONNECTED467, UNCONNECTED466,
       UNCONNECTED465, UNCONNECTED464}));
  bmux_19 \mux_FIFO_g1_C[3]_172_15 (.ctl (n_715), .in_0 (DATA_gain_01),
       .in_1 (12'b000000000000), .z ({UNCONNECTED487, UNCONNECTED486,
       UNCONNECTED485, UNCONNECTED484, UNCONNECTED483, UNCONNECTED482,
       UNCONNECTED481, UNCONNECTED480, UNCONNECTED479, UNCONNECTED478,
       UNCONNECTED477, UNCONNECTED476}));
  bmux_19 \mux_FIFO_g1_C[2]_172_15 (.ctl (n_715), .in_0 (DATA_gain_01),
       .in_1 (12'b000000000000), .z ({UNCONNECTED499, UNCONNECTED498,
       UNCONNECTED497, UNCONNECTED496, UNCONNECTED495, UNCONNECTED494,
       UNCONNECTED493, UNCONNECTED492, UNCONNECTED491, UNCONNECTED490,
       UNCONNECTED489, UNCONNECTED488}));
  bmux_19 \mux_FIFO_g1_C[1]_172_15 (.ctl (n_715), .in_0 (DATA_gain_01),
       .in_1 (12'b000000000000), .z ({UNCONNECTED511, UNCONNECTED510,
       UNCONNECTED509, UNCONNECTED508, UNCONNECTED507, UNCONNECTED506,
       UNCONNECTED505, UNCONNECTED504, UNCONNECTED503, UNCONNECTED502,
       UNCONNECTED501, UNCONNECTED500}));
  bmux_19 \mux_FIFO_g1_C[0]_172_15 (.ctl (n_715), .in_0 (DATA_gain_01),
       .in_1 (12'b000000000000), .z ({UNCONNECTED523, UNCONNECTED522,
       UNCONNECTED521, UNCONNECTED520, UNCONNECTED519, UNCONNECTED518,
       UNCONNECTED517, UNCONNECTED516, UNCONNECTED515, UNCONNECTED514,
       UNCONNECTED513, UNCONNECTED512}));
  bmux_19 \mux_FIFO_g1_B[7]_160_15 (.ctl (n_748), .in_0 (DATA_gain_01),
       .in_1 (12'b000000000000), .z ({UNCONNECTED535, UNCONNECTED534,
       UNCONNECTED533, UNCONNECTED532, UNCONNECTED531, UNCONNECTED530,
       UNCONNECTED529, UNCONNECTED528, UNCONNECTED527, UNCONNECTED526,
       UNCONNECTED525, UNCONNECTED524}));
  bmux_19 \mux_FIFO_g1_B[6]_160_15 (.ctl (n_748), .in_0 (DATA_gain_01),
       .in_1 (12'b000000000000), .z ({UNCONNECTED547, UNCONNECTED546,
       UNCONNECTED545, UNCONNECTED544, UNCONNECTED543, UNCONNECTED542,
       UNCONNECTED541, UNCONNECTED540, UNCONNECTED539, UNCONNECTED538,
       UNCONNECTED537, UNCONNECTED536}));
  bmux_19 \mux_FIFO_g1_B[5]_160_15 (.ctl (n_748), .in_0 (DATA_gain_01),
       .in_1 (12'b000000000000), .z ({UNCONNECTED559, UNCONNECTED558,
       UNCONNECTED557, UNCONNECTED556, UNCONNECTED555, UNCONNECTED554,
       UNCONNECTED553, UNCONNECTED552, UNCONNECTED551, UNCONNECTED550,
       UNCONNECTED549, UNCONNECTED548}));
  bmux_19 \mux_FIFO_g1_B[4]_160_15 (.ctl (n_748), .in_0 (DATA_gain_01),
       .in_1 (12'b000000000000), .z ({UNCONNECTED571, UNCONNECTED570,
       UNCONNECTED569, UNCONNECTED568, UNCONNECTED567, UNCONNECTED566,
       UNCONNECTED565, UNCONNECTED564, UNCONNECTED563, UNCONNECTED562,
       UNCONNECTED561, UNCONNECTED560}));
  bmux_19 \mux_FIFO_g1_B[3]_160_15 (.ctl (n_748), .in_0 (DATA_gain_01),
       .in_1 (12'b000000000000), .z ({UNCONNECTED583, UNCONNECTED582,
       UNCONNECTED581, UNCONNECTED580, UNCONNECTED579, UNCONNECTED578,
       UNCONNECTED577, UNCONNECTED576, UNCONNECTED575, UNCONNECTED574,
       UNCONNECTED573, UNCONNECTED572}));
  bmux_19 \mux_FIFO_g1_B[2]_160_15 (.ctl (n_748), .in_0 (DATA_gain_01),
       .in_1 (12'b000000000000), .z ({UNCONNECTED595, UNCONNECTED594,
       UNCONNECTED593, UNCONNECTED592, UNCONNECTED591, UNCONNECTED590,
       UNCONNECTED589, UNCONNECTED588, UNCONNECTED587, UNCONNECTED586,
       UNCONNECTED585, UNCONNECTED584}));
  bmux_19 \mux_FIFO_g1_B[1]_160_15 (.ctl (n_748), .in_0 (DATA_gain_01),
       .in_1 (12'b000000000000), .z ({UNCONNECTED607, UNCONNECTED606,
       UNCONNECTED605, UNCONNECTED604, UNCONNECTED603, UNCONNECTED602,
       UNCONNECTED601, UNCONNECTED600, UNCONNECTED599, UNCONNECTED598,
       UNCONNECTED597, UNCONNECTED596}));
  bmux_19 \mux_FIFO_g1_B[0]_160_15 (.ctl (n_748), .in_0 (DATA_gain_01),
       .in_1 (12'b000000000000), .z ({UNCONNECTED619, UNCONNECTED618,
       UNCONNECTED617, UNCONNECTED616, UNCONNECTED615, UNCONNECTED614,
       UNCONNECTED613, UNCONNECTED612, UNCONNECTED611, UNCONNECTED610,
       UNCONNECTED609, UNCONNECTED608}));
  bmux_19 \mux_FIFO_g1_A[7]_148_15 (.ctl (n_757), .in_0 (DATA_gain_01),
       .in_1 (12'b000000000000), .z ({UNCONNECTED631, UNCONNECTED630,
       UNCONNECTED629, UNCONNECTED628, UNCONNECTED627, UNCONNECTED626,
       UNCONNECTED625, UNCONNECTED624, UNCONNECTED623, UNCONNECTED622,
       UNCONNECTED621, UNCONNECTED620}));
  bmux_19 \mux_FIFO_g1_A[6]_148_15 (.ctl (n_757), .in_0 (DATA_gain_01),
       .in_1 (12'b000000000000), .z ({UNCONNECTED643, UNCONNECTED642,
       UNCONNECTED641, UNCONNECTED640, UNCONNECTED639, UNCONNECTED638,
       UNCONNECTED637, UNCONNECTED636, UNCONNECTED635, UNCONNECTED634,
       UNCONNECTED633, UNCONNECTED632}));
  bmux_19 \mux_FIFO_g1_A[5]_148_15 (.ctl (n_757), .in_0 (DATA_gain_01),
       .in_1 (12'b000000000000), .z ({UNCONNECTED655, UNCONNECTED654,
       UNCONNECTED653, UNCONNECTED652, UNCONNECTED651, UNCONNECTED650,
       UNCONNECTED649, UNCONNECTED648, UNCONNECTED647, UNCONNECTED646,
       UNCONNECTED645, UNCONNECTED644}));
  bmux_19 \mux_FIFO_g1_A[4]_148_15 (.ctl (n_757), .in_0 (DATA_gain_01),
       .in_1 (12'b000000000000), .z ({UNCONNECTED667, UNCONNECTED666,
       UNCONNECTED665, UNCONNECTED664, UNCONNECTED663, UNCONNECTED662,
       UNCONNECTED661, UNCONNECTED660, UNCONNECTED659, UNCONNECTED658,
       UNCONNECTED657, UNCONNECTED656}));
  bmux_19 \mux_FIFO_g1_A[3]_148_15 (.ctl (n_757), .in_0 (DATA_gain_01),
       .in_1 (12'b000000000000), .z ({UNCONNECTED679, UNCONNECTED678,
       UNCONNECTED677, UNCONNECTED676, UNCONNECTED675, UNCONNECTED674,
       UNCONNECTED673, UNCONNECTED672, UNCONNECTED671, UNCONNECTED670,
       UNCONNECTED669, UNCONNECTED668}));
  bmux_19 \mux_FIFO_g1_A[2]_148_15 (.ctl (n_757), .in_0 (DATA_gain_01),
       .in_1 (12'b000000000000), .z ({UNCONNECTED691, UNCONNECTED690,
       UNCONNECTED689, UNCONNECTED688, UNCONNECTED687, UNCONNECTED686,
       UNCONNECTED685, UNCONNECTED684, UNCONNECTED683, UNCONNECTED682,
       UNCONNECTED681, UNCONNECTED680}));
  bmux_19 \mux_FIFO_g1_A[1]_148_15 (.ctl (n_757), .in_0 (DATA_gain_01),
       .in_1 (12'b000000000000), .z ({UNCONNECTED703, UNCONNECTED702,
       UNCONNECTED701, UNCONNECTED700, UNCONNECTED699, UNCONNECTED698,
       UNCONNECTED697, UNCONNECTED696, UNCONNECTED695, UNCONNECTED694,
       UNCONNECTED693, UNCONNECTED692}));
  bmux_19 \mux_FIFO_g1_A[0]_148_15 (.ctl (n_757), .in_0 (DATA_gain_01),
       .in_1 (12'b000000000000), .z ({UNCONNECTED715, UNCONNECTED714,
       UNCONNECTED713, UNCONNECTED712, UNCONNECTED711, UNCONNECTED710,
       UNCONNECTED709, UNCONNECTED708, UNCONNECTED707, UNCONNECTED706,
       UNCONNECTED705, UNCONNECTED704}));
  bmux_107 \mux_FIFO_g10_A[rd_ptr_A]_227_21 (.ctl ({n_762, n_761,
       n_760}), .in_0 ({\FIFO_g10_A[0] [11], \FIFO_g10_A[0] [10],
       \FIFO_g10_A[0] [9], \FIFO_g10_A[0] [8], \FIFO_g10_A[0] [7],
       \FIFO_g10_A[0] [6], \FIFO_g10_A[0] [5], \FIFO_g10_A[0] [4],
       \FIFO_g10_A[0] [3], \FIFO_g10_A[0] [2], \FIFO_g10_A[0] [1],
       \FIFO_g10_A[0] [0]}), .in_1 ({\FIFO_g10_A[1] [11],
       \FIFO_g10_A[1] [10], \FIFO_g10_A[1] [9], \FIFO_g10_A[1] [8],
       \FIFO_g10_A[1] [7], \FIFO_g10_A[1] [6], \FIFO_g10_A[1] [5],
       \FIFO_g10_A[1] [4], \FIFO_g10_A[1] [3], \FIFO_g10_A[1] [2],
       \FIFO_g10_A[1] [1], \FIFO_g10_A[1] [0]}), .in_2
       ({\FIFO_g10_A[2] [11], \FIFO_g10_A[2] [10], \FIFO_g10_A[2] [9],
       \FIFO_g10_A[2] [8], \FIFO_g10_A[2] [7], \FIFO_g10_A[2] [6],
       \FIFO_g10_A[2] [5], \FIFO_g10_A[2] [4], \FIFO_g10_A[2] [3],
       \FIFO_g10_A[2] [2], \FIFO_g10_A[2] [1], \FIFO_g10_A[2] [0]}),
       .in_3 ({\FIFO_g10_A[3] [11], \FIFO_g10_A[3] [10],
       \FIFO_g10_A[3] [9], \FIFO_g10_A[3] [8], \FIFO_g10_A[3] [7],
       \FIFO_g10_A[3] [6], \FIFO_g10_A[3] [5], \FIFO_g10_A[3] [4],
       \FIFO_g10_A[3] [3], \FIFO_g10_A[3] [2], \FIFO_g10_A[3] [1],
       \FIFO_g10_A[3] [0]}), .in_4 ({\FIFO_g10_A[4] [11],
       \FIFO_g10_A[4] [10], \FIFO_g10_A[4] [9], \FIFO_g10_A[4] [8],
       \FIFO_g10_A[4] [7], \FIFO_g10_A[4] [6], \FIFO_g10_A[4] [5],
       \FIFO_g10_A[4] [4], \FIFO_g10_A[4] [3], \FIFO_g10_A[4] [2],
       \FIFO_g10_A[4] [1], \FIFO_g10_A[4] [0]}), .in_5
       ({\FIFO_g10_A[5] [11], \FIFO_g10_A[5] [10], \FIFO_g10_A[5] [9],
       \FIFO_g10_A[5] [8], \FIFO_g10_A[5] [7], \FIFO_g10_A[5] [6],
       \FIFO_g10_A[5] [5], \FIFO_g10_A[5] [4], \FIFO_g10_A[5] [3],
       \FIFO_g10_A[5] [2], \FIFO_g10_A[5] [1], \FIFO_g10_A[5] [0]}),
       .in_6 ({\FIFO_g10_A[6] [11], \FIFO_g10_A[6] [10],
       \FIFO_g10_A[6] [9], \FIFO_g10_A[6] [8], \FIFO_g10_A[6] [7],
       \FIFO_g10_A[6] [6], \FIFO_g10_A[6] [5], \FIFO_g10_A[6] [4],
       \FIFO_g10_A[6] [3], \FIFO_g10_A[6] [2], \FIFO_g10_A[6] [1],
       \FIFO_g10_A[6] [0]}), .in_7 ({\FIFO_g10_A[7] [11],
       \FIFO_g10_A[7] [10], \FIFO_g10_A[7] [9], \FIFO_g10_A[7] [8],
       \FIFO_g10_A[7] [7], \FIFO_g10_A[7] [6], \FIFO_g10_A[7] [5],
       \FIFO_g10_A[7] [4], \FIFO_g10_A[7] [3], \FIFO_g10_A[7] [2],
       \FIFO_g10_A[7] [1], \FIFO_g10_A[7] [0]}), .z (dout_g10_A));
  bmux_107 \mux_FIFO_g1_A[rd_ptr_A]_226_20 (.ctl ({n_762, n_761,
       n_760}), .in_0 ({\FIFO_g1_A[0] [11], \FIFO_g1_A[0] [10],
       \FIFO_g1_A[0] [9], \FIFO_g1_A[0] [8], \FIFO_g1_A[0] [7],
       \FIFO_g1_A[0] [6], \FIFO_g1_A[0] [5], \FIFO_g1_A[0] [4],
       \FIFO_g1_A[0] [3], \FIFO_g1_A[0] [2], \FIFO_g1_A[0] [1],
       \FIFO_g1_A[0] [0]}), .in_1 ({\FIFO_g1_A[1] [11],
       \FIFO_g1_A[1] [10], \FIFO_g1_A[1] [9], \FIFO_g1_A[1] [8],
       \FIFO_g1_A[1] [7], \FIFO_g1_A[1] [6], \FIFO_g1_A[1] [5],
       \FIFO_g1_A[1] [4], \FIFO_g1_A[1] [3], \FIFO_g1_A[1] [2],
       \FIFO_g1_A[1] [1], \FIFO_g1_A[1] [0]}), .in_2
       ({\FIFO_g1_A[2] [11], \FIFO_g1_A[2] [10], \FIFO_g1_A[2] [9],
       \FIFO_g1_A[2] [8], \FIFO_g1_A[2] [7], \FIFO_g1_A[2] [6],
       \FIFO_g1_A[2] [5], \FIFO_g1_A[2] [4], \FIFO_g1_A[2] [3],
       \FIFO_g1_A[2] [2], \FIFO_g1_A[2] [1], \FIFO_g1_A[2] [0]}), .in_3
       ({\FIFO_g1_A[3] [11], \FIFO_g1_A[3] [10], \FIFO_g1_A[3] [9],
       \FIFO_g1_A[3] [8], \FIFO_g1_A[3] [7], \FIFO_g1_A[3] [6],
       \FIFO_g1_A[3] [5], \FIFO_g1_A[3] [4], \FIFO_g1_A[3] [3],
       \FIFO_g1_A[3] [2], \FIFO_g1_A[3] [1], \FIFO_g1_A[3] [0]}), .in_4
       ({\FIFO_g1_A[4] [11], \FIFO_g1_A[4] [10], \FIFO_g1_A[4] [9],
       \FIFO_g1_A[4] [8], \FIFO_g1_A[4] [7], \FIFO_g1_A[4] [6],
       \FIFO_g1_A[4] [5], \FIFO_g1_A[4] [4], \FIFO_g1_A[4] [3],
       \FIFO_g1_A[4] [2], \FIFO_g1_A[4] [1], \FIFO_g1_A[4] [0]}), .in_5
       ({\FIFO_g1_A[5] [11], \FIFO_g1_A[5] [10], \FIFO_g1_A[5] [9],
       \FIFO_g1_A[5] [8], \FIFO_g1_A[5] [7], \FIFO_g1_A[5] [6],
       \FIFO_g1_A[5] [5], \FIFO_g1_A[5] [4], \FIFO_g1_A[5] [3],
       \FIFO_g1_A[5] [2], \FIFO_g1_A[5] [1], \FIFO_g1_A[5] [0]}), .in_6
       ({\FIFO_g1_A[6] [11], \FIFO_g1_A[6] [10], \FIFO_g1_A[6] [9],
       \FIFO_g1_A[6] [8], \FIFO_g1_A[6] [7], \FIFO_g1_A[6] [6],
       \FIFO_g1_A[6] [5], \FIFO_g1_A[6] [4], \FIFO_g1_A[6] [3],
       \FIFO_g1_A[6] [2], \FIFO_g1_A[6] [1], \FIFO_g1_A[6] [0]}), .in_7
       ({\FIFO_g1_A[7] [11], \FIFO_g1_A[7] [10], \FIFO_g1_A[7] [9],
       \FIFO_g1_A[7] [8], \FIFO_g1_A[7] [7], \FIFO_g1_A[7] [6],
       \FIFO_g1_A[7] [5], \FIFO_g1_A[7] [4], \FIFO_g1_A[7] [3],
       \FIFO_g1_A[7] [2], \FIFO_g1_A[7] [1], \FIFO_g1_A[7] [0]}), .z
       (dout_g1_A));
  bmux_169 mux_234_36(.ctl (n_766), .in_0 ({1'b1, dout_g1_A}), .in_1
       ({1'b0, dout_g10_A}), .z (DATA_to_enc_A));
  bmux_107 \mux_FIFO_g10_B[rd_ptr_B]_229_21 (.ctl ({n_753, n_752,
       n_751}), .in_0 ({\FIFO_g10_B[0] [11], \FIFO_g10_B[0] [10],
       \FIFO_g10_B[0] [9], \FIFO_g10_B[0] [8], \FIFO_g10_B[0] [7],
       \FIFO_g10_B[0] [6], \FIFO_g10_B[0] [5], \FIFO_g10_B[0] [4],
       \FIFO_g10_B[0] [3], \FIFO_g10_B[0] [2], \FIFO_g10_B[0] [1],
       \FIFO_g10_B[0] [0]}), .in_1 ({\FIFO_g10_B[1] [11],
       \FIFO_g10_B[1] [10], \FIFO_g10_B[1] [9], \FIFO_g10_B[1] [8],
       \FIFO_g10_B[1] [7], \FIFO_g10_B[1] [6], \FIFO_g10_B[1] [5],
       \FIFO_g10_B[1] [4], \FIFO_g10_B[1] [3], \FIFO_g10_B[1] [2],
       \FIFO_g10_B[1] [1], \FIFO_g10_B[1] [0]}), .in_2
       ({\FIFO_g10_B[2] [11], \FIFO_g10_B[2] [10], \FIFO_g10_B[2] [9],
       \FIFO_g10_B[2] [8], \FIFO_g10_B[2] [7], \FIFO_g10_B[2] [6],
       \FIFO_g10_B[2] [5], \FIFO_g10_B[2] [4], \FIFO_g10_B[2] [3],
       \FIFO_g10_B[2] [2], \FIFO_g10_B[2] [1], \FIFO_g10_B[2] [0]}),
       .in_3 ({\FIFO_g10_B[3] [11], \FIFO_g10_B[3] [10],
       \FIFO_g10_B[3] [9], \FIFO_g10_B[3] [8], \FIFO_g10_B[3] [7],
       \FIFO_g10_B[3] [6], \FIFO_g10_B[3] [5], \FIFO_g10_B[3] [4],
       \FIFO_g10_B[3] [3], \FIFO_g10_B[3] [2], \FIFO_g10_B[3] [1],
       \FIFO_g10_B[3] [0]}), .in_4 ({\FIFO_g10_B[4] [11],
       \FIFO_g10_B[4] [10], \FIFO_g10_B[4] [9], \FIFO_g10_B[4] [8],
       \FIFO_g10_B[4] [7], \FIFO_g10_B[4] [6], \FIFO_g10_B[4] [5],
       \FIFO_g10_B[4] [4], \FIFO_g10_B[4] [3], \FIFO_g10_B[4] [2],
       \FIFO_g10_B[4] [1], \FIFO_g10_B[4] [0]}), .in_5
       ({\FIFO_g10_B[5] [11], \FIFO_g10_B[5] [10], \FIFO_g10_B[5] [9],
       \FIFO_g10_B[5] [8], \FIFO_g10_B[5] [7], \FIFO_g10_B[5] [6],
       \FIFO_g10_B[5] [5], \FIFO_g10_B[5] [4], \FIFO_g10_B[5] [3],
       \FIFO_g10_B[5] [2], \FIFO_g10_B[5] [1], \FIFO_g10_B[5] [0]}),
       .in_6 ({\FIFO_g10_B[6] [11], \FIFO_g10_B[6] [10],
       \FIFO_g10_B[6] [9], \FIFO_g10_B[6] [8], \FIFO_g10_B[6] [7],
       \FIFO_g10_B[6] [6], \FIFO_g10_B[6] [5], \FIFO_g10_B[6] [4],
       \FIFO_g10_B[6] [3], \FIFO_g10_B[6] [2], \FIFO_g10_B[6] [1],
       \FIFO_g10_B[6] [0]}), .in_7 ({\FIFO_g10_B[7] [11],
       \FIFO_g10_B[7] [10], \FIFO_g10_B[7] [9], \FIFO_g10_B[7] [8],
       \FIFO_g10_B[7] [7], \FIFO_g10_B[7] [6], \FIFO_g10_B[7] [5],
       \FIFO_g10_B[7] [4], \FIFO_g10_B[7] [3], \FIFO_g10_B[7] [2],
       \FIFO_g10_B[7] [1], \FIFO_g10_B[7] [0]}), .z (dout_g10_B));
  bmux_107 \mux_FIFO_g1_B[rd_ptr_B]_228_20 (.ctl ({n_753, n_752,
       n_751}), .in_0 ({\FIFO_g1_B[0] [11], \FIFO_g1_B[0] [10],
       \FIFO_g1_B[0] [9], \FIFO_g1_B[0] [8], \FIFO_g1_B[0] [7],
       \FIFO_g1_B[0] [6], \FIFO_g1_B[0] [5], \FIFO_g1_B[0] [4],
       \FIFO_g1_B[0] [3], \FIFO_g1_B[0] [2], \FIFO_g1_B[0] [1],
       \FIFO_g1_B[0] [0]}), .in_1 ({\FIFO_g1_B[1] [11],
       \FIFO_g1_B[1] [10], \FIFO_g1_B[1] [9], \FIFO_g1_B[1] [8],
       \FIFO_g1_B[1] [7], \FIFO_g1_B[1] [6], \FIFO_g1_B[1] [5],
       \FIFO_g1_B[1] [4], \FIFO_g1_B[1] [3], \FIFO_g1_B[1] [2],
       \FIFO_g1_B[1] [1], \FIFO_g1_B[1] [0]}), .in_2
       ({\FIFO_g1_B[2] [11], \FIFO_g1_B[2] [10], \FIFO_g1_B[2] [9],
       \FIFO_g1_B[2] [8], \FIFO_g1_B[2] [7], \FIFO_g1_B[2] [6],
       \FIFO_g1_B[2] [5], \FIFO_g1_B[2] [4], \FIFO_g1_B[2] [3],
       \FIFO_g1_B[2] [2], \FIFO_g1_B[2] [1], \FIFO_g1_B[2] [0]}), .in_3
       ({\FIFO_g1_B[3] [11], \FIFO_g1_B[3] [10], \FIFO_g1_B[3] [9],
       \FIFO_g1_B[3] [8], \FIFO_g1_B[3] [7], \FIFO_g1_B[3] [6],
       \FIFO_g1_B[3] [5], \FIFO_g1_B[3] [4], \FIFO_g1_B[3] [3],
       \FIFO_g1_B[3] [2], \FIFO_g1_B[3] [1], \FIFO_g1_B[3] [0]}), .in_4
       ({\FIFO_g1_B[4] [11], \FIFO_g1_B[4] [10], \FIFO_g1_B[4] [9],
       \FIFO_g1_B[4] [8], \FIFO_g1_B[4] [7], \FIFO_g1_B[4] [6],
       \FIFO_g1_B[4] [5], \FIFO_g1_B[4] [4], \FIFO_g1_B[4] [3],
       \FIFO_g1_B[4] [2], \FIFO_g1_B[4] [1], \FIFO_g1_B[4] [0]}), .in_5
       ({\FIFO_g1_B[5] [11], \FIFO_g1_B[5] [10], \FIFO_g1_B[5] [9],
       \FIFO_g1_B[5] [8], \FIFO_g1_B[5] [7], \FIFO_g1_B[5] [6],
       \FIFO_g1_B[5] [5], \FIFO_g1_B[5] [4], \FIFO_g1_B[5] [3],
       \FIFO_g1_B[5] [2], \FIFO_g1_B[5] [1], \FIFO_g1_B[5] [0]}), .in_6
       ({\FIFO_g1_B[6] [11], \FIFO_g1_B[6] [10], \FIFO_g1_B[6] [9],
       \FIFO_g1_B[6] [8], \FIFO_g1_B[6] [7], \FIFO_g1_B[6] [6],
       \FIFO_g1_B[6] [5], \FIFO_g1_B[6] [4], \FIFO_g1_B[6] [3],
       \FIFO_g1_B[6] [2], \FIFO_g1_B[6] [1], \FIFO_g1_B[6] [0]}), .in_7
       ({\FIFO_g1_B[7] [11], \FIFO_g1_B[7] [10], \FIFO_g1_B[7] [9],
       \FIFO_g1_B[7] [8], \FIFO_g1_B[7] [7], \FIFO_g1_B[7] [6],
       \FIFO_g1_B[7] [5], \FIFO_g1_B[7] [4], \FIFO_g1_B[7] [3],
       \FIFO_g1_B[7] [2], \FIFO_g1_B[7] [1], \FIFO_g1_B[7] [0]}), .z
       (dout_g1_B));
  bmux_169 mux_235_36(.ctl (n_767), .in_0 ({1'b1, dout_g1_B}), .in_1
       ({1'b0, dout_g10_B}), .z (DATA_to_enc_B));
  bmux_107 \mux_FIFO_g10_C[rd_ptr_C]_231_21 (.ctl ({n_720, n_719,
       n_718}), .in_0 ({\FIFO_g10_C[0] [11], \FIFO_g10_C[0] [10],
       \FIFO_g10_C[0] [9], \FIFO_g10_C[0] [8], \FIFO_g10_C[0] [7],
       \FIFO_g10_C[0] [6], \FIFO_g10_C[0] [5], \FIFO_g10_C[0] [4],
       \FIFO_g10_C[0] [3], \FIFO_g10_C[0] [2], \FIFO_g10_C[0] [1],
       \FIFO_g10_C[0] [0]}), .in_1 ({\FIFO_g10_C[1] [11],
       \FIFO_g10_C[1] [10], \FIFO_g10_C[1] [9], \FIFO_g10_C[1] [8],
       \FIFO_g10_C[1] [7], \FIFO_g10_C[1] [6], \FIFO_g10_C[1] [5],
       \FIFO_g10_C[1] [4], \FIFO_g10_C[1] [3], \FIFO_g10_C[1] [2],
       \FIFO_g10_C[1] [1], \FIFO_g10_C[1] [0]}), .in_2
       ({\FIFO_g10_C[2] [11], \FIFO_g10_C[2] [10], \FIFO_g10_C[2] [9],
       \FIFO_g10_C[2] [8], \FIFO_g10_C[2] [7], \FIFO_g10_C[2] [6],
       \FIFO_g10_C[2] [5], \FIFO_g10_C[2] [4], \FIFO_g10_C[2] [3],
       \FIFO_g10_C[2] [2], \FIFO_g10_C[2] [1], \FIFO_g10_C[2] [0]}),
       .in_3 ({\FIFO_g10_C[3] [11], \FIFO_g10_C[3] [10],
       \FIFO_g10_C[3] [9], \FIFO_g10_C[3] [8], \FIFO_g10_C[3] [7],
       \FIFO_g10_C[3] [6], \FIFO_g10_C[3] [5], \FIFO_g10_C[3] [4],
       \FIFO_g10_C[3] [3], \FIFO_g10_C[3] [2], \FIFO_g10_C[3] [1],
       \FIFO_g10_C[3] [0]}), .in_4 ({\FIFO_g10_C[4] [11],
       \FIFO_g10_C[4] [10], \FIFO_g10_C[4] [9], \FIFO_g10_C[4] [8],
       \FIFO_g10_C[4] [7], \FIFO_g10_C[4] [6], \FIFO_g10_C[4] [5],
       \FIFO_g10_C[4] [4], \FIFO_g10_C[4] [3], \FIFO_g10_C[4] [2],
       \FIFO_g10_C[4] [1], \FIFO_g10_C[4] [0]}), .in_5
       ({\FIFO_g10_C[5] [11], \FIFO_g10_C[5] [10], \FIFO_g10_C[5] [9],
       \FIFO_g10_C[5] [8], \FIFO_g10_C[5] [7], \FIFO_g10_C[5] [6],
       \FIFO_g10_C[5] [5], \FIFO_g10_C[5] [4], \FIFO_g10_C[5] [3],
       \FIFO_g10_C[5] [2], \FIFO_g10_C[5] [1], \FIFO_g10_C[5] [0]}),
       .in_6 ({\FIFO_g10_C[6] [11], \FIFO_g10_C[6] [10],
       \FIFO_g10_C[6] [9], \FIFO_g10_C[6] [8], \FIFO_g10_C[6] [7],
       \FIFO_g10_C[6] [6], \FIFO_g10_C[6] [5], \FIFO_g10_C[6] [4],
       \FIFO_g10_C[6] [3], \FIFO_g10_C[6] [2], \FIFO_g10_C[6] [1],
       \FIFO_g10_C[6] [0]}), .in_7 ({\FIFO_g10_C[7] [11],
       \FIFO_g10_C[7] [10], \FIFO_g10_C[7] [9], \FIFO_g10_C[7] [8],
       \FIFO_g10_C[7] [7], \FIFO_g10_C[7] [6], \FIFO_g10_C[7] [5],
       \FIFO_g10_C[7] [4], \FIFO_g10_C[7] [3], \FIFO_g10_C[7] [2],
       \FIFO_g10_C[7] [1], \FIFO_g10_C[7] [0]}), .z (dout_g10_C));
  bmux_107 \mux_FIFO_g1_C[rd_ptr_C]_230_20 (.ctl ({n_720, n_719,
       n_718}), .in_0 ({\FIFO_g1_C[0] [11], \FIFO_g1_C[0] [10],
       \FIFO_g1_C[0] [9], \FIFO_g1_C[0] [8], \FIFO_g1_C[0] [7],
       \FIFO_g1_C[0] [6], \FIFO_g1_C[0] [5], \FIFO_g1_C[0] [4],
       \FIFO_g1_C[0] [3], \FIFO_g1_C[0] [2], \FIFO_g1_C[0] [1],
       \FIFO_g1_C[0] [0]}), .in_1 ({\FIFO_g1_C[1] [11],
       \FIFO_g1_C[1] [10], \FIFO_g1_C[1] [9], \FIFO_g1_C[1] [8],
       \FIFO_g1_C[1] [7], \FIFO_g1_C[1] [6], \FIFO_g1_C[1] [5],
       \FIFO_g1_C[1] [4], \FIFO_g1_C[1] [3], \FIFO_g1_C[1] [2],
       \FIFO_g1_C[1] [1], \FIFO_g1_C[1] [0]}), .in_2
       ({\FIFO_g1_C[2] [11], \FIFO_g1_C[2] [10], \FIFO_g1_C[2] [9],
       \FIFO_g1_C[2] [8], \FIFO_g1_C[2] [7], \FIFO_g1_C[2] [6],
       \FIFO_g1_C[2] [5], \FIFO_g1_C[2] [4], \FIFO_g1_C[2] [3],
       \FIFO_g1_C[2] [2], \FIFO_g1_C[2] [1], \FIFO_g1_C[2] [0]}), .in_3
       ({\FIFO_g1_C[3] [11], \FIFO_g1_C[3] [10], \FIFO_g1_C[3] [9],
       \FIFO_g1_C[3] [8], \FIFO_g1_C[3] [7], \FIFO_g1_C[3] [6],
       \FIFO_g1_C[3] [5], \FIFO_g1_C[3] [4], \FIFO_g1_C[3] [3],
       \FIFO_g1_C[3] [2], \FIFO_g1_C[3] [1], \FIFO_g1_C[3] [0]}), .in_4
       ({\FIFO_g1_C[4] [11], \FIFO_g1_C[4] [10], \FIFO_g1_C[4] [9],
       \FIFO_g1_C[4] [8], \FIFO_g1_C[4] [7], \FIFO_g1_C[4] [6],
       \FIFO_g1_C[4] [5], \FIFO_g1_C[4] [4], \FIFO_g1_C[4] [3],
       \FIFO_g1_C[4] [2], \FIFO_g1_C[4] [1], \FIFO_g1_C[4] [0]}), .in_5
       ({\FIFO_g1_C[5] [11], \FIFO_g1_C[5] [10], \FIFO_g1_C[5] [9],
       \FIFO_g1_C[5] [8], \FIFO_g1_C[5] [7], \FIFO_g1_C[5] [6],
       \FIFO_g1_C[5] [5], \FIFO_g1_C[5] [4], \FIFO_g1_C[5] [3],
       \FIFO_g1_C[5] [2], \FIFO_g1_C[5] [1], \FIFO_g1_C[5] [0]}), .in_6
       ({\FIFO_g1_C[6] [11], \FIFO_g1_C[6] [10], \FIFO_g1_C[6] [9],
       \FIFO_g1_C[6] [8], \FIFO_g1_C[6] [7], \FIFO_g1_C[6] [6],
       \FIFO_g1_C[6] [5], \FIFO_g1_C[6] [4], \FIFO_g1_C[6] [3],
       \FIFO_g1_C[6] [2], \FIFO_g1_C[6] [1], \FIFO_g1_C[6] [0]}), .in_7
       ({\FIFO_g1_C[7] [11], \FIFO_g1_C[7] [10], \FIFO_g1_C[7] [9],
       \FIFO_g1_C[7] [8], \FIFO_g1_C[7] [7], \FIFO_g1_C[7] [6],
       \FIFO_g1_C[7] [5], \FIFO_g1_C[7] [4], \FIFO_g1_C[7] [3],
       \FIFO_g1_C[7] [2], \FIFO_g1_C[7] [1], \FIFO_g1_C[7] [0]}), .z
       (dout_g1_C));
  bmux_169 mux_236_36(.ctl (n_768), .in_0 ({1'b1, dout_g1_C}), .in_1
       ({1'b0, dout_g10_C}), .z (DATA_to_enc_C));
  bmux mux_243_42(.ctl (n_770), .in_0 (1'b0), .in_1 (1'b1), .z
       (bas_flag_A));
  bmux mux_246_40(.ctl (n_771), .in_0 (1'b0), .in_1 (1'b1), .z
       (b_flag_A));
  bmux mux_250_73(.ctl (n_769), .in_0 (b_flag_A), .in_1 (bas_flag_A),
       .z (n_772));
  bmux mux_250_35(.ctl (n_757), .in_0 (n_772), .in_1 (1'b1), .z
       (baseline_flag_A));
  bmux mux_244_42(.ctl (n_774), .in_0 (1'b0), .in_1 (1'b1), .z
       (bas_flag_B));
  bmux mux_247_40(.ctl (n_775), .in_0 (1'b0), .in_1 (1'b1), .z
       (b_flag_B));
  bmux mux_251_73(.ctl (n_773), .in_0 (b_flag_B), .in_1 (bas_flag_B),
       .z (n_776));
  bmux mux_251_35(.ctl (n_748), .in_0 (n_776), .in_1 (1'b1), .z
       (baseline_flag_B));
  bmux mux_245_42(.ctl (n_778), .in_0 (1'b0), .in_1 (1'b1), .z
       (bas_flag_C));
  bmux mux_248_40(.ctl (n_779), .in_0 (1'b0), .in_1 (1'b1), .z
       (b_flag_C));
  bmux mux_252_73(.ctl (n_777), .in_0 (b_flag_C), .in_1 (bas_flag_C),
       .z (n_780));
  bmux mux_252_35(.ctl (n_715), .in_0 (n_780), .in_1 (1'b1), .z
       (baseline_flag_C));
  or g58 (tmrError, DATA_to_encTmrError, baseline_flagTmrError);
  and g83 (n_835, n_758, reset_A);
  and g84 (n_837, n_749, reset_B);
  and g85 (n_839, n_716, reset_C);
  CDN_flop \SATval_A_reg[0] (.clk (CLK_A), .d (SATURATION_value[0]),
       .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b1), .q (SATval_A[0]));
  CDN_flop \SATval_A_reg[1] (.clk (CLK_A), .d (SATURATION_value[1]),
       .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b1), .q (SATval_A[1]));
  CDN_flop \SATval_A_reg[2] (.clk (CLK_A), .d (SATURATION_value[2]),
       .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b1), .q (SATval_A[2]));
  CDN_flop \SATval_A_reg[3] (.clk (CLK_A), .d (SATURATION_value[3]),
       .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b1), .q (SATval_A[3]));
  CDN_flop \SATval_A_reg[4] (.clk (CLK_A), .d (SATURATION_value[4]),
       .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b1), .q (SATval_A[4]));
  CDN_flop \SATval_A_reg[5] (.clk (CLK_A), .d (SATURATION_value[5]),
       .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b1), .q (SATval_A[5]));
  CDN_flop \SATval_A_reg[6] (.clk (CLK_A), .d (SATURATION_value[6]),
       .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b1), .q (SATval_A[6]));
  CDN_flop \SATval_A_reg[7] (.clk (CLK_A), .d (SATURATION_value[7]),
       .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b1), .q (SATval_A[7]));
  CDN_flop \SATval_A_reg[8] (.clk (CLK_A), .d (SATURATION_value[8]),
       .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b1), .q (SATval_A[8]));
  CDN_flop \SATval_A_reg[9] (.clk (CLK_A), .d (SATURATION_value[9]),
       .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b1), .q (SATval_A[9]));
  CDN_flop \SATval_A_reg[10] (.clk (CLK_A), .d (SATURATION_value[10]),
       .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b1), .q (SATval_A[10]));
  CDN_flop \SATval_A_reg[11] (.clk (CLK_A), .d (SATURATION_value[11]),
       .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b1), .q (SATval_A[11]));
  CDN_flop \SATval_B_reg[0] (.clk (CLK_B), .d (SATURATION_value[0]),
       .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b1), .q (SATval_B[0]));
  CDN_flop \SATval_B_reg[1] (.clk (CLK_B), .d (SATURATION_value[1]),
       .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b1), .q (SATval_B[1]));
  CDN_flop \SATval_B_reg[2] (.clk (CLK_B), .d (SATURATION_value[2]),
       .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b1), .q (SATval_B[2]));
  CDN_flop \SATval_B_reg[3] (.clk (CLK_B), .d (SATURATION_value[3]),
       .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b1), .q (SATval_B[3]));
  CDN_flop \SATval_B_reg[4] (.clk (CLK_B), .d (SATURATION_value[4]),
       .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b1), .q (SATval_B[4]));
  CDN_flop \SATval_B_reg[5] (.clk (CLK_B), .d (SATURATION_value[5]),
       .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b1), .q (SATval_B[5]));
  CDN_flop \SATval_B_reg[6] (.clk (CLK_B), .d (SATURATION_value[6]),
       .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b1), .q (SATval_B[6]));
  CDN_flop \SATval_B_reg[7] (.clk (CLK_B), .d (SATURATION_value[7]),
       .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b1), .q (SATval_B[7]));
  CDN_flop \SATval_B_reg[8] (.clk (CLK_B), .d (SATURATION_value[8]),
       .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b1), .q (SATval_B[8]));
  CDN_flop \SATval_B_reg[9] (.clk (CLK_B), .d (SATURATION_value[9]),
       .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b1), .q (SATval_B[9]));
  CDN_flop \SATval_B_reg[10] (.clk (CLK_B), .d (SATURATION_value[10]),
       .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b1), .q (SATval_B[10]));
  CDN_flop \SATval_B_reg[11] (.clk (CLK_B), .d (SATURATION_value[11]),
       .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b1), .q (SATval_B[11]));
  CDN_flop \SATval_C_reg[0] (.clk (CLK_C), .d (SATURATION_value[0]),
       .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b1), .q (SATval_C[0]));
  CDN_flop \SATval_C_reg[1] (.clk (CLK_C), .d (SATURATION_value[1]),
       .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b1), .q (SATval_C[1]));
  CDN_flop \SATval_C_reg[2] (.clk (CLK_C), .d (SATURATION_value[2]),
       .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b1), .q (SATval_C[2]));
  CDN_flop \SATval_C_reg[3] (.clk (CLK_C), .d (SATURATION_value[3]),
       .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b1), .q (SATval_C[3]));
  CDN_flop \SATval_C_reg[4] (.clk (CLK_C), .d (SATURATION_value[4]),
       .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b1), .q (SATval_C[4]));
  CDN_flop \SATval_C_reg[5] (.clk (CLK_C), .d (SATURATION_value[5]),
       .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b1), .q (SATval_C[5]));
  CDN_flop \SATval_C_reg[6] (.clk (CLK_C), .d (SATURATION_value[6]),
       .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b1), .q (SATval_C[6]));
  CDN_flop \SATval_C_reg[7] (.clk (CLK_C), .d (SATURATION_value[7]),
       .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b1), .q (SATval_C[7]));
  CDN_flop \SATval_C_reg[8] (.clk (CLK_C), .d (SATURATION_value[8]),
       .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b1), .q (SATval_C[8]));
  CDN_flop \SATval_C_reg[9] (.clk (CLK_C), .d (SATURATION_value[9]),
       .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b1), .q (SATval_C[9]));
  CDN_flop \SATval_C_reg[10] (.clk (CLK_C), .d (SATURATION_value[10]),
       .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b1), .q (SATval_C[10]));
  CDN_flop \SATval_C_reg[11] (.clk (CLK_C), .d (SATURATION_value[11]),
       .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b1), .q (SATval_C[11]));
  CDN_flop \wr_ptr_A_reg[0] (.clk (CLK_A), .d (n_760), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd (1'b0), .q
       (wr_ptr_A[0]));
  CDN_flop \wr_ptr_A_reg[1] (.clk (CLK_A), .d (n_761), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd (1'b0), .q
       (wr_ptr_A[1]));
  CDN_flop \wr_ptr_A_reg[2] (.clk (CLK_A), .d (n_762), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd (1'b0), .q
       (wr_ptr_A[2]));
  CDN_flop \wr_ptr_B_reg[0] (.clk (CLK_B), .d (n_751), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd (1'b0), .q
       (wr_ptr_B[0]));
  CDN_flop \wr_ptr_B_reg[1] (.clk (CLK_B), .d (n_752), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd (1'b0), .q
       (wr_ptr_B[1]));
  CDN_flop \wr_ptr_B_reg[2] (.clk (CLK_B), .d (n_753), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd (1'b0), .q
       (wr_ptr_B[2]));
  CDN_flop \wr_ptr_C_reg[0] (.clk (CLK_C), .d (n_718), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd (1'b0), .q
       (wr_ptr_C[0]));
  CDN_flop \wr_ptr_C_reg[1] (.clk (CLK_C), .d (n_719), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd (1'b0), .q
       (wr_ptr_C[1]));
  CDN_flop \wr_ptr_C_reg[2] (.clk (CLK_C), .d (n_720), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd (1'b0), .q
       (wr_ptr_C[2]));
  CDN_flop \FIFO_g1_A_reg[0][0] (.clk (CLK_A), .d (DATA_gain_01[0]),
       .sena (n_786), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[0] [0]));
  CDN_flop \FIFO_g1_A_reg[0][1] (.clk (CLK_A), .d (DATA_gain_01[1]),
       .sena (n_786), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[0] [1]));
  CDN_flop \FIFO_g1_A_reg[0][2] (.clk (CLK_A), .d (DATA_gain_01[2]),
       .sena (n_786), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[0] [2]));
  CDN_flop \FIFO_g1_A_reg[0][3] (.clk (CLK_A), .d (DATA_gain_01[3]),
       .sena (n_786), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[0] [3]));
  CDN_flop \FIFO_g1_A_reg[0][4] (.clk (CLK_A), .d (DATA_gain_01[4]),
       .sena (n_786), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[0] [4]));
  CDN_flop \FIFO_g1_A_reg[0][5] (.clk (CLK_A), .d (DATA_gain_01[5]),
       .sena (n_786), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[0] [5]));
  CDN_flop \FIFO_g1_A_reg[0][6] (.clk (CLK_A), .d (DATA_gain_01[6]),
       .sena (n_786), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[0] [6]));
  CDN_flop \FIFO_g1_A_reg[0][7] (.clk (CLK_A), .d (DATA_gain_01[7]),
       .sena (n_786), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[0] [7]));
  CDN_flop \FIFO_g1_A_reg[0][8] (.clk (CLK_A), .d (DATA_gain_01[8]),
       .sena (n_786), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[0] [8]));
  CDN_flop \FIFO_g1_A_reg[0][9] (.clk (CLK_A), .d (DATA_gain_01[9]),
       .sena (n_786), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[0] [9]));
  CDN_flop \FIFO_g1_A_reg[0][10] (.clk (CLK_A), .d (DATA_gain_01[10]),
       .sena (n_786), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[0] [10]));
  CDN_flop \FIFO_g1_A_reg[0][11] (.clk (CLK_A), .d (DATA_gain_01[11]),
       .sena (n_786), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[0] [11]));
  CDN_flop \FIFO_g1_A_reg[1][0] (.clk (CLK_A), .d (DATA_gain_01[0]),
       .sena (n_787), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[1] [0]));
  CDN_flop \FIFO_g1_A_reg[1][1] (.clk (CLK_A), .d (DATA_gain_01[1]),
       .sena (n_787), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[1] [1]));
  CDN_flop \FIFO_g1_A_reg[1][2] (.clk (CLK_A), .d (DATA_gain_01[2]),
       .sena (n_787), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[1] [2]));
  CDN_flop \FIFO_g1_A_reg[1][3] (.clk (CLK_A), .d (DATA_gain_01[3]),
       .sena (n_787), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[1] [3]));
  CDN_flop \FIFO_g1_A_reg[1][4] (.clk (CLK_A), .d (DATA_gain_01[4]),
       .sena (n_787), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[1] [4]));
  CDN_flop \FIFO_g1_A_reg[1][5] (.clk (CLK_A), .d (DATA_gain_01[5]),
       .sena (n_787), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[1] [5]));
  CDN_flop \FIFO_g1_A_reg[1][6] (.clk (CLK_A), .d (DATA_gain_01[6]),
       .sena (n_787), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[1] [6]));
  CDN_flop \FIFO_g1_A_reg[1][7] (.clk (CLK_A), .d (DATA_gain_01[7]),
       .sena (n_787), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[1] [7]));
  CDN_flop \FIFO_g1_A_reg[1][8] (.clk (CLK_A), .d (DATA_gain_01[8]),
       .sena (n_787), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[1] [8]));
  CDN_flop \FIFO_g1_A_reg[1][9] (.clk (CLK_A), .d (DATA_gain_01[9]),
       .sena (n_787), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[1] [9]));
  CDN_flop \FIFO_g1_A_reg[1][10] (.clk (CLK_A), .d (DATA_gain_01[10]),
       .sena (n_787), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[1] [10]));
  CDN_flop \FIFO_g1_A_reg[1][11] (.clk (CLK_A), .d (DATA_gain_01[11]),
       .sena (n_787), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[1] [11]));
  CDN_flop \FIFO_g1_A_reg[2][0] (.clk (CLK_A), .d (DATA_gain_01[0]),
       .sena (n_788), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[2] [0]));
  CDN_flop \FIFO_g1_A_reg[2][1] (.clk (CLK_A), .d (DATA_gain_01[1]),
       .sena (n_788), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[2] [1]));
  CDN_flop \FIFO_g1_A_reg[2][2] (.clk (CLK_A), .d (DATA_gain_01[2]),
       .sena (n_788), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[2] [2]));
  CDN_flop \FIFO_g1_A_reg[2][3] (.clk (CLK_A), .d (DATA_gain_01[3]),
       .sena (n_788), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[2] [3]));
  CDN_flop \FIFO_g1_A_reg[2][4] (.clk (CLK_A), .d (DATA_gain_01[4]),
       .sena (n_788), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[2] [4]));
  CDN_flop \FIFO_g1_A_reg[2][5] (.clk (CLK_A), .d (DATA_gain_01[5]),
       .sena (n_788), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[2] [5]));
  CDN_flop \FIFO_g1_A_reg[2][6] (.clk (CLK_A), .d (DATA_gain_01[6]),
       .sena (n_788), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[2] [6]));
  CDN_flop \FIFO_g1_A_reg[2][7] (.clk (CLK_A), .d (DATA_gain_01[7]),
       .sena (n_788), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[2] [7]));
  CDN_flop \FIFO_g1_A_reg[2][8] (.clk (CLK_A), .d (DATA_gain_01[8]),
       .sena (n_788), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[2] [8]));
  CDN_flop \FIFO_g1_A_reg[2][9] (.clk (CLK_A), .d (DATA_gain_01[9]),
       .sena (n_788), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[2] [9]));
  CDN_flop \FIFO_g1_A_reg[2][10] (.clk (CLK_A), .d (DATA_gain_01[10]),
       .sena (n_788), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[2] [10]));
  CDN_flop \FIFO_g1_A_reg[2][11] (.clk (CLK_A), .d (DATA_gain_01[11]),
       .sena (n_788), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[2] [11]));
  CDN_flop \FIFO_g1_A_reg[3][0] (.clk (CLK_A), .d (DATA_gain_01[0]),
       .sena (n_789), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[3] [0]));
  CDN_flop \FIFO_g1_A_reg[3][1] (.clk (CLK_A), .d (DATA_gain_01[1]),
       .sena (n_789), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[3] [1]));
  CDN_flop \FIFO_g1_A_reg[3][2] (.clk (CLK_A), .d (DATA_gain_01[2]),
       .sena (n_789), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[3] [2]));
  CDN_flop \FIFO_g1_A_reg[3][3] (.clk (CLK_A), .d (DATA_gain_01[3]),
       .sena (n_789), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[3] [3]));
  CDN_flop \FIFO_g1_A_reg[3][4] (.clk (CLK_A), .d (DATA_gain_01[4]),
       .sena (n_789), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[3] [4]));
  CDN_flop \FIFO_g1_A_reg[3][5] (.clk (CLK_A), .d (DATA_gain_01[5]),
       .sena (n_789), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[3] [5]));
  CDN_flop \FIFO_g1_A_reg[3][6] (.clk (CLK_A), .d (DATA_gain_01[6]),
       .sena (n_789), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[3] [6]));
  CDN_flop \FIFO_g1_A_reg[3][7] (.clk (CLK_A), .d (DATA_gain_01[7]),
       .sena (n_789), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[3] [7]));
  CDN_flop \FIFO_g1_A_reg[3][8] (.clk (CLK_A), .d (DATA_gain_01[8]),
       .sena (n_789), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[3] [8]));
  CDN_flop \FIFO_g1_A_reg[3][9] (.clk (CLK_A), .d (DATA_gain_01[9]),
       .sena (n_789), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[3] [9]));
  CDN_flop \FIFO_g1_A_reg[3][10] (.clk (CLK_A), .d (DATA_gain_01[10]),
       .sena (n_789), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[3] [10]));
  CDN_flop \FIFO_g1_A_reg[3][11] (.clk (CLK_A), .d (DATA_gain_01[11]),
       .sena (n_789), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[3] [11]));
  CDN_flop \FIFO_g1_A_reg[4][0] (.clk (CLK_A), .d (DATA_gain_01[0]),
       .sena (n_790), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[4] [0]));
  CDN_flop \FIFO_g1_A_reg[4][1] (.clk (CLK_A), .d (DATA_gain_01[1]),
       .sena (n_790), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[4] [1]));
  CDN_flop \FIFO_g1_A_reg[4][2] (.clk (CLK_A), .d (DATA_gain_01[2]),
       .sena (n_790), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[4] [2]));
  CDN_flop \FIFO_g1_A_reg[4][3] (.clk (CLK_A), .d (DATA_gain_01[3]),
       .sena (n_790), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[4] [3]));
  CDN_flop \FIFO_g1_A_reg[4][4] (.clk (CLK_A), .d (DATA_gain_01[4]),
       .sena (n_790), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[4] [4]));
  CDN_flop \FIFO_g1_A_reg[4][5] (.clk (CLK_A), .d (DATA_gain_01[5]),
       .sena (n_790), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[4] [5]));
  CDN_flop \FIFO_g1_A_reg[4][6] (.clk (CLK_A), .d (DATA_gain_01[6]),
       .sena (n_790), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[4] [6]));
  CDN_flop \FIFO_g1_A_reg[4][7] (.clk (CLK_A), .d (DATA_gain_01[7]),
       .sena (n_790), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[4] [7]));
  CDN_flop \FIFO_g1_A_reg[4][8] (.clk (CLK_A), .d (DATA_gain_01[8]),
       .sena (n_790), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[4] [8]));
  CDN_flop \FIFO_g1_A_reg[4][9] (.clk (CLK_A), .d (DATA_gain_01[9]),
       .sena (n_790), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[4] [9]));
  CDN_flop \FIFO_g1_A_reg[4][10] (.clk (CLK_A), .d (DATA_gain_01[10]),
       .sena (n_790), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[4] [10]));
  CDN_flop \FIFO_g1_A_reg[4][11] (.clk (CLK_A), .d (DATA_gain_01[11]),
       .sena (n_790), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[4] [11]));
  CDN_flop \FIFO_g1_A_reg[5][0] (.clk (CLK_A), .d (DATA_gain_01[0]),
       .sena (n_791), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[5] [0]));
  CDN_flop \FIFO_g1_A_reg[5][1] (.clk (CLK_A), .d (DATA_gain_01[1]),
       .sena (n_791), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[5] [1]));
  CDN_flop \FIFO_g1_A_reg[5][2] (.clk (CLK_A), .d (DATA_gain_01[2]),
       .sena (n_791), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[5] [2]));
  CDN_flop \FIFO_g1_A_reg[5][3] (.clk (CLK_A), .d (DATA_gain_01[3]),
       .sena (n_791), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[5] [3]));
  CDN_flop \FIFO_g1_A_reg[5][4] (.clk (CLK_A), .d (DATA_gain_01[4]),
       .sena (n_791), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[5] [4]));
  CDN_flop \FIFO_g1_A_reg[5][5] (.clk (CLK_A), .d (DATA_gain_01[5]),
       .sena (n_791), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[5] [5]));
  CDN_flop \FIFO_g1_A_reg[5][6] (.clk (CLK_A), .d (DATA_gain_01[6]),
       .sena (n_791), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[5] [6]));
  CDN_flop \FIFO_g1_A_reg[5][7] (.clk (CLK_A), .d (DATA_gain_01[7]),
       .sena (n_791), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[5] [7]));
  CDN_flop \FIFO_g1_A_reg[5][8] (.clk (CLK_A), .d (DATA_gain_01[8]),
       .sena (n_791), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[5] [8]));
  CDN_flop \FIFO_g1_A_reg[5][9] (.clk (CLK_A), .d (DATA_gain_01[9]),
       .sena (n_791), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[5] [9]));
  CDN_flop \FIFO_g1_A_reg[5][10] (.clk (CLK_A), .d (DATA_gain_01[10]),
       .sena (n_791), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[5] [10]));
  CDN_flop \FIFO_g1_A_reg[5][11] (.clk (CLK_A), .d (DATA_gain_01[11]),
       .sena (n_791), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[5] [11]));
  CDN_flop \FIFO_g1_A_reg[6][0] (.clk (CLK_A), .d (DATA_gain_01[0]),
       .sena (n_792), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[6] [0]));
  CDN_flop \FIFO_g1_A_reg[6][1] (.clk (CLK_A), .d (DATA_gain_01[1]),
       .sena (n_792), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[6] [1]));
  CDN_flop \FIFO_g1_A_reg[6][2] (.clk (CLK_A), .d (DATA_gain_01[2]),
       .sena (n_792), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[6] [2]));
  CDN_flop \FIFO_g1_A_reg[6][3] (.clk (CLK_A), .d (DATA_gain_01[3]),
       .sena (n_792), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[6] [3]));
  CDN_flop \FIFO_g1_A_reg[6][4] (.clk (CLK_A), .d (DATA_gain_01[4]),
       .sena (n_792), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[6] [4]));
  CDN_flop \FIFO_g1_A_reg[6][5] (.clk (CLK_A), .d (DATA_gain_01[5]),
       .sena (n_792), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[6] [5]));
  CDN_flop \FIFO_g1_A_reg[6][6] (.clk (CLK_A), .d (DATA_gain_01[6]),
       .sena (n_792), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[6] [6]));
  CDN_flop \FIFO_g1_A_reg[6][7] (.clk (CLK_A), .d (DATA_gain_01[7]),
       .sena (n_792), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[6] [7]));
  CDN_flop \FIFO_g1_A_reg[6][8] (.clk (CLK_A), .d (DATA_gain_01[8]),
       .sena (n_792), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[6] [8]));
  CDN_flop \FIFO_g1_A_reg[6][9] (.clk (CLK_A), .d (DATA_gain_01[9]),
       .sena (n_792), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[6] [9]));
  CDN_flop \FIFO_g1_A_reg[6][10] (.clk (CLK_A), .d (DATA_gain_01[10]),
       .sena (n_792), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[6] [10]));
  CDN_flop \FIFO_g1_A_reg[6][11] (.clk (CLK_A), .d (DATA_gain_01[11]),
       .sena (n_792), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[6] [11]));
  CDN_flop \FIFO_g1_A_reg[7][0] (.clk (CLK_A), .d (DATA_gain_01[0]),
       .sena (n_793), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[7] [0]));
  CDN_flop \FIFO_g1_A_reg[7][1] (.clk (CLK_A), .d (DATA_gain_01[1]),
       .sena (n_793), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[7] [1]));
  CDN_flop \FIFO_g1_A_reg[7][2] (.clk (CLK_A), .d (DATA_gain_01[2]),
       .sena (n_793), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[7] [2]));
  CDN_flop \FIFO_g1_A_reg[7][3] (.clk (CLK_A), .d (DATA_gain_01[3]),
       .sena (n_793), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[7] [3]));
  CDN_flop \FIFO_g1_A_reg[7][4] (.clk (CLK_A), .d (DATA_gain_01[4]),
       .sena (n_793), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[7] [4]));
  CDN_flop \FIFO_g1_A_reg[7][5] (.clk (CLK_A), .d (DATA_gain_01[5]),
       .sena (n_793), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[7] [5]));
  CDN_flop \FIFO_g1_A_reg[7][6] (.clk (CLK_A), .d (DATA_gain_01[6]),
       .sena (n_793), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[7] [6]));
  CDN_flop \FIFO_g1_A_reg[7][7] (.clk (CLK_A), .d (DATA_gain_01[7]),
       .sena (n_793), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[7] [7]));
  CDN_flop \FIFO_g1_A_reg[7][8] (.clk (CLK_A), .d (DATA_gain_01[8]),
       .sena (n_793), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[7] [8]));
  CDN_flop \FIFO_g1_A_reg[7][9] (.clk (CLK_A), .d (DATA_gain_01[9]),
       .sena (n_793), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[7] [9]));
  CDN_flop \FIFO_g1_A_reg[7][10] (.clk (CLK_A), .d (DATA_gain_01[10]),
       .sena (n_793), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[7] [10]));
  CDN_flop \FIFO_g1_A_reg[7][11] (.clk (CLK_A), .d (DATA_gain_01[11]),
       .sena (n_793), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g1_A[7] [11]));
  CDN_flop \FIFO_g10_A_reg[0][0] (.clk (CLK_A), .d (DATA_gain_10[0]),
       .sena (n_786), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[0] [0]));
  CDN_flop \FIFO_g10_A_reg[0][1] (.clk (CLK_A), .d (DATA_gain_10[1]),
       .sena (n_786), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[0] [1]));
  CDN_flop \FIFO_g10_A_reg[0][2] (.clk (CLK_A), .d (DATA_gain_10[2]),
       .sena (n_786), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[0] [2]));
  CDN_flop \FIFO_g10_A_reg[0][3] (.clk (CLK_A), .d (DATA_gain_10[3]),
       .sena (n_786), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[0] [3]));
  CDN_flop \FIFO_g10_A_reg[0][4] (.clk (CLK_A), .d (DATA_gain_10[4]),
       .sena (n_786), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[0] [4]));
  CDN_flop \FIFO_g10_A_reg[0][5] (.clk (CLK_A), .d (DATA_gain_10[5]),
       .sena (n_786), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[0] [5]));
  CDN_flop \FIFO_g10_A_reg[0][6] (.clk (CLK_A), .d (DATA_gain_10[6]),
       .sena (n_786), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[0] [6]));
  CDN_flop \FIFO_g10_A_reg[0][7] (.clk (CLK_A), .d (DATA_gain_10[7]),
       .sena (n_786), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[0] [7]));
  CDN_flop \FIFO_g10_A_reg[0][8] (.clk (CLK_A), .d (DATA_gain_10[8]),
       .sena (n_786), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[0] [8]));
  CDN_flop \FIFO_g10_A_reg[0][9] (.clk (CLK_A), .d (DATA_gain_10[9]),
       .sena (n_786), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[0] [9]));
  CDN_flop \FIFO_g10_A_reg[0][10] (.clk (CLK_A), .d (DATA_gain_10[10]),
       .sena (n_786), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[0] [10]));
  CDN_flop \FIFO_g10_A_reg[0][11] (.clk (CLK_A), .d (DATA_gain_10[11]),
       .sena (n_786), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[0] [11]));
  CDN_flop \FIFO_g10_A_reg[1][0] (.clk (CLK_A), .d (DATA_gain_10[0]),
       .sena (n_787), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[1] [0]));
  CDN_flop \FIFO_g10_A_reg[1][1] (.clk (CLK_A), .d (DATA_gain_10[1]),
       .sena (n_787), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[1] [1]));
  CDN_flop \FIFO_g10_A_reg[1][2] (.clk (CLK_A), .d (DATA_gain_10[2]),
       .sena (n_787), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[1] [2]));
  CDN_flop \FIFO_g10_A_reg[1][3] (.clk (CLK_A), .d (DATA_gain_10[3]),
       .sena (n_787), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[1] [3]));
  CDN_flop \FIFO_g10_A_reg[1][4] (.clk (CLK_A), .d (DATA_gain_10[4]),
       .sena (n_787), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[1] [4]));
  CDN_flop \FIFO_g10_A_reg[1][5] (.clk (CLK_A), .d (DATA_gain_10[5]),
       .sena (n_787), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[1] [5]));
  CDN_flop \FIFO_g10_A_reg[1][6] (.clk (CLK_A), .d (DATA_gain_10[6]),
       .sena (n_787), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[1] [6]));
  CDN_flop \FIFO_g10_A_reg[1][7] (.clk (CLK_A), .d (DATA_gain_10[7]),
       .sena (n_787), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[1] [7]));
  CDN_flop \FIFO_g10_A_reg[1][8] (.clk (CLK_A), .d (DATA_gain_10[8]),
       .sena (n_787), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[1] [8]));
  CDN_flop \FIFO_g10_A_reg[1][9] (.clk (CLK_A), .d (DATA_gain_10[9]),
       .sena (n_787), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[1] [9]));
  CDN_flop \FIFO_g10_A_reg[1][10] (.clk (CLK_A), .d (DATA_gain_10[10]),
       .sena (n_787), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[1] [10]));
  CDN_flop \FIFO_g10_A_reg[1][11] (.clk (CLK_A), .d (DATA_gain_10[11]),
       .sena (n_787), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[1] [11]));
  CDN_flop \FIFO_g10_A_reg[2][0] (.clk (CLK_A), .d (DATA_gain_10[0]),
       .sena (n_788), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[2] [0]));
  CDN_flop \FIFO_g10_A_reg[2][1] (.clk (CLK_A), .d (DATA_gain_10[1]),
       .sena (n_788), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[2] [1]));
  CDN_flop \FIFO_g10_A_reg[2][2] (.clk (CLK_A), .d (DATA_gain_10[2]),
       .sena (n_788), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[2] [2]));
  CDN_flop \FIFO_g10_A_reg[2][3] (.clk (CLK_A), .d (DATA_gain_10[3]),
       .sena (n_788), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[2] [3]));
  CDN_flop \FIFO_g10_A_reg[2][4] (.clk (CLK_A), .d (DATA_gain_10[4]),
       .sena (n_788), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[2] [4]));
  CDN_flop \FIFO_g10_A_reg[2][5] (.clk (CLK_A), .d (DATA_gain_10[5]),
       .sena (n_788), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[2] [5]));
  CDN_flop \FIFO_g10_A_reg[2][6] (.clk (CLK_A), .d (DATA_gain_10[6]),
       .sena (n_788), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[2] [6]));
  CDN_flop \FIFO_g10_A_reg[2][7] (.clk (CLK_A), .d (DATA_gain_10[7]),
       .sena (n_788), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[2] [7]));
  CDN_flop \FIFO_g10_A_reg[2][8] (.clk (CLK_A), .d (DATA_gain_10[8]),
       .sena (n_788), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[2] [8]));
  CDN_flop \FIFO_g10_A_reg[2][9] (.clk (CLK_A), .d (DATA_gain_10[9]),
       .sena (n_788), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[2] [9]));
  CDN_flop \FIFO_g10_A_reg[2][10] (.clk (CLK_A), .d (DATA_gain_10[10]),
       .sena (n_788), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[2] [10]));
  CDN_flop \FIFO_g10_A_reg[2][11] (.clk (CLK_A), .d (DATA_gain_10[11]),
       .sena (n_788), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[2] [11]));
  CDN_flop \FIFO_g10_A_reg[3][0] (.clk (CLK_A), .d (DATA_gain_10[0]),
       .sena (n_789), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[3] [0]));
  CDN_flop \FIFO_g10_A_reg[3][1] (.clk (CLK_A), .d (DATA_gain_10[1]),
       .sena (n_789), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[3] [1]));
  CDN_flop \FIFO_g10_A_reg[3][2] (.clk (CLK_A), .d (DATA_gain_10[2]),
       .sena (n_789), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[3] [2]));
  CDN_flop \FIFO_g10_A_reg[3][3] (.clk (CLK_A), .d (DATA_gain_10[3]),
       .sena (n_789), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[3] [3]));
  CDN_flop \FIFO_g10_A_reg[3][4] (.clk (CLK_A), .d (DATA_gain_10[4]),
       .sena (n_789), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[3] [4]));
  CDN_flop \FIFO_g10_A_reg[3][5] (.clk (CLK_A), .d (DATA_gain_10[5]),
       .sena (n_789), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[3] [5]));
  CDN_flop \FIFO_g10_A_reg[3][6] (.clk (CLK_A), .d (DATA_gain_10[6]),
       .sena (n_789), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[3] [6]));
  CDN_flop \FIFO_g10_A_reg[3][7] (.clk (CLK_A), .d (DATA_gain_10[7]),
       .sena (n_789), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[3] [7]));
  CDN_flop \FIFO_g10_A_reg[3][8] (.clk (CLK_A), .d (DATA_gain_10[8]),
       .sena (n_789), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[3] [8]));
  CDN_flop \FIFO_g10_A_reg[3][9] (.clk (CLK_A), .d (DATA_gain_10[9]),
       .sena (n_789), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[3] [9]));
  CDN_flop \FIFO_g10_A_reg[3][10] (.clk (CLK_A), .d (DATA_gain_10[10]),
       .sena (n_789), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[3] [10]));
  CDN_flop \FIFO_g10_A_reg[3][11] (.clk (CLK_A), .d (DATA_gain_10[11]),
       .sena (n_789), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[3] [11]));
  CDN_flop \FIFO_g10_A_reg[4][0] (.clk (CLK_A), .d (DATA_gain_10[0]),
       .sena (n_790), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[4] [0]));
  CDN_flop \FIFO_g10_A_reg[4][1] (.clk (CLK_A), .d (DATA_gain_10[1]),
       .sena (n_790), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[4] [1]));
  CDN_flop \FIFO_g10_A_reg[4][2] (.clk (CLK_A), .d (DATA_gain_10[2]),
       .sena (n_790), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[4] [2]));
  CDN_flop \FIFO_g10_A_reg[4][3] (.clk (CLK_A), .d (DATA_gain_10[3]),
       .sena (n_790), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[4] [3]));
  CDN_flop \FIFO_g10_A_reg[4][4] (.clk (CLK_A), .d (DATA_gain_10[4]),
       .sena (n_790), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[4] [4]));
  CDN_flop \FIFO_g10_A_reg[4][5] (.clk (CLK_A), .d (DATA_gain_10[5]),
       .sena (n_790), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[4] [5]));
  CDN_flop \FIFO_g10_A_reg[4][6] (.clk (CLK_A), .d (DATA_gain_10[6]),
       .sena (n_790), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[4] [6]));
  CDN_flop \FIFO_g10_A_reg[4][7] (.clk (CLK_A), .d (DATA_gain_10[7]),
       .sena (n_790), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[4] [7]));
  CDN_flop \FIFO_g10_A_reg[4][8] (.clk (CLK_A), .d (DATA_gain_10[8]),
       .sena (n_790), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[4] [8]));
  CDN_flop \FIFO_g10_A_reg[4][9] (.clk (CLK_A), .d (DATA_gain_10[9]),
       .sena (n_790), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[4] [9]));
  CDN_flop \FIFO_g10_A_reg[4][10] (.clk (CLK_A), .d (DATA_gain_10[10]),
       .sena (n_790), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[4] [10]));
  CDN_flop \FIFO_g10_A_reg[4][11] (.clk (CLK_A), .d (DATA_gain_10[11]),
       .sena (n_790), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[4] [11]));
  CDN_flop \FIFO_g10_A_reg[5][0] (.clk (CLK_A), .d (DATA_gain_10[0]),
       .sena (n_791), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[5] [0]));
  CDN_flop \FIFO_g10_A_reg[5][1] (.clk (CLK_A), .d (DATA_gain_10[1]),
       .sena (n_791), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[5] [1]));
  CDN_flop \FIFO_g10_A_reg[5][2] (.clk (CLK_A), .d (DATA_gain_10[2]),
       .sena (n_791), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[5] [2]));
  CDN_flop \FIFO_g10_A_reg[5][3] (.clk (CLK_A), .d (DATA_gain_10[3]),
       .sena (n_791), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[5] [3]));
  CDN_flop \FIFO_g10_A_reg[5][4] (.clk (CLK_A), .d (DATA_gain_10[4]),
       .sena (n_791), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[5] [4]));
  CDN_flop \FIFO_g10_A_reg[5][5] (.clk (CLK_A), .d (DATA_gain_10[5]),
       .sena (n_791), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[5] [5]));
  CDN_flop \FIFO_g10_A_reg[5][6] (.clk (CLK_A), .d (DATA_gain_10[6]),
       .sena (n_791), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[5] [6]));
  CDN_flop \FIFO_g10_A_reg[5][7] (.clk (CLK_A), .d (DATA_gain_10[7]),
       .sena (n_791), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[5] [7]));
  CDN_flop \FIFO_g10_A_reg[5][8] (.clk (CLK_A), .d (DATA_gain_10[8]),
       .sena (n_791), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[5] [8]));
  CDN_flop \FIFO_g10_A_reg[5][9] (.clk (CLK_A), .d (DATA_gain_10[9]),
       .sena (n_791), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[5] [9]));
  CDN_flop \FIFO_g10_A_reg[5][10] (.clk (CLK_A), .d (DATA_gain_10[10]),
       .sena (n_791), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[5] [10]));
  CDN_flop \FIFO_g10_A_reg[5][11] (.clk (CLK_A), .d (DATA_gain_10[11]),
       .sena (n_791), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[5] [11]));
  CDN_flop \FIFO_g10_A_reg[6][0] (.clk (CLK_A), .d (DATA_gain_10[0]),
       .sena (n_792), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[6] [0]));
  CDN_flop \FIFO_g10_A_reg[6][1] (.clk (CLK_A), .d (DATA_gain_10[1]),
       .sena (n_792), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[6] [1]));
  CDN_flop \FIFO_g10_A_reg[6][2] (.clk (CLK_A), .d (DATA_gain_10[2]),
       .sena (n_792), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[6] [2]));
  CDN_flop \FIFO_g10_A_reg[6][3] (.clk (CLK_A), .d (DATA_gain_10[3]),
       .sena (n_792), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[6] [3]));
  CDN_flop \FIFO_g10_A_reg[6][4] (.clk (CLK_A), .d (DATA_gain_10[4]),
       .sena (n_792), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[6] [4]));
  CDN_flop \FIFO_g10_A_reg[6][5] (.clk (CLK_A), .d (DATA_gain_10[5]),
       .sena (n_792), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[6] [5]));
  CDN_flop \FIFO_g10_A_reg[6][6] (.clk (CLK_A), .d (DATA_gain_10[6]),
       .sena (n_792), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[6] [6]));
  CDN_flop \FIFO_g10_A_reg[6][7] (.clk (CLK_A), .d (DATA_gain_10[7]),
       .sena (n_792), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[6] [7]));
  CDN_flop \FIFO_g10_A_reg[6][8] (.clk (CLK_A), .d (DATA_gain_10[8]),
       .sena (n_792), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[6] [8]));
  CDN_flop \FIFO_g10_A_reg[6][9] (.clk (CLK_A), .d (DATA_gain_10[9]),
       .sena (n_792), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[6] [9]));
  CDN_flop \FIFO_g10_A_reg[6][10] (.clk (CLK_A), .d (DATA_gain_10[10]),
       .sena (n_792), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[6] [10]));
  CDN_flop \FIFO_g10_A_reg[6][11] (.clk (CLK_A), .d (DATA_gain_10[11]),
       .sena (n_792), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[6] [11]));
  CDN_flop \FIFO_g10_A_reg[7][0] (.clk (CLK_A), .d (DATA_gain_10[0]),
       .sena (n_793), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[7] [0]));
  CDN_flop \FIFO_g10_A_reg[7][1] (.clk (CLK_A), .d (DATA_gain_10[1]),
       .sena (n_793), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[7] [1]));
  CDN_flop \FIFO_g10_A_reg[7][2] (.clk (CLK_A), .d (DATA_gain_10[2]),
       .sena (n_793), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[7] [2]));
  CDN_flop \FIFO_g10_A_reg[7][3] (.clk (CLK_A), .d (DATA_gain_10[3]),
       .sena (n_793), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[7] [3]));
  CDN_flop \FIFO_g10_A_reg[7][4] (.clk (CLK_A), .d (DATA_gain_10[4]),
       .sena (n_793), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[7] [4]));
  CDN_flop \FIFO_g10_A_reg[7][5] (.clk (CLK_A), .d (DATA_gain_10[5]),
       .sena (n_793), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[7] [5]));
  CDN_flop \FIFO_g10_A_reg[7][6] (.clk (CLK_A), .d (DATA_gain_10[6]),
       .sena (n_793), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[7] [6]));
  CDN_flop \FIFO_g10_A_reg[7][7] (.clk (CLK_A), .d (DATA_gain_10[7]),
       .sena (n_793), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[7] [7]));
  CDN_flop \FIFO_g10_A_reg[7][8] (.clk (CLK_A), .d (DATA_gain_10[8]),
       .sena (n_793), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[7] [8]));
  CDN_flop \FIFO_g10_A_reg[7][9] (.clk (CLK_A), .d (DATA_gain_10[9]),
       .sena (n_793), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[7] [9]));
  CDN_flop \FIFO_g10_A_reg[7][10] (.clk (CLK_A), .d (DATA_gain_10[10]),
       .sena (n_793), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[7] [10]));
  CDN_flop \FIFO_g10_A_reg[7][11] (.clk (CLK_A), .d (DATA_gain_10[11]),
       .sena (n_793), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd
       (1'b0), .q (\FIFO_g10_A[7] [11]));
  CDN_flop \FIFO_g1_B_reg[0][0] (.clk (CLK_B), .d (DATA_gain_01[0]),
       .sena (n_802), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[0] [0]));
  CDN_flop \FIFO_g1_B_reg[0][1] (.clk (CLK_B), .d (DATA_gain_01[1]),
       .sena (n_802), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[0] [1]));
  CDN_flop \FIFO_g1_B_reg[0][2] (.clk (CLK_B), .d (DATA_gain_01[2]),
       .sena (n_802), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[0] [2]));
  CDN_flop \FIFO_g1_B_reg[0][3] (.clk (CLK_B), .d (DATA_gain_01[3]),
       .sena (n_802), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[0] [3]));
  CDN_flop \FIFO_g1_B_reg[0][4] (.clk (CLK_B), .d (DATA_gain_01[4]),
       .sena (n_802), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[0] [4]));
  CDN_flop \FIFO_g1_B_reg[0][5] (.clk (CLK_B), .d (DATA_gain_01[5]),
       .sena (n_802), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[0] [5]));
  CDN_flop \FIFO_g1_B_reg[0][6] (.clk (CLK_B), .d (DATA_gain_01[6]),
       .sena (n_802), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[0] [6]));
  CDN_flop \FIFO_g1_B_reg[0][7] (.clk (CLK_B), .d (DATA_gain_01[7]),
       .sena (n_802), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[0] [7]));
  CDN_flop \FIFO_g1_B_reg[0][8] (.clk (CLK_B), .d (DATA_gain_01[8]),
       .sena (n_802), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[0] [8]));
  CDN_flop \FIFO_g1_B_reg[0][9] (.clk (CLK_B), .d (DATA_gain_01[9]),
       .sena (n_802), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[0] [9]));
  CDN_flop \FIFO_g1_B_reg[0][10] (.clk (CLK_B), .d (DATA_gain_01[10]),
       .sena (n_802), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[0] [10]));
  CDN_flop \FIFO_g1_B_reg[0][11] (.clk (CLK_B), .d (DATA_gain_01[11]),
       .sena (n_802), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[0] [11]));
  CDN_flop \FIFO_g1_B_reg[1][0] (.clk (CLK_B), .d (DATA_gain_01[0]),
       .sena (n_803), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[1] [0]));
  CDN_flop \FIFO_g1_B_reg[1][1] (.clk (CLK_B), .d (DATA_gain_01[1]),
       .sena (n_803), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[1] [1]));
  CDN_flop \FIFO_g1_B_reg[1][2] (.clk (CLK_B), .d (DATA_gain_01[2]),
       .sena (n_803), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[1] [2]));
  CDN_flop \FIFO_g1_B_reg[1][3] (.clk (CLK_B), .d (DATA_gain_01[3]),
       .sena (n_803), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[1] [3]));
  CDN_flop \FIFO_g1_B_reg[1][4] (.clk (CLK_B), .d (DATA_gain_01[4]),
       .sena (n_803), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[1] [4]));
  CDN_flop \FIFO_g1_B_reg[1][5] (.clk (CLK_B), .d (DATA_gain_01[5]),
       .sena (n_803), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[1] [5]));
  CDN_flop \FIFO_g1_B_reg[1][6] (.clk (CLK_B), .d (DATA_gain_01[6]),
       .sena (n_803), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[1] [6]));
  CDN_flop \FIFO_g1_B_reg[1][7] (.clk (CLK_B), .d (DATA_gain_01[7]),
       .sena (n_803), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[1] [7]));
  CDN_flop \FIFO_g1_B_reg[1][8] (.clk (CLK_B), .d (DATA_gain_01[8]),
       .sena (n_803), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[1] [8]));
  CDN_flop \FIFO_g1_B_reg[1][9] (.clk (CLK_B), .d (DATA_gain_01[9]),
       .sena (n_803), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[1] [9]));
  CDN_flop \FIFO_g1_B_reg[1][10] (.clk (CLK_B), .d (DATA_gain_01[10]),
       .sena (n_803), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[1] [10]));
  CDN_flop \FIFO_g1_B_reg[1][11] (.clk (CLK_B), .d (DATA_gain_01[11]),
       .sena (n_803), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[1] [11]));
  CDN_flop \FIFO_g1_B_reg[2][0] (.clk (CLK_B), .d (DATA_gain_01[0]),
       .sena (n_804), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[2] [0]));
  CDN_flop \FIFO_g1_B_reg[2][1] (.clk (CLK_B), .d (DATA_gain_01[1]),
       .sena (n_804), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[2] [1]));
  CDN_flop \FIFO_g1_B_reg[2][2] (.clk (CLK_B), .d (DATA_gain_01[2]),
       .sena (n_804), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[2] [2]));
  CDN_flop \FIFO_g1_B_reg[2][3] (.clk (CLK_B), .d (DATA_gain_01[3]),
       .sena (n_804), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[2] [3]));
  CDN_flop \FIFO_g1_B_reg[2][4] (.clk (CLK_B), .d (DATA_gain_01[4]),
       .sena (n_804), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[2] [4]));
  CDN_flop \FIFO_g1_B_reg[2][5] (.clk (CLK_B), .d (DATA_gain_01[5]),
       .sena (n_804), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[2] [5]));
  CDN_flop \FIFO_g1_B_reg[2][6] (.clk (CLK_B), .d (DATA_gain_01[6]),
       .sena (n_804), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[2] [6]));
  CDN_flop \FIFO_g1_B_reg[2][7] (.clk (CLK_B), .d (DATA_gain_01[7]),
       .sena (n_804), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[2] [7]));
  CDN_flop \FIFO_g1_B_reg[2][8] (.clk (CLK_B), .d (DATA_gain_01[8]),
       .sena (n_804), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[2] [8]));
  CDN_flop \FIFO_g1_B_reg[2][9] (.clk (CLK_B), .d (DATA_gain_01[9]),
       .sena (n_804), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[2] [9]));
  CDN_flop \FIFO_g1_B_reg[2][10] (.clk (CLK_B), .d (DATA_gain_01[10]),
       .sena (n_804), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[2] [10]));
  CDN_flop \FIFO_g1_B_reg[2][11] (.clk (CLK_B), .d (DATA_gain_01[11]),
       .sena (n_804), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[2] [11]));
  CDN_flop \FIFO_g1_B_reg[3][0] (.clk (CLK_B), .d (DATA_gain_01[0]),
       .sena (n_805), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[3] [0]));
  CDN_flop \FIFO_g1_B_reg[3][1] (.clk (CLK_B), .d (DATA_gain_01[1]),
       .sena (n_805), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[3] [1]));
  CDN_flop \FIFO_g1_B_reg[3][2] (.clk (CLK_B), .d (DATA_gain_01[2]),
       .sena (n_805), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[3] [2]));
  CDN_flop \FIFO_g1_B_reg[3][3] (.clk (CLK_B), .d (DATA_gain_01[3]),
       .sena (n_805), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[3] [3]));
  CDN_flop \FIFO_g1_B_reg[3][4] (.clk (CLK_B), .d (DATA_gain_01[4]),
       .sena (n_805), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[3] [4]));
  CDN_flop \FIFO_g1_B_reg[3][5] (.clk (CLK_B), .d (DATA_gain_01[5]),
       .sena (n_805), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[3] [5]));
  CDN_flop \FIFO_g1_B_reg[3][6] (.clk (CLK_B), .d (DATA_gain_01[6]),
       .sena (n_805), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[3] [6]));
  CDN_flop \FIFO_g1_B_reg[3][7] (.clk (CLK_B), .d (DATA_gain_01[7]),
       .sena (n_805), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[3] [7]));
  CDN_flop \FIFO_g1_B_reg[3][8] (.clk (CLK_B), .d (DATA_gain_01[8]),
       .sena (n_805), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[3] [8]));
  CDN_flop \FIFO_g1_B_reg[3][9] (.clk (CLK_B), .d (DATA_gain_01[9]),
       .sena (n_805), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[3] [9]));
  CDN_flop \FIFO_g1_B_reg[3][10] (.clk (CLK_B), .d (DATA_gain_01[10]),
       .sena (n_805), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[3] [10]));
  CDN_flop \FIFO_g1_B_reg[3][11] (.clk (CLK_B), .d (DATA_gain_01[11]),
       .sena (n_805), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[3] [11]));
  CDN_flop \FIFO_g1_B_reg[4][0] (.clk (CLK_B), .d (DATA_gain_01[0]),
       .sena (n_806), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[4] [0]));
  CDN_flop \FIFO_g1_B_reg[4][1] (.clk (CLK_B), .d (DATA_gain_01[1]),
       .sena (n_806), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[4] [1]));
  CDN_flop \FIFO_g1_B_reg[4][2] (.clk (CLK_B), .d (DATA_gain_01[2]),
       .sena (n_806), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[4] [2]));
  CDN_flop \FIFO_g1_B_reg[4][3] (.clk (CLK_B), .d (DATA_gain_01[3]),
       .sena (n_806), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[4] [3]));
  CDN_flop \FIFO_g1_B_reg[4][4] (.clk (CLK_B), .d (DATA_gain_01[4]),
       .sena (n_806), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[4] [4]));
  CDN_flop \FIFO_g1_B_reg[4][5] (.clk (CLK_B), .d (DATA_gain_01[5]),
       .sena (n_806), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[4] [5]));
  CDN_flop \FIFO_g1_B_reg[4][6] (.clk (CLK_B), .d (DATA_gain_01[6]),
       .sena (n_806), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[4] [6]));
  CDN_flop \FIFO_g1_B_reg[4][7] (.clk (CLK_B), .d (DATA_gain_01[7]),
       .sena (n_806), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[4] [7]));
  CDN_flop \FIFO_g1_B_reg[4][8] (.clk (CLK_B), .d (DATA_gain_01[8]),
       .sena (n_806), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[4] [8]));
  CDN_flop \FIFO_g1_B_reg[4][9] (.clk (CLK_B), .d (DATA_gain_01[9]),
       .sena (n_806), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[4] [9]));
  CDN_flop \FIFO_g1_B_reg[4][10] (.clk (CLK_B), .d (DATA_gain_01[10]),
       .sena (n_806), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[4] [10]));
  CDN_flop \FIFO_g1_B_reg[4][11] (.clk (CLK_B), .d (DATA_gain_01[11]),
       .sena (n_806), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[4] [11]));
  CDN_flop \FIFO_g1_B_reg[5][0] (.clk (CLK_B), .d (DATA_gain_01[0]),
       .sena (n_807), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[5] [0]));
  CDN_flop \FIFO_g1_B_reg[5][1] (.clk (CLK_B), .d (DATA_gain_01[1]),
       .sena (n_807), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[5] [1]));
  CDN_flop \FIFO_g1_B_reg[5][2] (.clk (CLK_B), .d (DATA_gain_01[2]),
       .sena (n_807), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[5] [2]));
  CDN_flop \FIFO_g1_B_reg[5][3] (.clk (CLK_B), .d (DATA_gain_01[3]),
       .sena (n_807), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[5] [3]));
  CDN_flop \FIFO_g1_B_reg[5][4] (.clk (CLK_B), .d (DATA_gain_01[4]),
       .sena (n_807), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[5] [4]));
  CDN_flop \FIFO_g1_B_reg[5][5] (.clk (CLK_B), .d (DATA_gain_01[5]),
       .sena (n_807), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[5] [5]));
  CDN_flop \FIFO_g1_B_reg[5][6] (.clk (CLK_B), .d (DATA_gain_01[6]),
       .sena (n_807), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[5] [6]));
  CDN_flop \FIFO_g1_B_reg[5][7] (.clk (CLK_B), .d (DATA_gain_01[7]),
       .sena (n_807), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[5] [7]));
  CDN_flop \FIFO_g1_B_reg[5][8] (.clk (CLK_B), .d (DATA_gain_01[8]),
       .sena (n_807), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[5] [8]));
  CDN_flop \FIFO_g1_B_reg[5][9] (.clk (CLK_B), .d (DATA_gain_01[9]),
       .sena (n_807), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[5] [9]));
  CDN_flop \FIFO_g1_B_reg[5][10] (.clk (CLK_B), .d (DATA_gain_01[10]),
       .sena (n_807), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[5] [10]));
  CDN_flop \FIFO_g1_B_reg[5][11] (.clk (CLK_B), .d (DATA_gain_01[11]),
       .sena (n_807), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[5] [11]));
  CDN_flop \FIFO_g1_B_reg[6][0] (.clk (CLK_B), .d (DATA_gain_01[0]),
       .sena (n_808), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[6] [0]));
  CDN_flop \FIFO_g1_B_reg[6][1] (.clk (CLK_B), .d (DATA_gain_01[1]),
       .sena (n_808), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[6] [1]));
  CDN_flop \FIFO_g1_B_reg[6][2] (.clk (CLK_B), .d (DATA_gain_01[2]),
       .sena (n_808), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[6] [2]));
  CDN_flop \FIFO_g1_B_reg[6][3] (.clk (CLK_B), .d (DATA_gain_01[3]),
       .sena (n_808), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[6] [3]));
  CDN_flop \FIFO_g1_B_reg[6][4] (.clk (CLK_B), .d (DATA_gain_01[4]),
       .sena (n_808), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[6] [4]));
  CDN_flop \FIFO_g1_B_reg[6][5] (.clk (CLK_B), .d (DATA_gain_01[5]),
       .sena (n_808), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[6] [5]));
  CDN_flop \FIFO_g1_B_reg[6][6] (.clk (CLK_B), .d (DATA_gain_01[6]),
       .sena (n_808), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[6] [6]));
  CDN_flop \FIFO_g1_B_reg[6][7] (.clk (CLK_B), .d (DATA_gain_01[7]),
       .sena (n_808), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[6] [7]));
  CDN_flop \FIFO_g1_B_reg[6][8] (.clk (CLK_B), .d (DATA_gain_01[8]),
       .sena (n_808), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[6] [8]));
  CDN_flop \FIFO_g1_B_reg[6][9] (.clk (CLK_B), .d (DATA_gain_01[9]),
       .sena (n_808), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[6] [9]));
  CDN_flop \FIFO_g1_B_reg[6][10] (.clk (CLK_B), .d (DATA_gain_01[10]),
       .sena (n_808), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[6] [10]));
  CDN_flop \FIFO_g1_B_reg[6][11] (.clk (CLK_B), .d (DATA_gain_01[11]),
       .sena (n_808), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[6] [11]));
  CDN_flop \FIFO_g1_B_reg[7][0] (.clk (CLK_B), .d (DATA_gain_01[0]),
       .sena (n_809), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[7] [0]));
  CDN_flop \FIFO_g1_B_reg[7][1] (.clk (CLK_B), .d (DATA_gain_01[1]),
       .sena (n_809), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[7] [1]));
  CDN_flop \FIFO_g1_B_reg[7][2] (.clk (CLK_B), .d (DATA_gain_01[2]),
       .sena (n_809), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[7] [2]));
  CDN_flop \FIFO_g1_B_reg[7][3] (.clk (CLK_B), .d (DATA_gain_01[3]),
       .sena (n_809), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[7] [3]));
  CDN_flop \FIFO_g1_B_reg[7][4] (.clk (CLK_B), .d (DATA_gain_01[4]),
       .sena (n_809), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[7] [4]));
  CDN_flop \FIFO_g1_B_reg[7][5] (.clk (CLK_B), .d (DATA_gain_01[5]),
       .sena (n_809), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[7] [5]));
  CDN_flop \FIFO_g1_B_reg[7][6] (.clk (CLK_B), .d (DATA_gain_01[6]),
       .sena (n_809), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[7] [6]));
  CDN_flop \FIFO_g1_B_reg[7][7] (.clk (CLK_B), .d (DATA_gain_01[7]),
       .sena (n_809), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[7] [7]));
  CDN_flop \FIFO_g1_B_reg[7][8] (.clk (CLK_B), .d (DATA_gain_01[8]),
       .sena (n_809), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[7] [8]));
  CDN_flop \FIFO_g1_B_reg[7][9] (.clk (CLK_B), .d (DATA_gain_01[9]),
       .sena (n_809), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[7] [9]));
  CDN_flop \FIFO_g1_B_reg[7][10] (.clk (CLK_B), .d (DATA_gain_01[10]),
       .sena (n_809), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[7] [10]));
  CDN_flop \FIFO_g1_B_reg[7][11] (.clk (CLK_B), .d (DATA_gain_01[11]),
       .sena (n_809), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g1_B[7] [11]));
  CDN_flop \FIFO_g10_B_reg[0][0] (.clk (CLK_B), .d (DATA_gain_10[0]),
       .sena (n_802), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[0] [0]));
  CDN_flop \FIFO_g10_B_reg[0][1] (.clk (CLK_B), .d (DATA_gain_10[1]),
       .sena (n_802), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[0] [1]));
  CDN_flop \FIFO_g10_B_reg[0][2] (.clk (CLK_B), .d (DATA_gain_10[2]),
       .sena (n_802), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[0] [2]));
  CDN_flop \FIFO_g10_B_reg[0][3] (.clk (CLK_B), .d (DATA_gain_10[3]),
       .sena (n_802), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[0] [3]));
  CDN_flop \FIFO_g10_B_reg[0][4] (.clk (CLK_B), .d (DATA_gain_10[4]),
       .sena (n_802), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[0] [4]));
  CDN_flop \FIFO_g10_B_reg[0][5] (.clk (CLK_B), .d (DATA_gain_10[5]),
       .sena (n_802), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[0] [5]));
  CDN_flop \FIFO_g10_B_reg[0][6] (.clk (CLK_B), .d (DATA_gain_10[6]),
       .sena (n_802), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[0] [6]));
  CDN_flop \FIFO_g10_B_reg[0][7] (.clk (CLK_B), .d (DATA_gain_10[7]),
       .sena (n_802), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[0] [7]));
  CDN_flop \FIFO_g10_B_reg[0][8] (.clk (CLK_B), .d (DATA_gain_10[8]),
       .sena (n_802), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[0] [8]));
  CDN_flop \FIFO_g10_B_reg[0][9] (.clk (CLK_B), .d (DATA_gain_10[9]),
       .sena (n_802), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[0] [9]));
  CDN_flop \FIFO_g10_B_reg[0][10] (.clk (CLK_B), .d (DATA_gain_10[10]),
       .sena (n_802), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[0] [10]));
  CDN_flop \FIFO_g10_B_reg[0][11] (.clk (CLK_B), .d (DATA_gain_10[11]),
       .sena (n_802), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[0] [11]));
  CDN_flop \FIFO_g10_B_reg[1][0] (.clk (CLK_B), .d (DATA_gain_10[0]),
       .sena (n_803), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[1] [0]));
  CDN_flop \FIFO_g10_B_reg[1][1] (.clk (CLK_B), .d (DATA_gain_10[1]),
       .sena (n_803), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[1] [1]));
  CDN_flop \FIFO_g10_B_reg[1][2] (.clk (CLK_B), .d (DATA_gain_10[2]),
       .sena (n_803), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[1] [2]));
  CDN_flop \FIFO_g10_B_reg[1][3] (.clk (CLK_B), .d (DATA_gain_10[3]),
       .sena (n_803), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[1] [3]));
  CDN_flop \FIFO_g10_B_reg[1][4] (.clk (CLK_B), .d (DATA_gain_10[4]),
       .sena (n_803), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[1] [4]));
  CDN_flop \FIFO_g10_B_reg[1][5] (.clk (CLK_B), .d (DATA_gain_10[5]),
       .sena (n_803), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[1] [5]));
  CDN_flop \FIFO_g10_B_reg[1][6] (.clk (CLK_B), .d (DATA_gain_10[6]),
       .sena (n_803), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[1] [6]));
  CDN_flop \FIFO_g10_B_reg[1][7] (.clk (CLK_B), .d (DATA_gain_10[7]),
       .sena (n_803), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[1] [7]));
  CDN_flop \FIFO_g10_B_reg[1][8] (.clk (CLK_B), .d (DATA_gain_10[8]),
       .sena (n_803), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[1] [8]));
  CDN_flop \FIFO_g10_B_reg[1][9] (.clk (CLK_B), .d (DATA_gain_10[9]),
       .sena (n_803), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[1] [9]));
  CDN_flop \FIFO_g10_B_reg[1][10] (.clk (CLK_B), .d (DATA_gain_10[10]),
       .sena (n_803), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[1] [10]));
  CDN_flop \FIFO_g10_B_reg[1][11] (.clk (CLK_B), .d (DATA_gain_10[11]),
       .sena (n_803), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[1] [11]));
  CDN_flop \FIFO_g10_B_reg[2][0] (.clk (CLK_B), .d (DATA_gain_10[0]),
       .sena (n_804), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[2] [0]));
  CDN_flop \FIFO_g10_B_reg[2][1] (.clk (CLK_B), .d (DATA_gain_10[1]),
       .sena (n_804), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[2] [1]));
  CDN_flop \FIFO_g10_B_reg[2][2] (.clk (CLK_B), .d (DATA_gain_10[2]),
       .sena (n_804), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[2] [2]));
  CDN_flop \FIFO_g10_B_reg[2][3] (.clk (CLK_B), .d (DATA_gain_10[3]),
       .sena (n_804), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[2] [3]));
  CDN_flop \FIFO_g10_B_reg[2][4] (.clk (CLK_B), .d (DATA_gain_10[4]),
       .sena (n_804), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[2] [4]));
  CDN_flop \FIFO_g10_B_reg[2][5] (.clk (CLK_B), .d (DATA_gain_10[5]),
       .sena (n_804), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[2] [5]));
  CDN_flop \FIFO_g10_B_reg[2][6] (.clk (CLK_B), .d (DATA_gain_10[6]),
       .sena (n_804), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[2] [6]));
  CDN_flop \FIFO_g10_B_reg[2][7] (.clk (CLK_B), .d (DATA_gain_10[7]),
       .sena (n_804), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[2] [7]));
  CDN_flop \FIFO_g10_B_reg[2][8] (.clk (CLK_B), .d (DATA_gain_10[8]),
       .sena (n_804), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[2] [8]));
  CDN_flop \FIFO_g10_B_reg[2][9] (.clk (CLK_B), .d (DATA_gain_10[9]),
       .sena (n_804), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[2] [9]));
  CDN_flop \FIFO_g10_B_reg[2][10] (.clk (CLK_B), .d (DATA_gain_10[10]),
       .sena (n_804), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[2] [10]));
  CDN_flop \FIFO_g10_B_reg[2][11] (.clk (CLK_B), .d (DATA_gain_10[11]),
       .sena (n_804), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[2] [11]));
  CDN_flop \FIFO_g10_B_reg[3][0] (.clk (CLK_B), .d (DATA_gain_10[0]),
       .sena (n_805), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[3] [0]));
  CDN_flop \FIFO_g10_B_reg[3][1] (.clk (CLK_B), .d (DATA_gain_10[1]),
       .sena (n_805), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[3] [1]));
  CDN_flop \FIFO_g10_B_reg[3][2] (.clk (CLK_B), .d (DATA_gain_10[2]),
       .sena (n_805), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[3] [2]));
  CDN_flop \FIFO_g10_B_reg[3][3] (.clk (CLK_B), .d (DATA_gain_10[3]),
       .sena (n_805), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[3] [3]));
  CDN_flop \FIFO_g10_B_reg[3][4] (.clk (CLK_B), .d (DATA_gain_10[4]),
       .sena (n_805), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[3] [4]));
  CDN_flop \FIFO_g10_B_reg[3][5] (.clk (CLK_B), .d (DATA_gain_10[5]),
       .sena (n_805), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[3] [5]));
  CDN_flop \FIFO_g10_B_reg[3][6] (.clk (CLK_B), .d (DATA_gain_10[6]),
       .sena (n_805), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[3] [6]));
  CDN_flop \FIFO_g10_B_reg[3][7] (.clk (CLK_B), .d (DATA_gain_10[7]),
       .sena (n_805), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[3] [7]));
  CDN_flop \FIFO_g10_B_reg[3][8] (.clk (CLK_B), .d (DATA_gain_10[8]),
       .sena (n_805), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[3] [8]));
  CDN_flop \FIFO_g10_B_reg[3][9] (.clk (CLK_B), .d (DATA_gain_10[9]),
       .sena (n_805), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[3] [9]));
  CDN_flop \FIFO_g10_B_reg[3][10] (.clk (CLK_B), .d (DATA_gain_10[10]),
       .sena (n_805), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[3] [10]));
  CDN_flop \FIFO_g10_B_reg[3][11] (.clk (CLK_B), .d (DATA_gain_10[11]),
       .sena (n_805), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[3] [11]));
  CDN_flop \FIFO_g10_B_reg[4][0] (.clk (CLK_B), .d (DATA_gain_10[0]),
       .sena (n_806), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[4] [0]));
  CDN_flop \FIFO_g10_B_reg[4][1] (.clk (CLK_B), .d (DATA_gain_10[1]),
       .sena (n_806), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[4] [1]));
  CDN_flop \FIFO_g10_B_reg[4][2] (.clk (CLK_B), .d (DATA_gain_10[2]),
       .sena (n_806), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[4] [2]));
  CDN_flop \FIFO_g10_B_reg[4][3] (.clk (CLK_B), .d (DATA_gain_10[3]),
       .sena (n_806), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[4] [3]));
  CDN_flop \FIFO_g10_B_reg[4][4] (.clk (CLK_B), .d (DATA_gain_10[4]),
       .sena (n_806), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[4] [4]));
  CDN_flop \FIFO_g10_B_reg[4][5] (.clk (CLK_B), .d (DATA_gain_10[5]),
       .sena (n_806), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[4] [5]));
  CDN_flop \FIFO_g10_B_reg[4][6] (.clk (CLK_B), .d (DATA_gain_10[6]),
       .sena (n_806), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[4] [6]));
  CDN_flop \FIFO_g10_B_reg[4][7] (.clk (CLK_B), .d (DATA_gain_10[7]),
       .sena (n_806), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[4] [7]));
  CDN_flop \FIFO_g10_B_reg[4][8] (.clk (CLK_B), .d (DATA_gain_10[8]),
       .sena (n_806), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[4] [8]));
  CDN_flop \FIFO_g10_B_reg[4][9] (.clk (CLK_B), .d (DATA_gain_10[9]),
       .sena (n_806), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[4] [9]));
  CDN_flop \FIFO_g10_B_reg[4][10] (.clk (CLK_B), .d (DATA_gain_10[10]),
       .sena (n_806), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[4] [10]));
  CDN_flop \FIFO_g10_B_reg[4][11] (.clk (CLK_B), .d (DATA_gain_10[11]),
       .sena (n_806), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[4] [11]));
  CDN_flop \FIFO_g10_B_reg[5][0] (.clk (CLK_B), .d (DATA_gain_10[0]),
       .sena (n_807), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[5] [0]));
  CDN_flop \FIFO_g10_B_reg[5][1] (.clk (CLK_B), .d (DATA_gain_10[1]),
       .sena (n_807), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[5] [1]));
  CDN_flop \FIFO_g10_B_reg[5][2] (.clk (CLK_B), .d (DATA_gain_10[2]),
       .sena (n_807), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[5] [2]));
  CDN_flop \FIFO_g10_B_reg[5][3] (.clk (CLK_B), .d (DATA_gain_10[3]),
       .sena (n_807), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[5] [3]));
  CDN_flop \FIFO_g10_B_reg[5][4] (.clk (CLK_B), .d (DATA_gain_10[4]),
       .sena (n_807), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[5] [4]));
  CDN_flop \FIFO_g10_B_reg[5][5] (.clk (CLK_B), .d (DATA_gain_10[5]),
       .sena (n_807), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[5] [5]));
  CDN_flop \FIFO_g10_B_reg[5][6] (.clk (CLK_B), .d (DATA_gain_10[6]),
       .sena (n_807), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[5] [6]));
  CDN_flop \FIFO_g10_B_reg[5][7] (.clk (CLK_B), .d (DATA_gain_10[7]),
       .sena (n_807), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[5] [7]));
  CDN_flop \FIFO_g10_B_reg[5][8] (.clk (CLK_B), .d (DATA_gain_10[8]),
       .sena (n_807), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[5] [8]));
  CDN_flop \FIFO_g10_B_reg[5][9] (.clk (CLK_B), .d (DATA_gain_10[9]),
       .sena (n_807), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[5] [9]));
  CDN_flop \FIFO_g10_B_reg[5][10] (.clk (CLK_B), .d (DATA_gain_10[10]),
       .sena (n_807), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[5] [10]));
  CDN_flop \FIFO_g10_B_reg[5][11] (.clk (CLK_B), .d (DATA_gain_10[11]),
       .sena (n_807), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[5] [11]));
  CDN_flop \FIFO_g10_B_reg[6][0] (.clk (CLK_B), .d (DATA_gain_10[0]),
       .sena (n_808), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[6] [0]));
  CDN_flop \FIFO_g10_B_reg[6][1] (.clk (CLK_B), .d (DATA_gain_10[1]),
       .sena (n_808), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[6] [1]));
  CDN_flop \FIFO_g10_B_reg[6][2] (.clk (CLK_B), .d (DATA_gain_10[2]),
       .sena (n_808), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[6] [2]));
  CDN_flop \FIFO_g10_B_reg[6][3] (.clk (CLK_B), .d (DATA_gain_10[3]),
       .sena (n_808), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[6] [3]));
  CDN_flop \FIFO_g10_B_reg[6][4] (.clk (CLK_B), .d (DATA_gain_10[4]),
       .sena (n_808), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[6] [4]));
  CDN_flop \FIFO_g10_B_reg[6][5] (.clk (CLK_B), .d (DATA_gain_10[5]),
       .sena (n_808), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[6] [5]));
  CDN_flop \FIFO_g10_B_reg[6][6] (.clk (CLK_B), .d (DATA_gain_10[6]),
       .sena (n_808), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[6] [6]));
  CDN_flop \FIFO_g10_B_reg[6][7] (.clk (CLK_B), .d (DATA_gain_10[7]),
       .sena (n_808), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[6] [7]));
  CDN_flop \FIFO_g10_B_reg[6][8] (.clk (CLK_B), .d (DATA_gain_10[8]),
       .sena (n_808), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[6] [8]));
  CDN_flop \FIFO_g10_B_reg[6][9] (.clk (CLK_B), .d (DATA_gain_10[9]),
       .sena (n_808), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[6] [9]));
  CDN_flop \FIFO_g10_B_reg[6][10] (.clk (CLK_B), .d (DATA_gain_10[10]),
       .sena (n_808), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[6] [10]));
  CDN_flop \FIFO_g10_B_reg[6][11] (.clk (CLK_B), .d (DATA_gain_10[11]),
       .sena (n_808), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[6] [11]));
  CDN_flop \FIFO_g10_B_reg[7][0] (.clk (CLK_B), .d (DATA_gain_10[0]),
       .sena (n_809), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[7] [0]));
  CDN_flop \FIFO_g10_B_reg[7][1] (.clk (CLK_B), .d (DATA_gain_10[1]),
       .sena (n_809), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[7] [1]));
  CDN_flop \FIFO_g10_B_reg[7][2] (.clk (CLK_B), .d (DATA_gain_10[2]),
       .sena (n_809), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[7] [2]));
  CDN_flop \FIFO_g10_B_reg[7][3] (.clk (CLK_B), .d (DATA_gain_10[3]),
       .sena (n_809), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[7] [3]));
  CDN_flop \FIFO_g10_B_reg[7][4] (.clk (CLK_B), .d (DATA_gain_10[4]),
       .sena (n_809), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[7] [4]));
  CDN_flop \FIFO_g10_B_reg[7][5] (.clk (CLK_B), .d (DATA_gain_10[5]),
       .sena (n_809), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[7] [5]));
  CDN_flop \FIFO_g10_B_reg[7][6] (.clk (CLK_B), .d (DATA_gain_10[6]),
       .sena (n_809), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[7] [6]));
  CDN_flop \FIFO_g10_B_reg[7][7] (.clk (CLK_B), .d (DATA_gain_10[7]),
       .sena (n_809), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[7] [7]));
  CDN_flop \FIFO_g10_B_reg[7][8] (.clk (CLK_B), .d (DATA_gain_10[8]),
       .sena (n_809), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[7] [8]));
  CDN_flop \FIFO_g10_B_reg[7][9] (.clk (CLK_B), .d (DATA_gain_10[9]),
       .sena (n_809), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[7] [9]));
  CDN_flop \FIFO_g10_B_reg[7][10] (.clk (CLK_B), .d (DATA_gain_10[10]),
       .sena (n_809), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[7] [10]));
  CDN_flop \FIFO_g10_B_reg[7][11] (.clk (CLK_B), .d (DATA_gain_10[11]),
       .sena (n_809), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd
       (1'b0), .q (\FIFO_g10_B[7] [11]));
  CDN_flop \FIFO_g1_C_reg[0][0] (.clk (CLK_C), .d (DATA_gain_01[0]),
       .sena (n_818), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[0] [0]));
  CDN_flop \FIFO_g1_C_reg[0][1] (.clk (CLK_C), .d (DATA_gain_01[1]),
       .sena (n_818), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[0] [1]));
  CDN_flop \FIFO_g1_C_reg[0][2] (.clk (CLK_C), .d (DATA_gain_01[2]),
       .sena (n_818), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[0] [2]));
  CDN_flop \FIFO_g1_C_reg[0][3] (.clk (CLK_C), .d (DATA_gain_01[3]),
       .sena (n_818), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[0] [3]));
  CDN_flop \FIFO_g1_C_reg[0][4] (.clk (CLK_C), .d (DATA_gain_01[4]),
       .sena (n_818), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[0] [4]));
  CDN_flop \FIFO_g1_C_reg[0][5] (.clk (CLK_C), .d (DATA_gain_01[5]),
       .sena (n_818), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[0] [5]));
  CDN_flop \FIFO_g1_C_reg[0][6] (.clk (CLK_C), .d (DATA_gain_01[6]),
       .sena (n_818), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[0] [6]));
  CDN_flop \FIFO_g1_C_reg[0][7] (.clk (CLK_C), .d (DATA_gain_01[7]),
       .sena (n_818), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[0] [7]));
  CDN_flop \FIFO_g1_C_reg[0][8] (.clk (CLK_C), .d (DATA_gain_01[8]),
       .sena (n_818), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[0] [8]));
  CDN_flop \FIFO_g1_C_reg[0][9] (.clk (CLK_C), .d (DATA_gain_01[9]),
       .sena (n_818), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[0] [9]));
  CDN_flop \FIFO_g1_C_reg[0][10] (.clk (CLK_C), .d (DATA_gain_01[10]),
       .sena (n_818), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[0] [10]));
  CDN_flop \FIFO_g1_C_reg[0][11] (.clk (CLK_C), .d (DATA_gain_01[11]),
       .sena (n_818), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[0] [11]));
  CDN_flop \FIFO_g1_C_reg[1][0] (.clk (CLK_C), .d (DATA_gain_01[0]),
       .sena (n_819), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[1] [0]));
  CDN_flop \FIFO_g1_C_reg[1][1] (.clk (CLK_C), .d (DATA_gain_01[1]),
       .sena (n_819), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[1] [1]));
  CDN_flop \FIFO_g1_C_reg[1][2] (.clk (CLK_C), .d (DATA_gain_01[2]),
       .sena (n_819), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[1] [2]));
  CDN_flop \FIFO_g1_C_reg[1][3] (.clk (CLK_C), .d (DATA_gain_01[3]),
       .sena (n_819), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[1] [3]));
  CDN_flop \FIFO_g1_C_reg[1][4] (.clk (CLK_C), .d (DATA_gain_01[4]),
       .sena (n_819), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[1] [4]));
  CDN_flop \FIFO_g1_C_reg[1][5] (.clk (CLK_C), .d (DATA_gain_01[5]),
       .sena (n_819), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[1] [5]));
  CDN_flop \FIFO_g1_C_reg[1][6] (.clk (CLK_C), .d (DATA_gain_01[6]),
       .sena (n_819), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[1] [6]));
  CDN_flop \FIFO_g1_C_reg[1][7] (.clk (CLK_C), .d (DATA_gain_01[7]),
       .sena (n_819), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[1] [7]));
  CDN_flop \FIFO_g1_C_reg[1][8] (.clk (CLK_C), .d (DATA_gain_01[8]),
       .sena (n_819), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[1] [8]));
  CDN_flop \FIFO_g1_C_reg[1][9] (.clk (CLK_C), .d (DATA_gain_01[9]),
       .sena (n_819), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[1] [9]));
  CDN_flop \FIFO_g1_C_reg[1][10] (.clk (CLK_C), .d (DATA_gain_01[10]),
       .sena (n_819), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[1] [10]));
  CDN_flop \FIFO_g1_C_reg[1][11] (.clk (CLK_C), .d (DATA_gain_01[11]),
       .sena (n_819), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[1] [11]));
  CDN_flop \FIFO_g1_C_reg[2][0] (.clk (CLK_C), .d (DATA_gain_01[0]),
       .sena (n_820), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[2] [0]));
  CDN_flop \FIFO_g1_C_reg[2][1] (.clk (CLK_C), .d (DATA_gain_01[1]),
       .sena (n_820), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[2] [1]));
  CDN_flop \FIFO_g1_C_reg[2][2] (.clk (CLK_C), .d (DATA_gain_01[2]),
       .sena (n_820), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[2] [2]));
  CDN_flop \FIFO_g1_C_reg[2][3] (.clk (CLK_C), .d (DATA_gain_01[3]),
       .sena (n_820), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[2] [3]));
  CDN_flop \FIFO_g1_C_reg[2][4] (.clk (CLK_C), .d (DATA_gain_01[4]),
       .sena (n_820), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[2] [4]));
  CDN_flop \FIFO_g1_C_reg[2][5] (.clk (CLK_C), .d (DATA_gain_01[5]),
       .sena (n_820), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[2] [5]));
  CDN_flop \FIFO_g1_C_reg[2][6] (.clk (CLK_C), .d (DATA_gain_01[6]),
       .sena (n_820), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[2] [6]));
  CDN_flop \FIFO_g1_C_reg[2][7] (.clk (CLK_C), .d (DATA_gain_01[7]),
       .sena (n_820), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[2] [7]));
  CDN_flop \FIFO_g1_C_reg[2][8] (.clk (CLK_C), .d (DATA_gain_01[8]),
       .sena (n_820), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[2] [8]));
  CDN_flop \FIFO_g1_C_reg[2][9] (.clk (CLK_C), .d (DATA_gain_01[9]),
       .sena (n_820), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[2] [9]));
  CDN_flop \FIFO_g1_C_reg[2][10] (.clk (CLK_C), .d (DATA_gain_01[10]),
       .sena (n_820), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[2] [10]));
  CDN_flop \FIFO_g1_C_reg[2][11] (.clk (CLK_C), .d (DATA_gain_01[11]),
       .sena (n_820), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[2] [11]));
  CDN_flop \FIFO_g1_C_reg[3][0] (.clk (CLK_C), .d (DATA_gain_01[0]),
       .sena (n_821), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[3] [0]));
  CDN_flop \FIFO_g1_C_reg[3][1] (.clk (CLK_C), .d (DATA_gain_01[1]),
       .sena (n_821), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[3] [1]));
  CDN_flop \FIFO_g1_C_reg[3][2] (.clk (CLK_C), .d (DATA_gain_01[2]),
       .sena (n_821), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[3] [2]));
  CDN_flop \FIFO_g1_C_reg[3][3] (.clk (CLK_C), .d (DATA_gain_01[3]),
       .sena (n_821), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[3] [3]));
  CDN_flop \FIFO_g1_C_reg[3][4] (.clk (CLK_C), .d (DATA_gain_01[4]),
       .sena (n_821), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[3] [4]));
  CDN_flop \FIFO_g1_C_reg[3][5] (.clk (CLK_C), .d (DATA_gain_01[5]),
       .sena (n_821), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[3] [5]));
  CDN_flop \FIFO_g1_C_reg[3][6] (.clk (CLK_C), .d (DATA_gain_01[6]),
       .sena (n_821), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[3] [6]));
  CDN_flop \FIFO_g1_C_reg[3][7] (.clk (CLK_C), .d (DATA_gain_01[7]),
       .sena (n_821), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[3] [7]));
  CDN_flop \FIFO_g1_C_reg[3][8] (.clk (CLK_C), .d (DATA_gain_01[8]),
       .sena (n_821), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[3] [8]));
  CDN_flop \FIFO_g1_C_reg[3][9] (.clk (CLK_C), .d (DATA_gain_01[9]),
       .sena (n_821), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[3] [9]));
  CDN_flop \FIFO_g1_C_reg[3][10] (.clk (CLK_C), .d (DATA_gain_01[10]),
       .sena (n_821), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[3] [10]));
  CDN_flop \FIFO_g1_C_reg[3][11] (.clk (CLK_C), .d (DATA_gain_01[11]),
       .sena (n_821), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[3] [11]));
  CDN_flop \FIFO_g1_C_reg[4][0] (.clk (CLK_C), .d (DATA_gain_01[0]),
       .sena (n_822), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[4] [0]));
  CDN_flop \FIFO_g1_C_reg[4][1] (.clk (CLK_C), .d (DATA_gain_01[1]),
       .sena (n_822), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[4] [1]));
  CDN_flop \FIFO_g1_C_reg[4][2] (.clk (CLK_C), .d (DATA_gain_01[2]),
       .sena (n_822), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[4] [2]));
  CDN_flop \FIFO_g1_C_reg[4][3] (.clk (CLK_C), .d (DATA_gain_01[3]),
       .sena (n_822), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[4] [3]));
  CDN_flop \FIFO_g1_C_reg[4][4] (.clk (CLK_C), .d (DATA_gain_01[4]),
       .sena (n_822), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[4] [4]));
  CDN_flop \FIFO_g1_C_reg[4][5] (.clk (CLK_C), .d (DATA_gain_01[5]),
       .sena (n_822), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[4] [5]));
  CDN_flop \FIFO_g1_C_reg[4][6] (.clk (CLK_C), .d (DATA_gain_01[6]),
       .sena (n_822), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[4] [6]));
  CDN_flop \FIFO_g1_C_reg[4][7] (.clk (CLK_C), .d (DATA_gain_01[7]),
       .sena (n_822), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[4] [7]));
  CDN_flop \FIFO_g1_C_reg[4][8] (.clk (CLK_C), .d (DATA_gain_01[8]),
       .sena (n_822), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[4] [8]));
  CDN_flop \FIFO_g1_C_reg[4][9] (.clk (CLK_C), .d (DATA_gain_01[9]),
       .sena (n_822), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[4] [9]));
  CDN_flop \FIFO_g1_C_reg[4][10] (.clk (CLK_C), .d (DATA_gain_01[10]),
       .sena (n_822), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[4] [10]));
  CDN_flop \FIFO_g1_C_reg[4][11] (.clk (CLK_C), .d (DATA_gain_01[11]),
       .sena (n_822), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[4] [11]));
  CDN_flop \FIFO_g1_C_reg[5][0] (.clk (CLK_C), .d (DATA_gain_01[0]),
       .sena (n_823), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[5] [0]));
  CDN_flop \FIFO_g1_C_reg[5][1] (.clk (CLK_C), .d (DATA_gain_01[1]),
       .sena (n_823), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[5] [1]));
  CDN_flop \FIFO_g1_C_reg[5][2] (.clk (CLK_C), .d (DATA_gain_01[2]),
       .sena (n_823), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[5] [2]));
  CDN_flop \FIFO_g1_C_reg[5][3] (.clk (CLK_C), .d (DATA_gain_01[3]),
       .sena (n_823), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[5] [3]));
  CDN_flop \FIFO_g1_C_reg[5][4] (.clk (CLK_C), .d (DATA_gain_01[4]),
       .sena (n_823), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[5] [4]));
  CDN_flop \FIFO_g1_C_reg[5][5] (.clk (CLK_C), .d (DATA_gain_01[5]),
       .sena (n_823), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[5] [5]));
  CDN_flop \FIFO_g1_C_reg[5][6] (.clk (CLK_C), .d (DATA_gain_01[6]),
       .sena (n_823), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[5] [6]));
  CDN_flop \FIFO_g1_C_reg[5][7] (.clk (CLK_C), .d (DATA_gain_01[7]),
       .sena (n_823), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[5] [7]));
  CDN_flop \FIFO_g1_C_reg[5][8] (.clk (CLK_C), .d (DATA_gain_01[8]),
       .sena (n_823), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[5] [8]));
  CDN_flop \FIFO_g1_C_reg[5][9] (.clk (CLK_C), .d (DATA_gain_01[9]),
       .sena (n_823), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[5] [9]));
  CDN_flop \FIFO_g1_C_reg[5][10] (.clk (CLK_C), .d (DATA_gain_01[10]),
       .sena (n_823), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[5] [10]));
  CDN_flop \FIFO_g1_C_reg[5][11] (.clk (CLK_C), .d (DATA_gain_01[11]),
       .sena (n_823), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[5] [11]));
  CDN_flop \FIFO_g1_C_reg[6][0] (.clk (CLK_C), .d (DATA_gain_01[0]),
       .sena (n_824), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[6] [0]));
  CDN_flop \FIFO_g1_C_reg[6][1] (.clk (CLK_C), .d (DATA_gain_01[1]),
       .sena (n_824), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[6] [1]));
  CDN_flop \FIFO_g1_C_reg[6][2] (.clk (CLK_C), .d (DATA_gain_01[2]),
       .sena (n_824), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[6] [2]));
  CDN_flop \FIFO_g1_C_reg[6][3] (.clk (CLK_C), .d (DATA_gain_01[3]),
       .sena (n_824), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[6] [3]));
  CDN_flop \FIFO_g1_C_reg[6][4] (.clk (CLK_C), .d (DATA_gain_01[4]),
       .sena (n_824), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[6] [4]));
  CDN_flop \FIFO_g1_C_reg[6][5] (.clk (CLK_C), .d (DATA_gain_01[5]),
       .sena (n_824), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[6] [5]));
  CDN_flop \FIFO_g1_C_reg[6][6] (.clk (CLK_C), .d (DATA_gain_01[6]),
       .sena (n_824), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[6] [6]));
  CDN_flop \FIFO_g1_C_reg[6][7] (.clk (CLK_C), .d (DATA_gain_01[7]),
       .sena (n_824), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[6] [7]));
  CDN_flop \FIFO_g1_C_reg[6][8] (.clk (CLK_C), .d (DATA_gain_01[8]),
       .sena (n_824), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[6] [8]));
  CDN_flop \FIFO_g1_C_reg[6][9] (.clk (CLK_C), .d (DATA_gain_01[9]),
       .sena (n_824), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[6] [9]));
  CDN_flop \FIFO_g1_C_reg[6][10] (.clk (CLK_C), .d (DATA_gain_01[10]),
       .sena (n_824), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[6] [10]));
  CDN_flop \FIFO_g1_C_reg[6][11] (.clk (CLK_C), .d (DATA_gain_01[11]),
       .sena (n_824), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[6] [11]));
  CDN_flop \FIFO_g1_C_reg[7][0] (.clk (CLK_C), .d (DATA_gain_01[0]),
       .sena (n_825), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[7] [0]));
  CDN_flop \FIFO_g1_C_reg[7][1] (.clk (CLK_C), .d (DATA_gain_01[1]),
       .sena (n_825), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[7] [1]));
  CDN_flop \FIFO_g1_C_reg[7][2] (.clk (CLK_C), .d (DATA_gain_01[2]),
       .sena (n_825), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[7] [2]));
  CDN_flop \FIFO_g1_C_reg[7][3] (.clk (CLK_C), .d (DATA_gain_01[3]),
       .sena (n_825), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[7] [3]));
  CDN_flop \FIFO_g1_C_reg[7][4] (.clk (CLK_C), .d (DATA_gain_01[4]),
       .sena (n_825), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[7] [4]));
  CDN_flop \FIFO_g1_C_reg[7][5] (.clk (CLK_C), .d (DATA_gain_01[5]),
       .sena (n_825), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[7] [5]));
  CDN_flop \FIFO_g1_C_reg[7][6] (.clk (CLK_C), .d (DATA_gain_01[6]),
       .sena (n_825), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[7] [6]));
  CDN_flop \FIFO_g1_C_reg[7][7] (.clk (CLK_C), .d (DATA_gain_01[7]),
       .sena (n_825), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[7] [7]));
  CDN_flop \FIFO_g1_C_reg[7][8] (.clk (CLK_C), .d (DATA_gain_01[8]),
       .sena (n_825), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[7] [8]));
  CDN_flop \FIFO_g1_C_reg[7][9] (.clk (CLK_C), .d (DATA_gain_01[9]),
       .sena (n_825), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[7] [9]));
  CDN_flop \FIFO_g1_C_reg[7][10] (.clk (CLK_C), .d (DATA_gain_01[10]),
       .sena (n_825), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[7] [10]));
  CDN_flop \FIFO_g1_C_reg[7][11] (.clk (CLK_C), .d (DATA_gain_01[11]),
       .sena (n_825), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g1_C[7] [11]));
  CDN_flop \FIFO_g10_C_reg[0][0] (.clk (CLK_C), .d (DATA_gain_10[0]),
       .sena (n_818), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[0] [0]));
  CDN_flop \FIFO_g10_C_reg[0][1] (.clk (CLK_C), .d (DATA_gain_10[1]),
       .sena (n_818), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[0] [1]));
  CDN_flop \FIFO_g10_C_reg[0][2] (.clk (CLK_C), .d (DATA_gain_10[2]),
       .sena (n_818), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[0] [2]));
  CDN_flop \FIFO_g10_C_reg[0][3] (.clk (CLK_C), .d (DATA_gain_10[3]),
       .sena (n_818), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[0] [3]));
  CDN_flop \FIFO_g10_C_reg[0][4] (.clk (CLK_C), .d (DATA_gain_10[4]),
       .sena (n_818), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[0] [4]));
  CDN_flop \FIFO_g10_C_reg[0][5] (.clk (CLK_C), .d (DATA_gain_10[5]),
       .sena (n_818), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[0] [5]));
  CDN_flop \FIFO_g10_C_reg[0][6] (.clk (CLK_C), .d (DATA_gain_10[6]),
       .sena (n_818), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[0] [6]));
  CDN_flop \FIFO_g10_C_reg[0][7] (.clk (CLK_C), .d (DATA_gain_10[7]),
       .sena (n_818), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[0] [7]));
  CDN_flop \FIFO_g10_C_reg[0][8] (.clk (CLK_C), .d (DATA_gain_10[8]),
       .sena (n_818), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[0] [8]));
  CDN_flop \FIFO_g10_C_reg[0][9] (.clk (CLK_C), .d (DATA_gain_10[9]),
       .sena (n_818), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[0] [9]));
  CDN_flop \FIFO_g10_C_reg[0][10] (.clk (CLK_C), .d (DATA_gain_10[10]),
       .sena (n_818), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[0] [10]));
  CDN_flop \FIFO_g10_C_reg[0][11] (.clk (CLK_C), .d (DATA_gain_10[11]),
       .sena (n_818), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[0] [11]));
  CDN_flop \FIFO_g10_C_reg[1][0] (.clk (CLK_C), .d (DATA_gain_10[0]),
       .sena (n_819), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[1] [0]));
  CDN_flop \FIFO_g10_C_reg[1][1] (.clk (CLK_C), .d (DATA_gain_10[1]),
       .sena (n_819), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[1] [1]));
  CDN_flop \FIFO_g10_C_reg[1][2] (.clk (CLK_C), .d (DATA_gain_10[2]),
       .sena (n_819), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[1] [2]));
  CDN_flop \FIFO_g10_C_reg[1][3] (.clk (CLK_C), .d (DATA_gain_10[3]),
       .sena (n_819), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[1] [3]));
  CDN_flop \FIFO_g10_C_reg[1][4] (.clk (CLK_C), .d (DATA_gain_10[4]),
       .sena (n_819), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[1] [4]));
  CDN_flop \FIFO_g10_C_reg[1][5] (.clk (CLK_C), .d (DATA_gain_10[5]),
       .sena (n_819), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[1] [5]));
  CDN_flop \FIFO_g10_C_reg[1][6] (.clk (CLK_C), .d (DATA_gain_10[6]),
       .sena (n_819), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[1] [6]));
  CDN_flop \FIFO_g10_C_reg[1][7] (.clk (CLK_C), .d (DATA_gain_10[7]),
       .sena (n_819), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[1] [7]));
  CDN_flop \FIFO_g10_C_reg[1][8] (.clk (CLK_C), .d (DATA_gain_10[8]),
       .sena (n_819), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[1] [8]));
  CDN_flop \FIFO_g10_C_reg[1][9] (.clk (CLK_C), .d (DATA_gain_10[9]),
       .sena (n_819), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[1] [9]));
  CDN_flop \FIFO_g10_C_reg[1][10] (.clk (CLK_C), .d (DATA_gain_10[10]),
       .sena (n_819), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[1] [10]));
  CDN_flop \FIFO_g10_C_reg[1][11] (.clk (CLK_C), .d (DATA_gain_10[11]),
       .sena (n_819), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[1] [11]));
  CDN_flop \FIFO_g10_C_reg[2][0] (.clk (CLK_C), .d (DATA_gain_10[0]),
       .sena (n_820), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[2] [0]));
  CDN_flop \FIFO_g10_C_reg[2][1] (.clk (CLK_C), .d (DATA_gain_10[1]),
       .sena (n_820), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[2] [1]));
  CDN_flop \FIFO_g10_C_reg[2][2] (.clk (CLK_C), .d (DATA_gain_10[2]),
       .sena (n_820), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[2] [2]));
  CDN_flop \FIFO_g10_C_reg[2][3] (.clk (CLK_C), .d (DATA_gain_10[3]),
       .sena (n_820), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[2] [3]));
  CDN_flop \FIFO_g10_C_reg[2][4] (.clk (CLK_C), .d (DATA_gain_10[4]),
       .sena (n_820), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[2] [4]));
  CDN_flop \FIFO_g10_C_reg[2][5] (.clk (CLK_C), .d (DATA_gain_10[5]),
       .sena (n_820), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[2] [5]));
  CDN_flop \FIFO_g10_C_reg[2][6] (.clk (CLK_C), .d (DATA_gain_10[6]),
       .sena (n_820), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[2] [6]));
  CDN_flop \FIFO_g10_C_reg[2][7] (.clk (CLK_C), .d (DATA_gain_10[7]),
       .sena (n_820), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[2] [7]));
  CDN_flop \FIFO_g10_C_reg[2][8] (.clk (CLK_C), .d (DATA_gain_10[8]),
       .sena (n_820), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[2] [8]));
  CDN_flop \FIFO_g10_C_reg[2][9] (.clk (CLK_C), .d (DATA_gain_10[9]),
       .sena (n_820), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[2] [9]));
  CDN_flop \FIFO_g10_C_reg[2][10] (.clk (CLK_C), .d (DATA_gain_10[10]),
       .sena (n_820), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[2] [10]));
  CDN_flop \FIFO_g10_C_reg[2][11] (.clk (CLK_C), .d (DATA_gain_10[11]),
       .sena (n_820), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[2] [11]));
  CDN_flop \FIFO_g10_C_reg[3][0] (.clk (CLK_C), .d (DATA_gain_10[0]),
       .sena (n_821), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[3] [0]));
  CDN_flop \FIFO_g10_C_reg[3][1] (.clk (CLK_C), .d (DATA_gain_10[1]),
       .sena (n_821), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[3] [1]));
  CDN_flop \FIFO_g10_C_reg[3][2] (.clk (CLK_C), .d (DATA_gain_10[2]),
       .sena (n_821), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[3] [2]));
  CDN_flop \FIFO_g10_C_reg[3][3] (.clk (CLK_C), .d (DATA_gain_10[3]),
       .sena (n_821), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[3] [3]));
  CDN_flop \FIFO_g10_C_reg[3][4] (.clk (CLK_C), .d (DATA_gain_10[4]),
       .sena (n_821), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[3] [4]));
  CDN_flop \FIFO_g10_C_reg[3][5] (.clk (CLK_C), .d (DATA_gain_10[5]),
       .sena (n_821), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[3] [5]));
  CDN_flop \FIFO_g10_C_reg[3][6] (.clk (CLK_C), .d (DATA_gain_10[6]),
       .sena (n_821), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[3] [6]));
  CDN_flop \FIFO_g10_C_reg[3][7] (.clk (CLK_C), .d (DATA_gain_10[7]),
       .sena (n_821), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[3] [7]));
  CDN_flop \FIFO_g10_C_reg[3][8] (.clk (CLK_C), .d (DATA_gain_10[8]),
       .sena (n_821), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[3] [8]));
  CDN_flop \FIFO_g10_C_reg[3][9] (.clk (CLK_C), .d (DATA_gain_10[9]),
       .sena (n_821), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[3] [9]));
  CDN_flop \FIFO_g10_C_reg[3][10] (.clk (CLK_C), .d (DATA_gain_10[10]),
       .sena (n_821), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[3] [10]));
  CDN_flop \FIFO_g10_C_reg[3][11] (.clk (CLK_C), .d (DATA_gain_10[11]),
       .sena (n_821), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[3] [11]));
  CDN_flop \FIFO_g10_C_reg[4][0] (.clk (CLK_C), .d (DATA_gain_10[0]),
       .sena (n_822), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[4] [0]));
  CDN_flop \FIFO_g10_C_reg[4][1] (.clk (CLK_C), .d (DATA_gain_10[1]),
       .sena (n_822), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[4] [1]));
  CDN_flop \FIFO_g10_C_reg[4][2] (.clk (CLK_C), .d (DATA_gain_10[2]),
       .sena (n_822), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[4] [2]));
  CDN_flop \FIFO_g10_C_reg[4][3] (.clk (CLK_C), .d (DATA_gain_10[3]),
       .sena (n_822), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[4] [3]));
  CDN_flop \FIFO_g10_C_reg[4][4] (.clk (CLK_C), .d (DATA_gain_10[4]),
       .sena (n_822), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[4] [4]));
  CDN_flop \FIFO_g10_C_reg[4][5] (.clk (CLK_C), .d (DATA_gain_10[5]),
       .sena (n_822), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[4] [5]));
  CDN_flop \FIFO_g10_C_reg[4][6] (.clk (CLK_C), .d (DATA_gain_10[6]),
       .sena (n_822), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[4] [6]));
  CDN_flop \FIFO_g10_C_reg[4][7] (.clk (CLK_C), .d (DATA_gain_10[7]),
       .sena (n_822), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[4] [7]));
  CDN_flop \FIFO_g10_C_reg[4][8] (.clk (CLK_C), .d (DATA_gain_10[8]),
       .sena (n_822), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[4] [8]));
  CDN_flop \FIFO_g10_C_reg[4][9] (.clk (CLK_C), .d (DATA_gain_10[9]),
       .sena (n_822), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[4] [9]));
  CDN_flop \FIFO_g10_C_reg[4][10] (.clk (CLK_C), .d (DATA_gain_10[10]),
       .sena (n_822), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[4] [10]));
  CDN_flop \FIFO_g10_C_reg[4][11] (.clk (CLK_C), .d (DATA_gain_10[11]),
       .sena (n_822), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[4] [11]));
  CDN_flop \FIFO_g10_C_reg[5][0] (.clk (CLK_C), .d (DATA_gain_10[0]),
       .sena (n_823), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[5] [0]));
  CDN_flop \FIFO_g10_C_reg[5][1] (.clk (CLK_C), .d (DATA_gain_10[1]),
       .sena (n_823), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[5] [1]));
  CDN_flop \FIFO_g10_C_reg[5][2] (.clk (CLK_C), .d (DATA_gain_10[2]),
       .sena (n_823), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[5] [2]));
  CDN_flop \FIFO_g10_C_reg[5][3] (.clk (CLK_C), .d (DATA_gain_10[3]),
       .sena (n_823), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[5] [3]));
  CDN_flop \FIFO_g10_C_reg[5][4] (.clk (CLK_C), .d (DATA_gain_10[4]),
       .sena (n_823), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[5] [4]));
  CDN_flop \FIFO_g10_C_reg[5][5] (.clk (CLK_C), .d (DATA_gain_10[5]),
       .sena (n_823), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[5] [5]));
  CDN_flop \FIFO_g10_C_reg[5][6] (.clk (CLK_C), .d (DATA_gain_10[6]),
       .sena (n_823), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[5] [6]));
  CDN_flop \FIFO_g10_C_reg[5][7] (.clk (CLK_C), .d (DATA_gain_10[7]),
       .sena (n_823), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[5] [7]));
  CDN_flop \FIFO_g10_C_reg[5][8] (.clk (CLK_C), .d (DATA_gain_10[8]),
       .sena (n_823), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[5] [8]));
  CDN_flop \FIFO_g10_C_reg[5][9] (.clk (CLK_C), .d (DATA_gain_10[9]),
       .sena (n_823), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[5] [9]));
  CDN_flop \FIFO_g10_C_reg[5][10] (.clk (CLK_C), .d (DATA_gain_10[10]),
       .sena (n_823), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[5] [10]));
  CDN_flop \FIFO_g10_C_reg[5][11] (.clk (CLK_C), .d (DATA_gain_10[11]),
       .sena (n_823), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[5] [11]));
  CDN_flop \FIFO_g10_C_reg[6][0] (.clk (CLK_C), .d (DATA_gain_10[0]),
       .sena (n_824), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[6] [0]));
  CDN_flop \FIFO_g10_C_reg[6][1] (.clk (CLK_C), .d (DATA_gain_10[1]),
       .sena (n_824), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[6] [1]));
  CDN_flop \FIFO_g10_C_reg[6][2] (.clk (CLK_C), .d (DATA_gain_10[2]),
       .sena (n_824), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[6] [2]));
  CDN_flop \FIFO_g10_C_reg[6][3] (.clk (CLK_C), .d (DATA_gain_10[3]),
       .sena (n_824), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[6] [3]));
  CDN_flop \FIFO_g10_C_reg[6][4] (.clk (CLK_C), .d (DATA_gain_10[4]),
       .sena (n_824), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[6] [4]));
  CDN_flop \FIFO_g10_C_reg[6][5] (.clk (CLK_C), .d (DATA_gain_10[5]),
       .sena (n_824), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[6] [5]));
  CDN_flop \FIFO_g10_C_reg[6][6] (.clk (CLK_C), .d (DATA_gain_10[6]),
       .sena (n_824), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[6] [6]));
  CDN_flop \FIFO_g10_C_reg[6][7] (.clk (CLK_C), .d (DATA_gain_10[7]),
       .sena (n_824), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[6] [7]));
  CDN_flop \FIFO_g10_C_reg[6][8] (.clk (CLK_C), .d (DATA_gain_10[8]),
       .sena (n_824), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[6] [8]));
  CDN_flop \FIFO_g10_C_reg[6][9] (.clk (CLK_C), .d (DATA_gain_10[9]),
       .sena (n_824), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[6] [9]));
  CDN_flop \FIFO_g10_C_reg[6][10] (.clk (CLK_C), .d (DATA_gain_10[10]),
       .sena (n_824), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[6] [10]));
  CDN_flop \FIFO_g10_C_reg[6][11] (.clk (CLK_C), .d (DATA_gain_10[11]),
       .sena (n_824), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[6] [11]));
  CDN_flop \FIFO_g10_C_reg[7][0] (.clk (CLK_C), .d (DATA_gain_10[0]),
       .sena (n_825), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[7] [0]));
  CDN_flop \FIFO_g10_C_reg[7][1] (.clk (CLK_C), .d (DATA_gain_10[1]),
       .sena (n_825), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[7] [1]));
  CDN_flop \FIFO_g10_C_reg[7][2] (.clk (CLK_C), .d (DATA_gain_10[2]),
       .sena (n_825), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[7] [2]));
  CDN_flop \FIFO_g10_C_reg[7][3] (.clk (CLK_C), .d (DATA_gain_10[3]),
       .sena (n_825), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[7] [3]));
  CDN_flop \FIFO_g10_C_reg[7][4] (.clk (CLK_C), .d (DATA_gain_10[4]),
       .sena (n_825), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[7] [4]));
  CDN_flop \FIFO_g10_C_reg[7][5] (.clk (CLK_C), .d (DATA_gain_10[5]),
       .sena (n_825), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[7] [5]));
  CDN_flop \FIFO_g10_C_reg[7][6] (.clk (CLK_C), .d (DATA_gain_10[6]),
       .sena (n_825), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[7] [6]));
  CDN_flop \FIFO_g10_C_reg[7][7] (.clk (CLK_C), .d (DATA_gain_10[7]),
       .sena (n_825), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[7] [7]));
  CDN_flop \FIFO_g10_C_reg[7][8] (.clk (CLK_C), .d (DATA_gain_10[8]),
       .sena (n_825), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[7] [8]));
  CDN_flop \FIFO_g10_C_reg[7][9] (.clk (CLK_C), .d (DATA_gain_10[9]),
       .sena (n_825), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[7] [9]));
  CDN_flop \FIFO_g10_C_reg[7][10] (.clk (CLK_C), .d (DATA_gain_10[10]),
       .sena (n_825), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[7] [10]));
  CDN_flop \FIFO_g10_C_reg[7][11] (.clk (CLK_C), .d (DATA_gain_10[11]),
       .sena (n_825), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd
       (1'b0), .q (\FIFO_g10_C[7] [11]));
  CDN_flop \gain_sel_A_reg[0] (.clk (CLK_A), .d (n_765), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_2745), .srd (reset_A), .q
       (gain_sel_A[0]));
  CDN_flop \gain_sel_A_reg[1] (.clk (CLK_A), .d (gain_sel_A[0]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd (1'b0),
       .q (gain_sel_A[1]));
  CDN_flop \gain_sel_A_reg[2] (.clk (CLK_A), .d (gain_sel_A[1]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd (1'b0),
       .q (gain_sel_A[2]));
  CDN_flop \gain_sel_A_reg[3] (.clk (CLK_A), .d (gain_sel_A[2]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd (1'b0),
       .q (gain_sel_A[3]));
  CDN_flop \gain_sel_A_reg[4] (.clk (CLK_A), .d (gain_sel_A[3]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd (1'b0),
       .q (gain_sel_A[4]));
  CDN_flop \gain_sel_A_reg[5] (.clk (CLK_A), .d (gain_sel_A[4]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd (1'b0),
       .q (gain_sel_A[5]));
  CDN_flop \gain_sel_A_reg[6] (.clk (CLK_A), .d (gain_sel_A[5]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd (1'b0),
       .q (gain_sel_A[6]));
  CDN_flop \gain_sel_A_reg[7] (.clk (CLK_A), .d (gain_sel_A[6]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_757), .srd (1'b0),
       .q (gain_sel_A[7]));
  or g1214 (n_2745, n_757, n_835);
  CDN_flop \gain_sel_B_reg[0] (.clk (CLK_B), .d (n_756), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_2771), .srd (reset_B), .q
       (gain_sel_B[0]));
  CDN_flop \gain_sel_B_reg[1] (.clk (CLK_B), .d (gain_sel_B[0]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd (1'b0),
       .q (gain_sel_B[1]));
  CDN_flop \gain_sel_B_reg[2] (.clk (CLK_B), .d (gain_sel_B[1]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd (1'b0),
       .q (gain_sel_B[2]));
  CDN_flop \gain_sel_B_reg[3] (.clk (CLK_B), .d (gain_sel_B[2]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd (1'b0),
       .q (gain_sel_B[3]));
  CDN_flop \gain_sel_B_reg[4] (.clk (CLK_B), .d (gain_sel_B[3]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd (1'b0),
       .q (gain_sel_B[4]));
  CDN_flop \gain_sel_B_reg[5] (.clk (CLK_B), .d (gain_sel_B[4]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd (1'b0),
       .q (gain_sel_B[5]));
  CDN_flop \gain_sel_B_reg[6] (.clk (CLK_B), .d (gain_sel_B[5]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd (1'b0),
       .q (gain_sel_B[6]));
  CDN_flop \gain_sel_B_reg[7] (.clk (CLK_B), .d (gain_sel_B[6]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_748), .srd (1'b0),
       .q (gain_sel_B[7]));
  or g1216 (n_2771, n_748, n_837);
  CDN_flop \gain_sel_C_reg[0] (.clk (CLK_C), .d (n_747), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_2797), .srd (reset_C), .q
       (gain_sel_C[0]));
  CDN_flop \gain_sel_C_reg[1] (.clk (CLK_C), .d (gain_sel_C[0]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd (1'b0),
       .q (gain_sel_C[1]));
  CDN_flop \gain_sel_C_reg[2] (.clk (CLK_C), .d (gain_sel_C[1]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd (1'b0),
       .q (gain_sel_C[2]));
  CDN_flop \gain_sel_C_reg[3] (.clk (CLK_C), .d (gain_sel_C[2]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd (1'b0),
       .q (gain_sel_C[3]));
  CDN_flop \gain_sel_C_reg[4] (.clk (CLK_C), .d (gain_sel_C[3]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd (1'b0),
       .q (gain_sel_C[4]));
  CDN_flop \gain_sel_C_reg[5] (.clk (CLK_C), .d (gain_sel_C[4]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd (1'b0),
       .q (gain_sel_C[5]));
  CDN_flop \gain_sel_C_reg[6] (.clk (CLK_C), .d (gain_sel_C[5]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd (1'b0),
       .q (gain_sel_C[6]));
  CDN_flop \gain_sel_C_reg[7] (.clk (CLK_C), .d (gain_sel_C[6]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_715), .srd (1'b0),
       .q (gain_sel_C[7]));
  or g1218 (n_2797, n_715, n_839);
  nand g1225 (n_2801, GAIN_SEL_MODE_A[1], GAIN_SEL_MODE_A[0]);
  not g1226 (n_758, n_2801);
  nand g1229 (n_2804, GAIN_SEL_MODE_A[1], n_2803);
  not g1230 (n_759, n_2804);
  nand g1233 (n_2807, GAIN_SEL_MODE_B[1], GAIN_SEL_MODE_B[0]);
  not g1234 (n_749, n_2807);
  nand g1237 (n_2810, GAIN_SEL_MODE_B[1], n_2809);
  not g1238 (n_750, n_2810);
  nand g1241 (n_2813, GAIN_SEL_MODE_C[1], GAIN_SEL_MODE_C[0]);
  not g1242 (n_716, n_2813);
  nand g1245 (n_2816, GAIN_SEL_MODE_C[1], n_2815);
  not g1246 (n_717, n_2816);
  nor g1248 (n_2818, gain_sel_A[7], gain_sel_A[6], gain_sel_A[5],
       gain_sel_A[4]);
  nor g1249 (n_2819, gain_sel_A[3], gain_sel_A[2], gain_sel_A[1]);
  nand g1250 (n_2820, n_2817, n_2818, n_2819);
  not g1251 (n_766, n_2820);
  nor g1253 (n_2822, gain_sel_B[7], gain_sel_B[6], gain_sel_B[5],
       gain_sel_B[4]);
  nor g1254 (n_2823, gain_sel_B[3], gain_sel_B[2], gain_sel_B[1]);
  nand g1255 (n_2824, n_2821, n_2822, n_2823);
  not g1256 (n_767, n_2824);
  nor g1258 (n_2826, gain_sel_C[7], gain_sel_C[6], gain_sel_C[5],
       gain_sel_C[4]);
  nor g1259 (n_2827, gain_sel_C[3], gain_sel_C[2], gain_sel_C[1]);
  nand g1260 (n_2828, n_2825, n_2826, n_2827);
  not g1261 (n_768, n_2828);
  nor g1264 (n_2830, DATA_to_enc_A[12], DATA_to_enc_A[11],
       DATA_to_enc_A[10], DATA_to_enc_A[9]);
  nor g1265 (n_2831, DATA_to_enc_A[8], DATA_to_enc_A[7]);
  nand g1266 (n_2832, n_2829, n_2830, n_2831);
  not g1267 (n_770, n_2832);
  nor g1269 (n_2835, DATA_to_enc_A[11], DATA_to_enc_A[10],
       DATA_to_enc_A[9], DATA_to_enc_A[8]);
  not g1270 (n_2833, DATA_to_enc_A[7]);
  nand g1271 (n_2836, n_2833, n_2829, n_2835);
  not g1272 (n_771, n_2836);
  nor g1275 (n_2838, DATA_to_enc_B[12], DATA_to_enc_B[11],
       DATA_to_enc_B[10], DATA_to_enc_B[9]);
  nor g1276 (n_2839, DATA_to_enc_B[8], DATA_to_enc_B[7]);
  nand g1277 (n_2840, n_2837, n_2838, n_2839);
  not g1278 (n_774, n_2840);
  nor g1280 (n_2843, DATA_to_enc_B[11], DATA_to_enc_B[10],
       DATA_to_enc_B[9], DATA_to_enc_B[8]);
  not g1281 (n_2841, DATA_to_enc_B[7]);
  nand g1282 (n_2844, n_2841, n_2837, n_2843);
  not g1283 (n_775, n_2844);
  nor g1286 (n_2846, DATA_to_enc_C[12], DATA_to_enc_C[11],
       DATA_to_enc_C[10], DATA_to_enc_C[9]);
  nor g1287 (n_2847, DATA_to_enc_C[8], DATA_to_enc_C[7]);
  nand g1288 (n_2848, n_2845, n_2846, n_2847);
  not g1289 (n_778, n_2848);
  nor g1291 (n_2851, DATA_to_enc_C[11], DATA_to_enc_C[10],
       DATA_to_enc_C[9], DATA_to_enc_C[8]);
  not g1292 (n_2849, DATA_to_enc_C[7]);
  nand g1293 (n_2852, n_2849, n_2845, n_2851);
  not g1294 (n_779, n_2852);
  not g1295 (n_715, reset_C);
  not g1296 (n_2815, GAIN_SEL_MODE_C[0]);
  not g1297 (n_748, reset_B);
  not g1298 (n_2809, GAIN_SEL_MODE_B[0]);
  not g1299 (n_757, reset_A);
  not g1300 (n_2803, GAIN_SEL_MODE_A[0]);
  not g1301 (n_2817, gain_sel_A[0]);
  not g1302 (n_2821, gain_sel_B[0]);
  not g1303 (n_2825, gain_sel_C[0]);
  not g1304 (n_769, GAIN_SEL_MODE_A[1]);
  not g1305 (n_2829, DATA_to_enc_A[6]);
  not g1306 (n_773, GAIN_SEL_MODE_B[1]);
  not g1307 (n_2837, DATA_to_enc_B[6]);
  not g1308 (n_777, GAIN_SEL_MODE_C[1]);
  not g1309 (n_2845, DATA_to_enc_C[6]);
  nand g1 (n_25, n_61, n_62, n_63);
  nand g2 (n_27, n_61, n_62, wr_ptr_A[0]);
  nand g3 (n_64, n_61, wr_ptr_A[1], n_63);
  nand g4 (n_65, n_61, wr_ptr_A[1], wr_ptr_A[0]);
  nand g5 (n_66, wr_ptr_A[2], n_62, n_63);
  nand g6 (n_67, wr_ptr_A[2], n_62, wr_ptr_A[0]);
  nand g7 (n_68, wr_ptr_A[2], wr_ptr_A[1], n_63);
  nand g8 (n_39, wr_ptr_A[2], wr_ptr_A[1], wr_ptr_A[0]);
  not g9 (n_786, n_25);
  not g10 (n_787, n_27);
  not g11 (n_788, n_64);
  not g12 (n_789, n_65);
  not g13 (n_790, n_66);
  not g14 (n_791, n_67);
  not g15 (n_792, n_68);
  not g16 (n_793, n_39);
  not g21 (n_61, wr_ptr_A[2]);
  not g22 (n_62, wr_ptr_A[1]);
  not g23 (n_63, wr_ptr_A[0]);
  nand g1335 (n_2873, n_2870, n_2871, n_2872);
  nand g1336 (n_2874, n_2870, n_2871, wr_ptr_B[0]);
  nand g1337 (n_2875, n_2870, wr_ptr_B[1], n_2872);
  nand g1338 (n_2876, n_2870, wr_ptr_B[1], wr_ptr_B[0]);
  nand g1339 (n_2877, wr_ptr_B[2], n_2871, n_2872);
  nand g1340 (n_2878, wr_ptr_B[2], n_2871, wr_ptr_B[0]);
  nand g1341 (n_2879, wr_ptr_B[2], wr_ptr_B[1], n_2872);
  nand g1342 (n_2880, wr_ptr_B[2], wr_ptr_B[1], wr_ptr_B[0]);
  not g1343 (n_802, n_2873);
  not g1344 (n_803, n_2874);
  not g1345 (n_804, n_2875);
  not g1346 (n_805, n_2876);
  not g1347 (n_806, n_2877);
  not g1348 (n_807, n_2878);
  not g1349 (n_808, n_2879);
  not g1350 (n_809, n_2880);
  not g1351 (n_2870, wr_ptr_B[2]);
  not g1352 (n_2871, wr_ptr_B[1]);
  not g1353 (n_2872, wr_ptr_B[0]);
  nand g1379 (n_2901, n_2898, n_2899, n_2900);
  nand g1380 (n_2902, n_2898, n_2899, wr_ptr_C[0]);
  nand g1381 (n_2903, n_2898, wr_ptr_C[1], n_2900);
  nand g1382 (n_2904, n_2898, wr_ptr_C[1], wr_ptr_C[0]);
  nand g1383 (n_2905, wr_ptr_C[2], n_2899, n_2900);
  nand g1384 (n_2906, wr_ptr_C[2], n_2899, wr_ptr_C[0]);
  nand g1385 (n_2907, wr_ptr_C[2], wr_ptr_C[1], n_2900);
  nand g1386 (n_2908, wr_ptr_C[2], wr_ptr_C[1], wr_ptr_C[0]);
  not g1387 (n_818, n_2901);
  not g1388 (n_819, n_2902);
  not g1389 (n_820, n_2903);
  not g1390 (n_821, n_2904);
  not g1391 (n_822, n_2905);
  not g1392 (n_823, n_2906);
  not g1393 (n_824, n_2907);
  not g1394 (n_825, n_2908);
  not g1395 (n_2898, wr_ptr_C[2]);
  not g1396 (n_2899, wr_ptr_C[1]);
  not g1397 (n_2900, wr_ptr_C[0]);
endmodule

module Delay_enc(clk, reset, D, Dd);
  input clk, reset;
  input [12:0] D;
  output [12:0] Dd;
  wire clk, reset;
  wire [12:0] D;
  wire [12:0] Dd;
  wire UNCONNECTED716, UNCONNECTED717, UNCONNECTED718, UNCONNECTED719,
       UNCONNECTED720, UNCONNECTED721, UNCONNECTED722, UNCONNECTED723;
  wire UNCONNECTED724, UNCONNECTED725, UNCONNECTED726, UNCONNECTED727,
       UNCONNECTED728, n_15;
  bmux_169 mux_Dd_496_13(.ctl (n_15), .in_0 (D), .in_1
       (13'b0000000000000), .z ({UNCONNECTED728, UNCONNECTED727,
       UNCONNECTED726, UNCONNECTED725, UNCONNECTED724, UNCONNECTED723,
       UNCONNECTED722, UNCONNECTED721, UNCONNECTED720, UNCONNECTED719,
       UNCONNECTED718, UNCONNECTED717, UNCONNECTED716}));
  CDN_flop \Dd_reg[0] (.clk (clk), .d (D[0]), .sena (1'b1), .aclr
       (1'b0), .apre (1'b0), .srl (n_15), .srd (1'b0), .q (Dd[0]));
  CDN_flop \Dd_reg[1] (.clk (clk), .d (D[1]), .sena (1'b1), .aclr
       (1'b0), .apre (1'b0), .srl (n_15), .srd (1'b0), .q (Dd[1]));
  CDN_flop \Dd_reg[2] (.clk (clk), .d (D[2]), .sena (1'b1), .aclr
       (1'b0), .apre (1'b0), .srl (n_15), .srd (1'b0), .q (Dd[2]));
  CDN_flop \Dd_reg[3] (.clk (clk), .d (D[3]), .sena (1'b1), .aclr
       (1'b0), .apre (1'b0), .srl (n_15), .srd (1'b0), .q (Dd[3]));
  CDN_flop \Dd_reg[4] (.clk (clk), .d (D[4]), .sena (1'b1), .aclr
       (1'b0), .apre (1'b0), .srl (n_15), .srd (1'b0), .q (Dd[4]));
  CDN_flop \Dd_reg[5] (.clk (clk), .d (D[5]), .sena (1'b1), .aclr
       (1'b0), .apre (1'b0), .srl (n_15), .srd (1'b0), .q (Dd[5]));
  CDN_flop \Dd_reg[6] (.clk (clk), .d (D[6]), .sena (1'b1), .aclr
       (1'b0), .apre (1'b0), .srl (n_15), .srd (1'b0), .q (Dd[6]));
  CDN_flop \Dd_reg[7] (.clk (clk), .d (D[7]), .sena (1'b1), .aclr
       (1'b0), .apre (1'b0), .srl (n_15), .srd (1'b0), .q (Dd[7]));
  CDN_flop \Dd_reg[8] (.clk (clk), .d (D[8]), .sena (1'b1), .aclr
       (1'b0), .apre (1'b0), .srl (n_15), .srd (1'b0), .q (Dd[8]));
  CDN_flop \Dd_reg[9] (.clk (clk), .d (D[9]), .sena (1'b1), .aclr
       (1'b0), .apre (1'b0), .srl (n_15), .srd (1'b0), .q (Dd[9]));
  CDN_flop \Dd_reg[10] (.clk (clk), .d (D[10]), .sena (1'b1), .aclr
       (1'b0), .apre (1'b0), .srl (n_15), .srd (1'b0), .q (Dd[10]));
  CDN_flop \Dd_reg[11] (.clk (clk), .d (D[11]), .sena (1'b1), .aclr
       (1'b0), .apre (1'b0), .srl (n_15), .srd (1'b0), .q (Dd[11]));
  CDN_flop \Dd_reg[12] (.clk (clk), .d (D[12]), .sena (1'b1), .aclr
       (1'b0), .apre (1'b0), .srl (n_15), .srd (1'b0), .q (Dd[12]));
  not g3 (n_15, reset);
endmodule

module and_op_106(A, B, Z);
  input [3:0] A, B;
  output [3:0] Z;
  wire [3:0] A, B;
  wire [3:0] Z;
  and g1 (Z[0], A[0], B[0]);
  and g2 (Z[1], A[1], B[1]);
  and g3 (Z[2], A[2], B[2]);
  and g4 (Z[3], A[3], B[3]);
endmodule

module and_op_107(A, B, Z);
  input [3:0] A, B;
  output [3:0] Z;
  wire [3:0] A, B;
  wire [3:0] Z;
  and g1 (Z[0], A[0], B[0]);
  and g2 (Z[1], A[1], B[1]);
  and g3 (Z[2], A[2], B[2]);
  and g4 (Z[3], A[3], B[3]);
endmodule

module and_op_108(A, B, Z);
  input [3:0] A, B;
  output [3:0] Z;
  wire [3:0] A, B;
  wire [3:0] Z;
  and g1 (Z[0], A[0], B[0]);
  and g2 (Z[1], A[1], B[1]);
  and g3 (Z[2], A[2], B[2]);
  and g4 (Z[3], A[3], B[3]);
endmodule

module majorityVoter_WIDTH4(inA, inB, inC, out, tmrErr);
  input [3:0] inA, inB, inC;
  output [3:0] out;
  output tmrErr;
  wire [3:0] inA, inB, inC;
  wire [3:0] out;
  wire tmrErr;
  wire n_3, n_16, n_17, n_18, n_19, n_20, n_21, n_22;
  wire n_23, n_24, n_25, n_26, n_27, n_28, n_29, n_30;
  wire n_31, n_41, n_42, n_43, n_44, n_45, n_46, n_47;
  wire n_48, n_49, n_50, n_51, n_52, n_53, n_54, n_55;
  wire n_56;
  and_op_106 g1(.A (inA), .B (inB), .Z ({n_19, n_18, n_17, n_16}));
  and_op_107 g2(.A (inA), .B (inC), .Z ({n_23, n_22, n_21, n_20}));
  and_op_108 g4(.A (inB), .B (inC), .Z ({n_31, n_30, n_29, n_28}));
  bmux mux_tmrErr_169_29(.ctl (n_3), .in_0 (1'b0), .in_1 (1'b1), .z
       (tmrErr));
  or g9 (n_24, n_16, n_20);
  or g10 (n_25, n_17, n_21);
  or g3 (n_26, n_18, n_22);
  or g11 (n_27, n_19, n_23);
  or g12 (out[0], n_24, n_28);
  or g13 (out[1], n_25, n_29);
  or g14 (out[2], n_26, n_30);
  or g15 (out[3], n_27, n_31);
  xnor g18 (n_41, inA[0], inB[0]);
  xnor g19 (n_42, inA[1], inB[1]);
  xnor g20 (n_43, inA[2], inB[2]);
  xnor g21 (n_44, inA[3], inB[3]);
  xnor g22 (n_45, inA[0], inC[0]);
  xnor g23 (n_46, inA[1], inC[1]);
  xnor g24 (n_47, inA[2], inC[2]);
  xnor g25 (n_48, inA[3], inC[3]);
  xnor g27 (n_49, inB[0], inC[0]);
  xnor g28 (n_50, inB[1], inC[1]);
  xnor g29 (n_51, inB[2], inC[2]);
  xnor g30 (n_52, inB[3], inC[3]);
  nand g32 (n_53, n_41, n_42, n_43);
  nand g33 (n_54, n_44, n_45, n_46);
  nand g34 (n_55, n_47, n_48, n_49);
  nand g35 (n_56, n_50, n_51, n_52);
  or g36 (n_3, n_53, n_54, n_55, n_56);
endmodule

module bmux_212(ctl, in_0, in_1, z);
  input ctl;
  input [1:0] in_0, in_1;
  output [1:0] z;
  wire ctl;
  wire [1:0] in_0, in_1;
  wire [1:0] z;
  CDN_bmux2 g1(.sel0 (ctl), .data0 (in_0[1]), .data1 (in_1[1]), .z
       (z[1]));
  CDN_bmux2 g2(.sel0 (ctl), .data0 (in_0[0]), .data1 (in_1[0]), .z
       (z[0]));
endmodule

module bmux_214(ctl, in_0, in_1, z);
  input ctl;
  input [3:0] in_0, in_1;
  output [3:0] z;
  wire ctl;
  wire [3:0] in_0, in_1;
  wire [3:0] z;
  CDN_bmux2 g1(.sel0 (ctl), .data0 (in_0[3]), .data1 (in_1[3]), .z
       (z[3]));
  CDN_bmux2 g2(.sel0 (ctl), .data0 (in_0[2]), .data1 (in_1[2]), .z
       (z[2]));
  CDN_bmux2 g3(.sel0 (ctl), .data0 (in_0[1]), .data1 (in_1[1]), .z
       (z[1]));
  CDN_bmux2 g4(.sel0 (ctl), .data0 (in_0[0]), .data1 (in_1[0]), .z
       (z[0]));
endmodule

module bmux_223(ctl, in_0, in_1, in_2, in_3, in_4, in_5, in_6, in_7,
     in_8, in_9, in_10, in_11, in_12, in_13, in_14, in_15, z);
  input [3:0] ctl, in_0, in_1, in_2, in_3, in_4, in_5, in_6, in_7,
       in_8, in_9, in_10, in_11, in_12, in_13, in_14, in_15;
  output [3:0] z;
  wire [3:0] ctl, in_0, in_1, in_2, in_3, in_4, in_5, in_6, in_7, in_8,
       in_9, in_10, in_11, in_12, in_13, in_14, in_15;
  wire [3:0] z;
  CDN_bmux16 g1(.sel0 (ctl[0]), .data0 (in_0[3]), .data1 (in_1[3]),
       .sel1 (ctl[1]), .data2 (in_2[3]), .data3 (in_3[3]), .sel2
       (ctl[2]), .data4 (in_4[3]), .data5 (in_5[3]), .data6 (in_6[3]),
       .data7 (in_7[3]), .sel3 (ctl[3]), .data8 (in_8[3]), .data9
       (in_9[3]), .data10 (in_10[3]), .data11 (in_11[3]), .data12
       (in_12[3]), .data13 (in_13[3]), .data14 (in_14[3]), .data15
       (in_15[3]), .z (z[3]));
  CDN_bmux16 g2(.sel0 (ctl[0]), .data0 (in_0[2]), .data1 (in_1[2]),
       .sel1 (ctl[1]), .data2 (in_2[2]), .data3 (in_3[2]), .sel2
       (ctl[2]), .data4 (in_4[2]), .data5 (in_5[2]), .data6 (in_6[2]),
       .data7 (in_7[2]), .sel3 (ctl[3]), .data8 (in_8[2]), .data9
       (in_9[2]), .data10 (in_10[2]), .data11 (in_11[2]), .data12
       (in_12[2]), .data13 (in_13[2]), .data14 (in_14[2]), .data15
       (in_15[2]), .z (z[2]));
  CDN_bmux16 g3(.sel0 (ctl[0]), .data0 (in_0[1]), .data1 (in_1[1]),
       .sel1 (ctl[1]), .data2 (in_2[1]), .data3 (in_3[1]), .sel2
       (ctl[2]), .data4 (in_4[1]), .data5 (in_5[1]), .data6 (in_6[1]),
       .data7 (in_7[1]), .sel3 (ctl[3]), .data8 (in_8[1]), .data9
       (in_9[1]), .data10 (in_10[1]), .data11 (in_11[1]), .data12
       (in_12[1]), .data13 (in_13[1]), .data14 (in_14[1]), .data15
       (in_15[1]), .z (z[1]));
  CDN_bmux16 g4(.sel0 (ctl[0]), .data0 (in_0[0]), .data1 (in_1[0]),
       .sel1 (ctl[1]), .data2 (in_2[0]), .data3 (in_3[0]), .sel2
       (ctl[2]), .data4 (in_4[0]), .data5 (in_5[0]), .data6 (in_6[0]),
       .data7 (in_7[0]), .sel3 (ctl[3]), .data8 (in_8[0]), .data9
       (in_9[0]), .data10 (in_10[0]), .data11 (in_11[0]), .data12
       (in_12[0]), .data13 (in_13[0]), .data14 (in_14[0]), .data15
       (in_15[0]), .z (z[0]));
endmodule

module LDTU_FSMTMR(CLK_A, CLK_B, CLK_C, reset_A, reset_B, reset_C,
     baseline_flag, Current_state_A, Current_state_B, Current_state_C,
     tmrError);
  input CLK_A, CLK_B, CLK_C, reset_A, reset_B, reset_C, baseline_flag;
  output [3:0] Current_state_A, Current_state_B, Current_state_C;
  output tmrError;
  wire CLK_A, CLK_B, CLK_C, reset_A, reset_B, reset_C, baseline_flag;
  wire [3:0] Current_state_A, Current_state_B, Current_state_C;
  wire tmrError;
  wire [3:0] Current_state;
  wire [3:0] Next_state;
  wire UNCONNECTED729, UNCONNECTED730, UNCONNECTED731, UNCONNECTED732,
       UNCONNECTED733, UNCONNECTED734, UNCONNECTED735, UNCONNECTED736;
  wire UNCONNECTED737, UNCONNECTED738, UNCONNECTED739, UNCONNECTED740,
       n_142, n_143, n_144, n_146;
  wire n_147, n_148, n_149, n_150, n_151, n_152, n_153, n_154;
  wire n_155, n_156, n_157, n_158, n_159, n_160, n_161, n_162;
  wire n_163, n_164, n_165, n_166, n_167, n_168, n_169, n_170;
  wire n_171, n_172, n_173, n_174, n_175, n_176, n_177, n_178;
  wire n_179, n_180, n_181, n_182, n_183, n_184, n_185, n_186;
  majorityVoter_WIDTH4 Current_stateVoter(.inA (Current_state_A), .inB
       (Current_state_B), .inC (Current_state_C), .out (Current_state),
       .tmrErr (tmrError));
  bmux_98 mux_Next_state_94_22(.ctl (baseline_flag), .in_0 (3'b110),
       .in_1 (3'b001), .z ({n_171, n_162, n_147}));
  bmux_98 mux_Next_state_101_22(.ctl (baseline_flag), .in_0 (3'b010),
       .in_1 (3'b101), .z ({n_173, n_163, n_148}));
  bmux_98 mux_Next_state_108_22(.ctl (baseline_flag), .in_0 (3'b101),
       .in_1 (3'b010), .z ({n_174, n_164, n_149}));
  bmux_98 mux_Next_state_115_22(.ctl (baseline_flag), .in_0 (3'b010),
       .in_1 (3'b101), .z ({n_175, n_165, n_150}));
  bmux_212 mux_Next_state_122_22(.ctl (baseline_flag), .in_0 (2'b10),
       .in_1 (2'b01), .z ({n_176, n_151}));
  bmux_98 mux_Next_state_129_22(.ctl (baseline_flag), .in_0 (3'b010),
       .in_1 (3'b101), .z ({n_177, n_166, n_152}));
  bmux_214 mux_Next_state_136_22(.ctl (baseline_flag), .in_0 (4'b1011),
       .in_1 (4'b0100), .z ({n_178, n_172, n_167, n_153}));
  bmux_98 mux_Next_state_143_22(.ctl (baseline_flag), .in_0 (3'b010),
       .in_1 (3'b101), .z ({n_179, n_168, n_154}));
  bmux_212 mux_Next_state_150_22(.ctl (baseline_flag), .in_0 (2'b10),
       .in_1 (2'b01), .z ({n_180, n_155}));
  bmux_98 mux_Next_state_157_22(.ctl (baseline_flag), .in_0 (3'b010),
       .in_1 (3'b101), .z ({n_181, n_169, n_156}));
  bmux_212 mux_Next_state_164_22(.ctl (baseline_flag), .in_0 (2'b10),
       .in_1 (2'b01), .z ({n_182, n_157}));
  bmux_212 mux_Next_state_171_22(.ctl (n_146), .in_0 (2'b01), .in_1
       (2'b10), .z ({n_183, n_158}));
  bmux_212 mux_Next_state_178_22(.ctl (n_146), .in_0 (2'b10), .in_1
       (2'b01), .z ({n_184, n_159}));
  bmux_212 mux_Next_state_185_22(.ctl (n_146), .in_0 (2'b01), .in_1
       (2'b10), .z ({n_185, n_160}));
  bmux_98 mux_Next_state_192_22(.ctl (n_146), .in_0 (3'b101), .in_1
       (3'b010), .z ({n_186, n_170, n_161}));
  bmux_223 mux_Next_state_91_9(.ctl (Current_state), .in_0 ({1'b0,
       n_171, n_162, n_147}), .in_1 ({n_174, 1'b0, n_164, n_149}),
       .in_2 ({n_176, 2'b01, n_151}), .in_3 ({n_178, n_172, n_167,
       n_153}), .in_4 ({n_180, 2'b10, n_155}), .in_5 ({n_182, 2'b00,
       n_157}), .in_6 ({n_184, 2'b11, n_159}), .in_7 ({n_186, 1'b1,
       n_170, n_161}), .in_8 ({n_173, 1'b1, n_163, n_148}), .in_9
       ({n_175, 1'b1, n_165, n_150}), .in_10 ({n_177, 1'b1, n_166,
       n_152}), .in_11 ({n_179, 1'b1, n_168, n_154}), .in_12 ({n_181,
       1'b1, n_169, n_156}), .in_13 ({n_183, 2'b00, n_158}), .in_14
       ({n_185, 2'b00, n_160}), .in_15 (4'b0000), .z (Next_state));
  bmux_214 mux_Current_state_C_82_14(.ctl (n_142), .in_0 (Next_state),
       .in_1 (4'b0000), .z ({UNCONNECTED732, UNCONNECTED731,
       UNCONNECTED730, UNCONNECTED729}));
  bmux_214 mux_Current_state_A_66_14(.ctl (n_143), .in_0 (Next_state),
       .in_1 (4'b0000), .z ({UNCONNECTED736, UNCONNECTED735,
       UNCONNECTED734, UNCONNECTED733}));
  bmux_214 mux_Current_state_B_74_14(.ctl (n_144), .in_0 (Next_state),
       .in_1 (4'b0000), .z ({UNCONNECTED740, UNCONNECTED739,
       UNCONNECTED738, UNCONNECTED737}));
  CDN_flop \Current_state_A_reg[0] (.clk (CLK_A), .d (Next_state[0]),
       .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_143), .srd
       (1'b0), .q (Current_state_A[0]));
  CDN_flop \Current_state_A_reg[1] (.clk (CLK_A), .d (Next_state[1]),
       .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_143), .srd
       (1'b0), .q (Current_state_A[1]));
  CDN_flop \Current_state_A_reg[2] (.clk (CLK_A), .d (Next_state[2]),
       .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_143), .srd
       (1'b0), .q (Current_state_A[2]));
  CDN_flop \Current_state_A_reg[3] (.clk (CLK_A), .d (Next_state[3]),
       .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_143), .srd
       (1'b0), .q (Current_state_A[3]));
  CDN_flop \Current_state_B_reg[0] (.clk (CLK_B), .d (Next_state[0]),
       .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_144), .srd
       (1'b0), .q (Current_state_B[0]));
  CDN_flop \Current_state_B_reg[1] (.clk (CLK_B), .d (Next_state[1]),
       .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_144), .srd
       (1'b0), .q (Current_state_B[1]));
  CDN_flop \Current_state_B_reg[2] (.clk (CLK_B), .d (Next_state[2]),
       .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_144), .srd
       (1'b0), .q (Current_state_B[2]));
  CDN_flop \Current_state_B_reg[3] (.clk (CLK_B), .d (Next_state[3]),
       .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_144), .srd
       (1'b0), .q (Current_state_B[3]));
  CDN_flop \Current_state_C_reg[0] (.clk (CLK_C), .d (Next_state[0]),
       .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_142), .srd
       (1'b0), .q (Current_state_C[0]));
  CDN_flop \Current_state_C_reg[1] (.clk (CLK_C), .d (Next_state[1]),
       .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_142), .srd
       (1'b0), .q (Current_state_C[1]));
  CDN_flop \Current_state_C_reg[2] (.clk (CLK_C), .d (Next_state[2]),
       .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_142), .srd
       (1'b0), .q (Current_state_C[2]));
  CDN_flop \Current_state_C_reg[3] (.clk (CLK_C), .d (Next_state[3]),
       .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_142), .srd
       (1'b0), .q (Current_state_C[3]));
  not g13 (n_142, reset_C);
  not g14 (n_143, reset_A);
  not g15 (n_144, reset_B);
  not g16 (n_146, baseline_flag);
endmodule

module and_op_118(A, B, Z);
  input [31:0] A, B;
  output [31:0] Z;
  wire [31:0] A, B;
  wire [31:0] Z;
  and g1 (Z[0], A[0], B[0]);
  and g2 (Z[1], A[1], B[1]);
  and g3 (Z[2], A[2], B[2]);
  and g4 (Z[3], A[3], B[3]);
  and g5 (Z[4], A[4], B[4]);
  and g6 (Z[5], A[5], B[5]);
  and g7 (Z[6], A[6], B[6]);
  and g8 (Z[7], A[7], B[7]);
  and g9 (Z[8], A[8], B[8]);
  and g10 (Z[9], A[9], B[9]);
  and g11 (Z[10], A[10], B[10]);
  and g12 (Z[11], A[11], B[11]);
  and g13 (Z[12], A[12], B[12]);
  and g14 (Z[13], A[13], B[13]);
  and g15 (Z[14], A[14], B[14]);
  and g16 (Z[15], A[15], B[15]);
  and g17 (Z[16], A[16], B[16]);
  and g18 (Z[17], A[17], B[17]);
  and g19 (Z[18], A[18], B[18]);
  and g20 (Z[19], A[19], B[19]);
  and g21 (Z[20], A[20], B[20]);
  and g22 (Z[21], A[21], B[21]);
  and g23 (Z[22], A[22], B[22]);
  and g24 (Z[23], A[23], B[23]);
  and g25 (Z[24], A[24], B[24]);
  and g26 (Z[25], A[25], B[25]);
  and g27 (Z[26], A[26], B[26]);
  and g28 (Z[27], A[27], B[27]);
  and g29 (Z[28], A[28], B[28]);
  and g30 (Z[29], A[29], B[29]);
  and g31 (Z[30], A[30], B[30]);
  and g32 (Z[31], A[31], B[31]);
endmodule

module and_op_119(A, B, Z);
  input [31:0] A, B;
  output [31:0] Z;
  wire [31:0] A, B;
  wire [31:0] Z;
  and g1 (Z[0], A[0], B[0]);
  and g2 (Z[1], A[1], B[1]);
  and g3 (Z[2], A[2], B[2]);
  and g4 (Z[3], A[3], B[3]);
  and g5 (Z[4], A[4], B[4]);
  and g6 (Z[5], A[5], B[5]);
  and g7 (Z[6], A[6], B[6]);
  and g8 (Z[7], A[7], B[7]);
  and g9 (Z[8], A[8], B[8]);
  and g10 (Z[9], A[9], B[9]);
  and g11 (Z[10], A[10], B[10]);
  and g12 (Z[11], A[11], B[11]);
  and g13 (Z[12], A[12], B[12]);
  and g14 (Z[13], A[13], B[13]);
  and g15 (Z[14], A[14], B[14]);
  and g16 (Z[15], A[15], B[15]);
  and g17 (Z[16], A[16], B[16]);
  and g18 (Z[17], A[17], B[17]);
  and g19 (Z[18], A[18], B[18]);
  and g20 (Z[19], A[19], B[19]);
  and g21 (Z[20], A[20], B[20]);
  and g22 (Z[21], A[21], B[21]);
  and g23 (Z[22], A[22], B[22]);
  and g24 (Z[23], A[23], B[23]);
  and g25 (Z[24], A[24], B[24]);
  and g26 (Z[25], A[25], B[25]);
  and g27 (Z[26], A[26], B[26]);
  and g28 (Z[27], A[27], B[27]);
  and g29 (Z[28], A[28], B[28]);
  and g30 (Z[29], A[29], B[29]);
  and g31 (Z[30], A[30], B[30]);
  and g32 (Z[31], A[31], B[31]);
endmodule

module and_op_120(A, B, Z);
  input [31:0] A, B;
  output [31:0] Z;
  wire [31:0] A, B;
  wire [31:0] Z;
  and g1 (Z[0], A[0], B[0]);
  and g2 (Z[1], A[1], B[1]);
  and g3 (Z[2], A[2], B[2]);
  and g4 (Z[3], A[3], B[3]);
  and g5 (Z[4], A[4], B[4]);
  and g6 (Z[5], A[5], B[5]);
  and g7 (Z[6], A[6], B[6]);
  and g8 (Z[7], A[7], B[7]);
  and g9 (Z[8], A[8], B[8]);
  and g10 (Z[9], A[9], B[9]);
  and g11 (Z[10], A[10], B[10]);
  and g12 (Z[11], A[11], B[11]);
  and g13 (Z[12], A[12], B[12]);
  and g14 (Z[13], A[13], B[13]);
  and g15 (Z[14], A[14], B[14]);
  and g16 (Z[15], A[15], B[15]);
  and g17 (Z[16], A[16], B[16]);
  and g18 (Z[17], A[17], B[17]);
  and g19 (Z[18], A[18], B[18]);
  and g20 (Z[19], A[19], B[19]);
  and g21 (Z[20], A[20], B[20]);
  and g22 (Z[21], A[21], B[21]);
  and g23 (Z[22], A[22], B[22]);
  and g24 (Z[23], A[23], B[23]);
  and g25 (Z[24], A[24], B[24]);
  and g26 (Z[25], A[25], B[25]);
  and g27 (Z[26], A[26], B[26]);
  and g28 (Z[27], A[27], B[27]);
  and g29 (Z[28], A[28], B[28]);
  and g30 (Z[29], A[29], B[29]);
  and g31 (Z[30], A[30], B[30]);
  and g32 (Z[31], A[31], B[31]);
endmodule

module nequal_unsigned_228(A, B, Z);
  input [31:0] A, B;
  output Z;
  wire [31:0] A, B;
  wire Z;
  wire n_66, n_67, n_68, n_69, n_70, n_71, n_72, n_73;
  wire n_74, n_75, n_76, n_77, n_78, n_79, n_80, n_81;
  wire n_82, n_83, n_84, n_85, n_86, n_87, n_88, n_89;
  wire n_90, n_91, n_92, n_93, n_94, n_95, n_96, n_97;
  wire n_98, n_99, n_100, n_101, n_102, n_103, n_104, n_105;
  wire n_106, n_107;
  xnor g1 (n_66, A[0], B[0]);
  xnor g2 (n_67, A[1], B[1]);
  xnor g3 (n_68, A[2], B[2]);
  xnor g4 (n_69, A[3], B[3]);
  xnor g5 (n_70, A[4], B[4]);
  xnor g6 (n_71, A[5], B[5]);
  xnor g7 (n_72, A[6], B[6]);
  xnor g8 (n_73, A[7], B[7]);
  xnor g9 (n_74, A[8], B[8]);
  xnor g10 (n_75, A[9], B[9]);
  xnor g11 (n_76, A[10], B[10]);
  xnor g12 (n_77, A[11], B[11]);
  xnor g13 (n_78, A[12], B[12]);
  xnor g14 (n_79, A[13], B[13]);
  xnor g15 (n_80, A[14], B[14]);
  xnor g16 (n_81, A[15], B[15]);
  xnor g17 (n_82, A[16], B[16]);
  xnor g18 (n_83, A[17], B[17]);
  xnor g19 (n_84, A[18], B[18]);
  xnor g20 (n_85, A[19], B[19]);
  xnor g21 (n_86, A[20], B[20]);
  xnor g22 (n_87, A[21], B[21]);
  xnor g23 (n_88, A[22], B[22]);
  xnor g24 (n_89, A[23], B[23]);
  xnor g25 (n_90, A[24], B[24]);
  xnor g26 (n_91, A[25], B[25]);
  xnor g27 (n_92, A[26], B[26]);
  xnor g28 (n_93, A[27], B[27]);
  xnor g29 (n_94, A[28], B[28]);
  xnor g30 (n_95, A[29], B[29]);
  xnor g31 (n_96, A[30], B[30]);
  xnor g32 (n_97, A[31], B[31]);
  nand g33 (n_98, n_66, n_67, n_68, n_69);
  nand g34 (n_99, n_70, n_71, n_72, n_73);
  nand g35 (n_100, n_74, n_75, n_76, n_77);
  nand g36 (n_101, n_78, n_79, n_80, n_81);
  nand g37 (n_102, n_82, n_83, n_84, n_85);
  nand g38 (n_103, n_86, n_87, n_88, n_89);
  nand g39 (n_104, n_90, n_91, n_92, n_93);
  nand g40 (n_105, n_94, n_95, n_96, n_97);
  nor g41 (n_107, n_98, n_99, n_100, n_101);
  nor g42 (n_106, n_102, n_103, n_104, n_105);
  nand g43 (Z, n_106, n_107);
endmodule

module majorityVoter_WIDTH32(inA, inB, inC, out, tmrErr);
  input [31:0] inA, inB, inC;
  output [31:0] out;
  output tmrErr;
  wire [31:0] inA, inB, inC;
  wire [31:0] out;
  wire tmrErr;
  wire n_3, n_100, n_101, n_102, n_103, n_104, n_105, n_106;
  wire n_107, n_108, n_109, n_110, n_111, n_112, n_113, n_114;
  wire n_115, n_116, n_117, n_118, n_119, n_120, n_121, n_122;
  wire n_123, n_124, n_125, n_126, n_127, n_128, n_129, n_130;
  wire n_131, n_132, n_133, n_134, n_135, n_136, n_137, n_138;
  wire n_139, n_140, n_141, n_142, n_143, n_144, n_145, n_146;
  wire n_147, n_148, n_149, n_150, n_151, n_152, n_153, n_154;
  wire n_155, n_156, n_157, n_158, n_159, n_160, n_161, n_162;
  wire n_163, n_164, n_165, n_166, n_167, n_168, n_169, n_170;
  wire n_171, n_172, n_173, n_174, n_175, n_176, n_177, n_178;
  wire n_179, n_180, n_181, n_182, n_183, n_184, n_185, n_186;
  wire n_187, n_188, n_189, n_190, n_191, n_192, n_193, n_194;
  wire n_195, n_196, n_197, n_198, n_199, n_200, n_201, n_202;
  wire n_203, n_204, n_205, n_206, n_207, n_208, n_209, n_210;
  wire n_211, n_212, n_213, n_214, n_215, n_216, n_217, n_218;
  wire n_219, n_220, n_221, n_222, n_223, n_224, n_225, n_226;
  wire n_227, n_228, n_229, n_230, n_231;
  and_op_118 g1(.A (inA), .B (inB), .Z ({n_131, n_130, n_129, n_128,
       n_127, n_126, n_125, n_124, n_123, n_122, n_121, n_120, n_119,
       n_118, n_117, n_116, n_115, n_114, n_113, n_112, n_111, n_110,
       n_109, n_108, n_107, n_106, n_105, n_104, n_103, n_102, n_101,
       n_100}));
  and_op_119 g2(.A (inA), .B (inC), .Z ({n_163, n_162, n_161, n_160,
       n_159, n_158, n_157, n_156, n_155, n_154, n_153, n_152, n_151,
       n_150, n_149, n_148, n_147, n_146, n_145, n_144, n_143, n_142,
       n_141, n_140, n_139, n_138, n_137, n_136, n_135, n_134, n_133,
       n_132}));
  and_op_120 g4(.A (inB), .B (inC), .Z ({n_227, n_226, n_225, n_224,
       n_223, n_222, n_221, n_220, n_219, n_218, n_217, n_216, n_215,
       n_214, n_213, n_212, n_211, n_210, n_209, n_208, n_207, n_206,
       n_205, n_204, n_203, n_202, n_201, n_200, n_199, n_198, n_197,
       n_196}));
  nequal_unsigned_228 neq_169_11(.A (inA), .B (inB), .Z (n_228));
  nequal_unsigned_228 neq_169_23(.A (inA), .B (inC), .Z (n_229));
  nequal_unsigned_228 neq_169_35(.A (inB), .B (inC), .Z (n_231));
  bmux mux_tmrErr_169_29(.ctl (n_3), .in_0 (1'b0), .in_1 (1'b1), .z
       (tmrErr));
  or g9 (n_164, n_100, n_132);
  or g10 (n_165, n_101, n_133);
  or g3 (n_166, n_102, n_134);
  or g11 (n_167, n_103, n_135);
  or g12 (n_168, n_104, n_136);
  or g13 (n_169, n_105, n_137);
  or g14 (n_170, n_106, n_138);
  or g15 (n_171, n_107, n_139);
  or g16 (n_172, n_108, n_140);
  or g17 (n_173, n_109, n_141);
  or g18 (n_174, n_110, n_142);
  or g19 (n_175, n_111, n_143);
  or g20 (n_176, n_112, n_144);
  or g21 (n_177, n_113, n_145);
  or g22 (n_178, n_114, n_146);
  or g23 (n_179, n_115, n_147);
  or g24 (n_180, n_116, n_148);
  or g25 (n_181, n_117, n_149);
  or g26 (n_182, n_118, n_150);
  or g27 (n_183, n_119, n_151);
  or g28 (n_184, n_120, n_152);
  or g29 (n_185, n_121, n_153);
  or g30 (n_186, n_122, n_154);
  or g31 (n_187, n_123, n_155);
  or g32 (n_188, n_124, n_156);
  or g33 (n_189, n_125, n_157);
  or g34 (n_190, n_126, n_158);
  or g35 (n_191, n_127, n_159);
  or g36 (n_192, n_128, n_160);
  or g37 (n_193, n_129, n_161);
  or g38 (n_194, n_130, n_162);
  or g39 (n_195, n_131, n_163);
  or g40 (out[0], n_164, n_196);
  or g41 (out[1], n_165, n_197);
  or g42 (out[2], n_166, n_198);
  or g43 (out[3], n_167, n_199);
  or g5 (out[4], n_168, n_200);
  or g44 (out[5], n_169, n_201);
  or g45 (out[6], n_170, n_202);
  or g46 (out[7], n_171, n_203);
  or g47 (out[8], n_172, n_204);
  or g48 (out[9], n_173, n_205);
  or g49 (out[10], n_174, n_206);
  or g50 (out[11], n_175, n_207);
  or g51 (out[12], n_176, n_208);
  or g52 (out[13], n_177, n_209);
  or g53 (out[14], n_178, n_210);
  or g54 (out[15], n_179, n_211);
  or g55 (out[16], n_180, n_212);
  or g56 (out[17], n_181, n_213);
  or g57 (out[18], n_182, n_214);
  or g58 (out[19], n_183, n_215);
  or g59 (out[20], n_184, n_216);
  or g60 (out[21], n_185, n_217);
  or g61 (out[22], n_186, n_218);
  or g62 (out[23], n_187, n_219);
  or g63 (out[24], n_188, n_220);
  or g64 (out[25], n_189, n_221);
  or g65 (out[26], n_190, n_222);
  or g66 (out[27], n_191, n_223);
  or g67 (out[28], n_192, n_224);
  or g68 (out[29], n_193, n_225);
  or g69 (out[30], n_194, n_226);
  or g70 (out[31], n_195, n_227);
  or g71 (n_230, n_228, n_229);
  or g72 (n_3, n_230, n_231);
endmodule

module case_box_147(in_0, out_0);
  input [3:0] in_0;
  output [15:0] out_0;
  wire [3:0] in_0;
  wire [15:0] out_0;
  wire n_5, n_7, n_9, n_10, n_12, n_14, n_16, n_18;
  wire n_22, n_27, n_141, n_142;
  nor g1 (out_0[15], n_5, n_10);
  nand g2 (n_5, n_141, n_142);
  not g3 (n_141, in_0[3]);
  not g4 (n_142, in_0[0]);
  nand g5 (n_10, n_7, n_9);
  not g6 (n_7, in_0[2]);
  not g7 (n_9, in_0[1]);
  nor g8 (out_0[14], n_10, n_12);
  nand g9 (n_12, n_141, in_0[0]);
  nor g10 (out_0[13], n_10, n_14);
  nand g11 (n_14, in_0[3], n_142);
  nor g12 (out_0[12], n_5, n_16);
  nand g13 (n_16, n_7, in_0[1]);
  nor g14 (out_0[11], n_10, n_18);
  nand g15 (n_18, in_0[3], in_0[0]);
  nor g16 (out_0[10], n_12, n_16);
  nor g17 (out_0[9], n_14, n_16);
  nor g18 (out_0[8], n_5, n_22);
  nand g19 (n_22, in_0[2], n_9);
  nor g20 (out_0[7], n_18, n_16);
  nor g21 (out_0[6], n_12, n_22);
  nor g22 (out_0[5], n_14, n_22);
  nor g23 (out_0[4], n_5, n_27);
  nand g24 (n_27, in_0[2], in_0[1]);
  nor g25 (out_0[3], n_18, n_22);
  nor g26 (out_0[2], n_12, n_27);
  nor g27 (out_0[1], n_14, n_27);
  nor g28 (out_0[0], n_18, n_27);
endmodule

module mux(ctl, in_0, in_1, in_2, in_3, in_4, in_5, in_6, in_7, in_8,
     in_9, in_10, in_11, in_12, in_13, in_14, in_15, z);
  input [15:0] ctl;
  input in_0, in_1, in_2, in_3, in_4, in_5, in_6, in_7, in_8, in_9,
       in_10, in_11, in_12, in_13, in_14, in_15;
  output z;
  wire [15:0] ctl;
  wire in_0, in_1, in_2, in_3, in_4, in_5, in_6, in_7, in_8, in_9,
       in_10, in_11, in_12, in_13, in_14, in_15;
  wire z;
  CDN_mux16 g1(.sel0 (ctl[15]), .data0 (in_0), .sel1 (ctl[14]), .data1
       (in_1), .sel2 (ctl[13]), .data2 (in_2), .sel3 (ctl[12]), .data3
       (in_3), .sel4 (ctl[11]), .data4 (in_4), .sel5 (ctl[10]), .data5
       (in_5), .sel6 (ctl[9]), .data6 (in_6), .sel7 (ctl[8]), .data7
       (in_7), .sel8 (ctl[7]), .data8 (in_8), .sel9 (ctl[6]), .data9
       (in_9), .sel10 (ctl[5]), .data10 (in_10), .sel11 (ctl[4]),
       .data11 (in_11), .sel12 (ctl[3]), .data12 (in_12), .sel13
       (ctl[2]), .data13 (in_13), .sel14 (ctl[1]), .data14 (in_14),
       .sel15 (ctl[0]), .data15 (in_15), .z (z));
endmodule

module bmux_241(ctl, in_0, in_1, z);
  input ctl;
  input [5:0] in_0, in_1;
  output [5:0] z;
  wire ctl;
  wire [5:0] in_0, in_1;
  wire [5:0] z;
  CDN_bmux2 g1(.sel0 (ctl), .data0 (in_0[5]), .data1 (in_1[5]), .z
       (z[5]));
  CDN_bmux2 g2(.sel0 (ctl), .data0 (in_0[4]), .data1 (in_1[4]), .z
       (z[4]));
  CDN_bmux2 g3(.sel0 (ctl), .data0 (in_0[3]), .data1 (in_1[3]), .z
       (z[3]));
  CDN_bmux2 g4(.sel0 (ctl), .data0 (in_0[2]), .data1 (in_1[2]), .z
       (z[2]));
  CDN_bmux2 g5(.sel0 (ctl), .data0 (in_0[1]), .data1 (in_1[1]), .z
       (z[1]));
  CDN_bmux2 g6(.sel0 (ctl), .data0 (in_0[0]), .data1 (in_1[0]), .z
       (z[0]));
endmodule

module mux_248(ctl, in_0, in_1, in_2, in_3, in_4, in_5, in_6, in_7,
     in_8, in_9, in_10, z);
  input [10:0] ctl;
  input [31:0] in_0, in_1, in_2, in_3, in_4, in_5, in_6, in_7, in_8,
       in_9, in_10;
  output [31:0] z;
  wire [10:0] ctl;
  wire [31:0] in_0, in_1, in_2, in_3, in_4, in_5, in_6, in_7, in_8,
       in_9, in_10;
  wire [31:0] z;
  CDN_mux11 g1(.sel0 (ctl[10]), .data0 (in_0[31]), .sel1 (ctl[9]),
       .data1 (in_1[31]), .sel2 (ctl[8]), .data2 (in_2[31]), .sel3
       (ctl[7]), .data3 (in_3[31]), .sel4 (ctl[6]), .data4 (in_4[31]),
       .sel5 (ctl[5]), .data5 (in_5[31]), .sel6 (ctl[4]), .data6
       (in_6[31]), .sel7 (ctl[3]), .data7 (in_7[31]), .sel8 (ctl[2]),
       .data8 (in_8[31]), .sel9 (ctl[1]), .data9 (in_9[31]), .sel10
       (ctl[0]), .data10 (in_10[31]), .z (z[31]));
  CDN_mux11 g33(.sel0 (ctl[10]), .data0 (in_0[30]), .sel1 (ctl[9]),
       .data1 (in_1[30]), .sel2 (ctl[8]), .data2 (in_2[30]), .sel3
       (ctl[7]), .data3 (in_3[30]), .sel4 (ctl[6]), .data4 (in_4[30]),
       .sel5 (ctl[5]), .data5 (in_5[30]), .sel6 (ctl[4]), .data6
       (in_6[30]), .sel7 (ctl[3]), .data7 (in_7[30]), .sel8 (ctl[2]),
       .data8 (in_8[30]), .sel9 (ctl[1]), .data9 (in_9[30]), .sel10
       (ctl[0]), .data10 (in_10[30]), .z (z[30]));
  CDN_mux11 g34(.sel0 (ctl[10]), .data0 (in_0[29]), .sel1 (ctl[9]),
       .data1 (in_1[29]), .sel2 (ctl[8]), .data2 (in_2[29]), .sel3
       (ctl[7]), .data3 (in_3[29]), .sel4 (ctl[6]), .data4 (in_4[29]),
       .sel5 (ctl[5]), .data5 (in_5[29]), .sel6 (ctl[4]), .data6
       (in_6[29]), .sel7 (ctl[3]), .data7 (in_7[29]), .sel8 (ctl[2]),
       .data8 (in_8[29]), .sel9 (ctl[1]), .data9 (in_9[29]), .sel10
       (ctl[0]), .data10 (in_10[29]), .z (z[29]));
  CDN_mux11 g35(.sel0 (ctl[10]), .data0 (in_0[28]), .sel1 (ctl[9]),
       .data1 (in_1[28]), .sel2 (ctl[8]), .data2 (in_2[28]), .sel3
       (ctl[7]), .data3 (in_3[28]), .sel4 (ctl[6]), .data4 (in_4[28]),
       .sel5 (ctl[5]), .data5 (in_5[28]), .sel6 (ctl[4]), .data6
       (in_6[28]), .sel7 (ctl[3]), .data7 (in_7[28]), .sel8 (ctl[2]),
       .data8 (in_8[28]), .sel9 (ctl[1]), .data9 (in_9[28]), .sel10
       (ctl[0]), .data10 (in_10[28]), .z (z[28]));
  CDN_mux11 g36(.sel0 (ctl[10]), .data0 (in_0[27]), .sel1 (ctl[9]),
       .data1 (in_1[27]), .sel2 (ctl[8]), .data2 (in_2[27]), .sel3
       (ctl[7]), .data3 (in_3[27]), .sel4 (ctl[6]), .data4 (in_4[27]),
       .sel5 (ctl[5]), .data5 (in_5[27]), .sel6 (ctl[4]), .data6
       (in_6[27]), .sel7 (ctl[3]), .data7 (in_7[27]), .sel8 (ctl[2]),
       .data8 (in_8[27]), .sel9 (ctl[1]), .data9 (in_9[27]), .sel10
       (ctl[0]), .data10 (in_10[27]), .z (z[27]));
  CDN_mux11 g37(.sel0 (ctl[10]), .data0 (in_0[26]), .sel1 (ctl[9]),
       .data1 (in_1[26]), .sel2 (ctl[8]), .data2 (in_2[26]), .sel3
       (ctl[7]), .data3 (in_3[26]), .sel4 (ctl[6]), .data4 (in_4[26]),
       .sel5 (ctl[5]), .data5 (in_5[26]), .sel6 (ctl[4]), .data6
       (in_6[26]), .sel7 (ctl[3]), .data7 (in_7[26]), .sel8 (ctl[2]),
       .data8 (in_8[26]), .sel9 (ctl[1]), .data9 (in_9[26]), .sel10
       (ctl[0]), .data10 (in_10[26]), .z (z[26]));
  CDN_mux11 g38(.sel0 (ctl[10]), .data0 (in_0[25]), .sel1 (ctl[9]),
       .data1 (in_1[25]), .sel2 (ctl[8]), .data2 (in_2[25]), .sel3
       (ctl[7]), .data3 (in_3[25]), .sel4 (ctl[6]), .data4 (in_4[25]),
       .sel5 (ctl[5]), .data5 (in_5[25]), .sel6 (ctl[4]), .data6
       (in_6[25]), .sel7 (ctl[3]), .data7 (in_7[25]), .sel8 (ctl[2]),
       .data8 (in_8[25]), .sel9 (ctl[1]), .data9 (in_9[25]), .sel10
       (ctl[0]), .data10 (in_10[25]), .z (z[25]));
  CDN_mux11 g39(.sel0 (ctl[10]), .data0 (in_0[24]), .sel1 (ctl[9]),
       .data1 (in_1[24]), .sel2 (ctl[8]), .data2 (in_2[24]), .sel3
       (ctl[7]), .data3 (in_3[24]), .sel4 (ctl[6]), .data4 (in_4[24]),
       .sel5 (ctl[5]), .data5 (in_5[24]), .sel6 (ctl[4]), .data6
       (in_6[24]), .sel7 (ctl[3]), .data7 (in_7[24]), .sel8 (ctl[2]),
       .data8 (in_8[24]), .sel9 (ctl[1]), .data9 (in_9[24]), .sel10
       (ctl[0]), .data10 (in_10[24]), .z (z[24]));
  CDN_mux11 g40(.sel0 (ctl[10]), .data0 (in_0[23]), .sel1 (ctl[9]),
       .data1 (in_1[23]), .sel2 (ctl[8]), .data2 (in_2[23]), .sel3
       (ctl[7]), .data3 (in_3[23]), .sel4 (ctl[6]), .data4 (in_4[23]),
       .sel5 (ctl[5]), .data5 (in_5[23]), .sel6 (ctl[4]), .data6
       (in_6[23]), .sel7 (ctl[3]), .data7 (in_7[23]), .sel8 (ctl[2]),
       .data8 (in_8[23]), .sel9 (ctl[1]), .data9 (in_9[23]), .sel10
       (ctl[0]), .data10 (in_10[23]), .z (z[23]));
  CDN_mux11 g41(.sel0 (ctl[10]), .data0 (in_0[22]), .sel1 (ctl[9]),
       .data1 (in_1[22]), .sel2 (ctl[8]), .data2 (in_2[22]), .sel3
       (ctl[7]), .data3 (in_3[22]), .sel4 (ctl[6]), .data4 (in_4[22]),
       .sel5 (ctl[5]), .data5 (in_5[22]), .sel6 (ctl[4]), .data6
       (in_6[22]), .sel7 (ctl[3]), .data7 (in_7[22]), .sel8 (ctl[2]),
       .data8 (in_8[22]), .sel9 (ctl[1]), .data9 (in_9[22]), .sel10
       (ctl[0]), .data10 (in_10[22]), .z (z[22]));
  CDN_mux11 g42(.sel0 (ctl[10]), .data0 (in_0[21]), .sel1 (ctl[9]),
       .data1 (in_1[21]), .sel2 (ctl[8]), .data2 (in_2[21]), .sel3
       (ctl[7]), .data3 (in_3[21]), .sel4 (ctl[6]), .data4 (in_4[21]),
       .sel5 (ctl[5]), .data5 (in_5[21]), .sel6 (ctl[4]), .data6
       (in_6[21]), .sel7 (ctl[3]), .data7 (in_7[21]), .sel8 (ctl[2]),
       .data8 (in_8[21]), .sel9 (ctl[1]), .data9 (in_9[21]), .sel10
       (ctl[0]), .data10 (in_10[21]), .z (z[21]));
  CDN_mux11 g43(.sel0 (ctl[10]), .data0 (in_0[20]), .sel1 (ctl[9]),
       .data1 (in_1[20]), .sel2 (ctl[8]), .data2 (in_2[20]), .sel3
       (ctl[7]), .data3 (in_3[20]), .sel4 (ctl[6]), .data4 (in_4[20]),
       .sel5 (ctl[5]), .data5 (in_5[20]), .sel6 (ctl[4]), .data6
       (in_6[20]), .sel7 (ctl[3]), .data7 (in_7[20]), .sel8 (ctl[2]),
       .data8 (in_8[20]), .sel9 (ctl[1]), .data9 (in_9[20]), .sel10
       (ctl[0]), .data10 (in_10[20]), .z (z[20]));
  CDN_mux11 g44(.sel0 (ctl[10]), .data0 (in_0[19]), .sel1 (ctl[9]),
       .data1 (in_1[19]), .sel2 (ctl[8]), .data2 (in_2[19]), .sel3
       (ctl[7]), .data3 (in_3[19]), .sel4 (ctl[6]), .data4 (in_4[19]),
       .sel5 (ctl[5]), .data5 (in_5[19]), .sel6 (ctl[4]), .data6
       (in_6[19]), .sel7 (ctl[3]), .data7 (in_7[19]), .sel8 (ctl[2]),
       .data8 (in_8[19]), .sel9 (ctl[1]), .data9 (in_9[19]), .sel10
       (ctl[0]), .data10 (in_10[19]), .z (z[19]));
  CDN_mux11 g45(.sel0 (ctl[10]), .data0 (in_0[18]), .sel1 (ctl[9]),
       .data1 (in_1[18]), .sel2 (ctl[8]), .data2 (in_2[18]), .sel3
       (ctl[7]), .data3 (in_3[18]), .sel4 (ctl[6]), .data4 (in_4[18]),
       .sel5 (ctl[5]), .data5 (in_5[18]), .sel6 (ctl[4]), .data6
       (in_6[18]), .sel7 (ctl[3]), .data7 (in_7[18]), .sel8 (ctl[2]),
       .data8 (in_8[18]), .sel9 (ctl[1]), .data9 (in_9[18]), .sel10
       (ctl[0]), .data10 (in_10[18]), .z (z[18]));
  CDN_mux11 g46(.sel0 (ctl[10]), .data0 (in_0[17]), .sel1 (ctl[9]),
       .data1 (in_1[17]), .sel2 (ctl[8]), .data2 (in_2[17]), .sel3
       (ctl[7]), .data3 (in_3[17]), .sel4 (ctl[6]), .data4 (in_4[17]),
       .sel5 (ctl[5]), .data5 (in_5[17]), .sel6 (ctl[4]), .data6
       (in_6[17]), .sel7 (ctl[3]), .data7 (in_7[17]), .sel8 (ctl[2]),
       .data8 (in_8[17]), .sel9 (ctl[1]), .data9 (in_9[17]), .sel10
       (ctl[0]), .data10 (in_10[17]), .z (z[17]));
  CDN_mux11 g47(.sel0 (ctl[10]), .data0 (in_0[16]), .sel1 (ctl[9]),
       .data1 (in_1[16]), .sel2 (ctl[8]), .data2 (in_2[16]), .sel3
       (ctl[7]), .data3 (in_3[16]), .sel4 (ctl[6]), .data4 (in_4[16]),
       .sel5 (ctl[5]), .data5 (in_5[16]), .sel6 (ctl[4]), .data6
       (in_6[16]), .sel7 (ctl[3]), .data7 (in_7[16]), .sel8 (ctl[2]),
       .data8 (in_8[16]), .sel9 (ctl[1]), .data9 (in_9[16]), .sel10
       (ctl[0]), .data10 (in_10[16]), .z (z[16]));
  CDN_mux11 g48(.sel0 (ctl[10]), .data0 (in_0[15]), .sel1 (ctl[9]),
       .data1 (in_1[15]), .sel2 (ctl[8]), .data2 (in_2[15]), .sel3
       (ctl[7]), .data3 (in_3[15]), .sel4 (ctl[6]), .data4 (in_4[15]),
       .sel5 (ctl[5]), .data5 (in_5[15]), .sel6 (ctl[4]), .data6
       (in_6[15]), .sel7 (ctl[3]), .data7 (in_7[15]), .sel8 (ctl[2]),
       .data8 (in_8[15]), .sel9 (ctl[1]), .data9 (in_9[15]), .sel10
       (ctl[0]), .data10 (in_10[15]), .z (z[15]));
  CDN_mux11 g49(.sel0 (ctl[10]), .data0 (in_0[14]), .sel1 (ctl[9]),
       .data1 (in_1[14]), .sel2 (ctl[8]), .data2 (in_2[14]), .sel3
       (ctl[7]), .data3 (in_3[14]), .sel4 (ctl[6]), .data4 (in_4[14]),
       .sel5 (ctl[5]), .data5 (in_5[14]), .sel6 (ctl[4]), .data6
       (in_6[14]), .sel7 (ctl[3]), .data7 (in_7[14]), .sel8 (ctl[2]),
       .data8 (in_8[14]), .sel9 (ctl[1]), .data9 (in_9[14]), .sel10
       (ctl[0]), .data10 (in_10[14]), .z (z[14]));
  CDN_mux11 g50(.sel0 (ctl[10]), .data0 (in_0[13]), .sel1 (ctl[9]),
       .data1 (in_1[13]), .sel2 (ctl[8]), .data2 (in_2[13]), .sel3
       (ctl[7]), .data3 (in_3[13]), .sel4 (ctl[6]), .data4 (in_4[13]),
       .sel5 (ctl[5]), .data5 (in_5[13]), .sel6 (ctl[4]), .data6
       (in_6[13]), .sel7 (ctl[3]), .data7 (in_7[13]), .sel8 (ctl[2]),
       .data8 (in_8[13]), .sel9 (ctl[1]), .data9 (in_9[13]), .sel10
       (ctl[0]), .data10 (in_10[13]), .z (z[13]));
  CDN_mux11 g51(.sel0 (ctl[10]), .data0 (in_0[12]), .sel1 (ctl[9]),
       .data1 (in_1[12]), .sel2 (ctl[8]), .data2 (in_2[12]), .sel3
       (ctl[7]), .data3 (in_3[12]), .sel4 (ctl[6]), .data4 (in_4[12]),
       .sel5 (ctl[5]), .data5 (in_5[12]), .sel6 (ctl[4]), .data6
       (in_6[12]), .sel7 (ctl[3]), .data7 (in_7[12]), .sel8 (ctl[2]),
       .data8 (in_8[12]), .sel9 (ctl[1]), .data9 (in_9[12]), .sel10
       (ctl[0]), .data10 (in_10[12]), .z (z[12]));
  CDN_mux11 g52(.sel0 (ctl[10]), .data0 (in_0[11]), .sel1 (ctl[9]),
       .data1 (in_1[11]), .sel2 (ctl[8]), .data2 (in_2[11]), .sel3
       (ctl[7]), .data3 (in_3[11]), .sel4 (ctl[6]), .data4 (in_4[11]),
       .sel5 (ctl[5]), .data5 (in_5[11]), .sel6 (ctl[4]), .data6
       (in_6[11]), .sel7 (ctl[3]), .data7 (in_7[11]), .sel8 (ctl[2]),
       .data8 (in_8[11]), .sel9 (ctl[1]), .data9 (in_9[11]), .sel10
       (ctl[0]), .data10 (in_10[11]), .z (z[11]));
  CDN_mux11 g53(.sel0 (ctl[10]), .data0 (in_0[10]), .sel1 (ctl[9]),
       .data1 (in_1[10]), .sel2 (ctl[8]), .data2 (in_2[10]), .sel3
       (ctl[7]), .data3 (in_3[10]), .sel4 (ctl[6]), .data4 (in_4[10]),
       .sel5 (ctl[5]), .data5 (in_5[10]), .sel6 (ctl[4]), .data6
       (in_6[10]), .sel7 (ctl[3]), .data7 (in_7[10]), .sel8 (ctl[2]),
       .data8 (in_8[10]), .sel9 (ctl[1]), .data9 (in_9[10]), .sel10
       (ctl[0]), .data10 (in_10[10]), .z (z[10]));
  CDN_mux11 g54(.sel0 (ctl[10]), .data0 (in_0[9]), .sel1 (ctl[9]),
       .data1 (in_1[9]), .sel2 (ctl[8]), .data2 (in_2[9]), .sel3
       (ctl[7]), .data3 (in_3[9]), .sel4 (ctl[6]), .data4 (in_4[9]),
       .sel5 (ctl[5]), .data5 (in_5[9]), .sel6 (ctl[4]), .data6
       (in_6[9]), .sel7 (ctl[3]), .data7 (in_7[9]), .sel8 (ctl[2]),
       .data8 (in_8[9]), .sel9 (ctl[1]), .data9 (in_9[9]), .sel10
       (ctl[0]), .data10 (in_10[9]), .z (z[9]));
  CDN_mux11 g55(.sel0 (ctl[10]), .data0 (in_0[8]), .sel1 (ctl[9]),
       .data1 (in_1[8]), .sel2 (ctl[8]), .data2 (in_2[8]), .sel3
       (ctl[7]), .data3 (in_3[8]), .sel4 (ctl[6]), .data4 (in_4[8]),
       .sel5 (ctl[5]), .data5 (in_5[8]), .sel6 (ctl[4]), .data6
       (in_6[8]), .sel7 (ctl[3]), .data7 (in_7[8]), .sel8 (ctl[2]),
       .data8 (in_8[8]), .sel9 (ctl[1]), .data9 (in_9[8]), .sel10
       (ctl[0]), .data10 (in_10[8]), .z (z[8]));
  CDN_mux11 g56(.sel0 (ctl[10]), .data0 (in_0[7]), .sel1 (ctl[9]),
       .data1 (in_1[7]), .sel2 (ctl[8]), .data2 (in_2[7]), .sel3
       (ctl[7]), .data3 (in_3[7]), .sel4 (ctl[6]), .data4 (in_4[7]),
       .sel5 (ctl[5]), .data5 (in_5[7]), .sel6 (ctl[4]), .data6
       (in_6[7]), .sel7 (ctl[3]), .data7 (in_7[7]), .sel8 (ctl[2]),
       .data8 (in_8[7]), .sel9 (ctl[1]), .data9 (in_9[7]), .sel10
       (ctl[0]), .data10 (in_10[7]), .z (z[7]));
  CDN_mux11 g57(.sel0 (ctl[10]), .data0 (in_0[6]), .sel1 (ctl[9]),
       .data1 (in_1[6]), .sel2 (ctl[8]), .data2 (in_2[6]), .sel3
       (ctl[7]), .data3 (in_3[6]), .sel4 (ctl[6]), .data4 (in_4[6]),
       .sel5 (ctl[5]), .data5 (in_5[6]), .sel6 (ctl[4]), .data6
       (in_6[6]), .sel7 (ctl[3]), .data7 (in_7[6]), .sel8 (ctl[2]),
       .data8 (in_8[6]), .sel9 (ctl[1]), .data9 (in_9[6]), .sel10
       (ctl[0]), .data10 (in_10[6]), .z (z[6]));
  CDN_mux11 g58(.sel0 (ctl[10]), .data0 (in_0[5]), .sel1 (ctl[9]),
       .data1 (in_1[5]), .sel2 (ctl[8]), .data2 (in_2[5]), .sel3
       (ctl[7]), .data3 (in_3[5]), .sel4 (ctl[6]), .data4 (in_4[5]),
       .sel5 (ctl[5]), .data5 (in_5[5]), .sel6 (ctl[4]), .data6
       (in_6[5]), .sel7 (ctl[3]), .data7 (in_7[5]), .sel8 (ctl[2]),
       .data8 (in_8[5]), .sel9 (ctl[1]), .data9 (in_9[5]), .sel10
       (ctl[0]), .data10 (in_10[5]), .z (z[5]));
  CDN_mux11 g59(.sel0 (ctl[10]), .data0 (in_0[4]), .sel1 (ctl[9]),
       .data1 (in_1[4]), .sel2 (ctl[8]), .data2 (in_2[4]), .sel3
       (ctl[7]), .data3 (in_3[4]), .sel4 (ctl[6]), .data4 (in_4[4]),
       .sel5 (ctl[5]), .data5 (in_5[4]), .sel6 (ctl[4]), .data6
       (in_6[4]), .sel7 (ctl[3]), .data7 (in_7[4]), .sel8 (ctl[2]),
       .data8 (in_8[4]), .sel9 (ctl[1]), .data9 (in_9[4]), .sel10
       (ctl[0]), .data10 (in_10[4]), .z (z[4]));
  CDN_mux11 g60(.sel0 (ctl[10]), .data0 (in_0[3]), .sel1 (ctl[9]),
       .data1 (in_1[3]), .sel2 (ctl[8]), .data2 (in_2[3]), .sel3
       (ctl[7]), .data3 (in_3[3]), .sel4 (ctl[6]), .data4 (in_4[3]),
       .sel5 (ctl[5]), .data5 (in_5[3]), .sel6 (ctl[4]), .data6
       (in_6[3]), .sel7 (ctl[3]), .data7 (in_7[3]), .sel8 (ctl[2]),
       .data8 (in_8[3]), .sel9 (ctl[1]), .data9 (in_9[3]), .sel10
       (ctl[0]), .data10 (in_10[3]), .z (z[3]));
  CDN_mux11 g61(.sel0 (ctl[10]), .data0 (in_0[2]), .sel1 (ctl[9]),
       .data1 (in_1[2]), .sel2 (ctl[8]), .data2 (in_2[2]), .sel3
       (ctl[7]), .data3 (in_3[2]), .sel4 (ctl[6]), .data4 (in_4[2]),
       .sel5 (ctl[5]), .data5 (in_5[2]), .sel6 (ctl[4]), .data6
       (in_6[2]), .sel7 (ctl[3]), .data7 (in_7[2]), .sel8 (ctl[2]),
       .data8 (in_8[2]), .sel9 (ctl[1]), .data9 (in_9[2]), .sel10
       (ctl[0]), .data10 (in_10[2]), .z (z[2]));
  CDN_mux11 g62(.sel0 (ctl[10]), .data0 (in_0[1]), .sel1 (ctl[9]),
       .data1 (in_1[1]), .sel2 (ctl[8]), .data2 (in_2[1]), .sel3
       (ctl[7]), .data3 (in_3[1]), .sel4 (ctl[6]), .data4 (in_4[1]),
       .sel5 (ctl[5]), .data5 (in_5[1]), .sel6 (ctl[4]), .data6
       (in_6[1]), .sel7 (ctl[3]), .data7 (in_7[1]), .sel8 (ctl[2]),
       .data8 (in_8[1]), .sel9 (ctl[1]), .data9 (in_9[1]), .sel10
       (ctl[0]), .data10 (in_10[1]), .z (z[1]));
  CDN_mux11 g63(.sel0 (ctl[10]), .data0 (in_0[0]), .sel1 (ctl[9]),
       .data1 (in_1[0]), .sel2 (ctl[8]), .data2 (in_2[0]), .sel3
       (ctl[7]), .data3 (in_3[0]), .sel4 (ctl[6]), .data4 (in_4[0]),
       .sel5 (ctl[5]), .data5 (in_5[0]), .sel6 (ctl[4]), .data6
       (in_6[0]), .sel7 (ctl[3]), .data7 (in_7[0]), .sel8 (ctl[2]),
       .data8 (in_8[0]), .sel9 (ctl[1]), .data9 (in_9[0]), .sel10
       (ctl[0]), .data10 (in_10[0]), .z (z[0]));
endmodule

module bmux_279(ctl, in_0, in_1, z);
  input ctl;
  input [31:0] in_0, in_1;
  output [31:0] z;
  wire ctl;
  wire [31:0] in_0, in_1;
  wire [31:0] z;
  CDN_bmux2 g1(.sel0 (ctl), .data0 (in_0[31]), .data1 (in_1[31]), .z
       (z[31]));
  CDN_bmux2 g2(.sel0 (ctl), .data0 (in_0[30]), .data1 (in_1[30]), .z
       (z[30]));
  CDN_bmux2 g3(.sel0 (ctl), .data0 (in_0[29]), .data1 (in_1[29]), .z
       (z[29]));
  CDN_bmux2 g4(.sel0 (ctl), .data0 (in_0[28]), .data1 (in_1[28]), .z
       (z[28]));
  CDN_bmux2 g5(.sel0 (ctl), .data0 (in_0[27]), .data1 (in_1[27]), .z
       (z[27]));
  CDN_bmux2 g6(.sel0 (ctl), .data0 (in_0[26]), .data1 (in_1[26]), .z
       (z[26]));
  CDN_bmux2 g7(.sel0 (ctl), .data0 (in_0[25]), .data1 (in_1[25]), .z
       (z[25]));
  CDN_bmux2 g8(.sel0 (ctl), .data0 (in_0[24]), .data1 (in_1[24]), .z
       (z[24]));
  CDN_bmux2 g9(.sel0 (ctl), .data0 (in_0[23]), .data1 (in_1[23]), .z
       (z[23]));
  CDN_bmux2 g10(.sel0 (ctl), .data0 (in_0[22]), .data1 (in_1[22]), .z
       (z[22]));
  CDN_bmux2 g11(.sel0 (ctl), .data0 (in_0[21]), .data1 (in_1[21]), .z
       (z[21]));
  CDN_bmux2 g12(.sel0 (ctl), .data0 (in_0[20]), .data1 (in_1[20]), .z
       (z[20]));
  CDN_bmux2 g13(.sel0 (ctl), .data0 (in_0[19]), .data1 (in_1[19]), .z
       (z[19]));
  CDN_bmux2 g14(.sel0 (ctl), .data0 (in_0[18]), .data1 (in_1[18]), .z
       (z[18]));
  CDN_bmux2 g15(.sel0 (ctl), .data0 (in_0[17]), .data1 (in_1[17]), .z
       (z[17]));
  CDN_bmux2 g16(.sel0 (ctl), .data0 (in_0[16]), .data1 (in_1[16]), .z
       (z[16]));
  CDN_bmux2 g17(.sel0 (ctl), .data0 (in_0[15]), .data1 (in_1[15]), .z
       (z[15]));
  CDN_bmux2 g18(.sel0 (ctl), .data0 (in_0[14]), .data1 (in_1[14]), .z
       (z[14]));
  CDN_bmux2 g19(.sel0 (ctl), .data0 (in_0[13]), .data1 (in_1[13]), .z
       (z[13]));
  CDN_bmux2 g20(.sel0 (ctl), .data0 (in_0[12]), .data1 (in_1[12]), .z
       (z[12]));
  CDN_bmux2 g21(.sel0 (ctl), .data0 (in_0[11]), .data1 (in_1[11]), .z
       (z[11]));
  CDN_bmux2 g22(.sel0 (ctl), .data0 (in_0[10]), .data1 (in_1[10]), .z
       (z[10]));
  CDN_bmux2 g23(.sel0 (ctl), .data0 (in_0[9]), .data1 (in_1[9]), .z
       (z[9]));
  CDN_bmux2 g24(.sel0 (ctl), .data0 (in_0[8]), .data1 (in_1[8]), .z
       (z[8]));
  CDN_bmux2 g25(.sel0 (ctl), .data0 (in_0[7]), .data1 (in_1[7]), .z
       (z[7]));
  CDN_bmux2 g26(.sel0 (ctl), .data0 (in_0[6]), .data1 (in_1[6]), .z
       (z[6]));
  CDN_bmux2 g27(.sel0 (ctl), .data0 (in_0[5]), .data1 (in_1[5]), .z
       (z[5]));
  CDN_bmux2 g28(.sel0 (ctl), .data0 (in_0[4]), .data1 (in_1[4]), .z
       (z[4]));
  CDN_bmux2 g29(.sel0 (ctl), .data0 (in_0[3]), .data1 (in_1[3]), .z
       (z[3]));
  CDN_bmux2 g30(.sel0 (ctl), .data0 (in_0[2]), .data1 (in_1[2]), .z
       (z[2]));
  CDN_bmux2 g31(.sel0 (ctl), .data0 (in_0[1]), .data1 (in_1[1]), .z
       (z[1]));
  CDN_bmux2 g32(.sel0 (ctl), .data0 (in_0[0]), .data1 (in_1[0]), .z
       (z[0]));
endmodule

module case_box_148(in_0, out_0);
  input [3:0] in_0;
  output [15:0] out_0;
  wire [3:0] in_0;
  wire [15:0] out_0;
  wire n_5, n_7, n_9, n_10, n_12, n_14, n_16, n_18;
  wire n_22, n_27, n_141, n_142;
  nor g1 (out_0[15], n_5, n_10);
  nand g2 (n_5, n_141, n_142);
  not g3 (n_141, in_0[3]);
  not g4 (n_142, in_0[0]);
  nand g5 (n_10, n_7, n_9);
  not g6 (n_7, in_0[2]);
  not g7 (n_9, in_0[1]);
  nor g8 (out_0[14], n_10, n_12);
  nand g9 (n_12, n_141, in_0[0]);
  nor g10 (out_0[13], n_10, n_14);
  nand g11 (n_14, in_0[3], n_142);
  nor g12 (out_0[12], n_5, n_16);
  nand g13 (n_16, n_7, in_0[1]);
  nor g14 (out_0[11], n_10, n_18);
  nand g15 (n_18, in_0[3], in_0[0]);
  nor g16 (out_0[10], n_12, n_16);
  nor g17 (out_0[9], n_14, n_16);
  nor g18 (out_0[8], n_5, n_22);
  nand g19 (n_22, in_0[2], n_9);
  nor g20 (out_0[7], n_18, n_16);
  nor g21 (out_0[6], n_12, n_22);
  nor g22 (out_0[5], n_14, n_22);
  nor g23 (out_0[4], n_5, n_27);
  nand g24 (n_27, in_0[2], in_0[1]);
  nor g25 (out_0[3], n_18, n_22);
  nor g26 (out_0[2], n_12, n_27);
  nor g27 (out_0[1], n_14, n_27);
  nor g28 (out_0[0], n_18, n_27);
endmodule

module case_box_151(in_0, out_0);
  input [3:0] in_0;
  output [15:0] out_0;
  wire [3:0] in_0;
  wire [15:0] out_0;
  wire n_5, n_7, n_9, n_10, n_12, n_14, n_16, n_18;
  wire n_22, n_27, n_141, n_142;
  nor g1 (out_0[15], n_5, n_10);
  nand g2 (n_5, n_141, n_142);
  not g3 (n_141, in_0[3]);
  not g4 (n_142, in_0[0]);
  nand g5 (n_10, n_7, n_9);
  not g6 (n_7, in_0[2]);
  not g7 (n_9, in_0[1]);
  nor g8 (out_0[14], n_10, n_12);
  nand g9 (n_12, n_141, in_0[0]);
  nor g10 (out_0[13], n_10, n_14);
  nand g11 (n_14, in_0[3], n_142);
  nor g12 (out_0[12], n_5, n_16);
  nand g13 (n_16, n_7, in_0[1]);
  nor g14 (out_0[11], n_10, n_18);
  nand g15 (n_18, in_0[3], in_0[0]);
  nor g16 (out_0[10], n_12, n_16);
  nor g17 (out_0[9], n_14, n_16);
  nor g18 (out_0[8], n_5, n_22);
  nand g19 (n_22, in_0[2], n_9);
  nor g20 (out_0[7], n_18, n_16);
  nor g21 (out_0[6], n_12, n_22);
  nor g22 (out_0[5], n_14, n_22);
  nor g23 (out_0[4], n_5, n_27);
  nand g24 (n_27, in_0[2], in_0[1]);
  nor g25 (out_0[3], n_18, n_22);
  nor g26 (out_0[2], n_12, n_27);
  nor g27 (out_0[1], n_14, n_27);
  nor g28 (out_0[0], n_18, n_27);
endmodule

module LDTU_EncoderTMR_Nbits_1212_Nbits_3232(CLK_A, CLK_B, CLK_C,
     reset_A, reset_B, reset_C, baseline_flag, DATA_to_enc, DATA_32,
     Load, tmrError);
  input CLK_A, CLK_B, CLK_C, reset_A, reset_B, reset_C, baseline_flag;
  input [12:0] DATA_to_enc;
  output [31:0] DATA_32;
  output Load, tmrError;
  wire CLK_A, CLK_B, CLK_C, reset_A, reset_B, reset_C, baseline_flag;
  wire [12:0] DATA_to_enc;
  wire [31:0] DATA_32;
  wire Load, tmrError;
  wire [12:0] dDATA_to_enc_A;
  wire [12:0] dDATA_to_enc_B;
  wire [12:0] dDATA_to_enc_C;
  wire [3:0] Current_state_A;
  wire [3:0] Current_state_B;
  wire [3:0] Current_state_C;
  wire [31:0] DATA_32_A;
  wire [31:0] DATA_32_B;
  wire [31:0] DATA_32_C;
  wire [5:0] Ld_bas_1_C;
  wire [5:0] Ld_bas_2_C;
  wire [5:0] Ld_bas_3_C;
  wire [5:0] Ld_bas_4_C;
  wire [5:0] Ld_bas_5_C;
  wire [12:0] Ld_sign_1_C;
  wire [12:0] Ld_sign_2_C;
  wire [5:0] Ld_bas_1_B;
  wire [5:0] Ld_bas_2_B;
  wire [5:0] Ld_bas_3_B;
  wire [5:0] Ld_bas_4_B;
  wire [5:0] Ld_bas_5_B;
  wire [12:0] Ld_sign_1_B;
  wire [12:0] Ld_sign_2_B;
  wire [5:0] Ld_bas_1_A;
  wire [5:0] Ld_bas_2_A;
  wire [5:0] Ld_bas_3_A;
  wire [5:0] Ld_bas_4_A;
  wire [5:0] Ld_bas_5_A;
  wire [12:0] Ld_sign_1_A;
  wire [12:0] Ld_sign_2_A;
  wire DATA_32TmrError, LoadTmrError, Load_A, Load_B, Load_C,
       UNCONNECTED741, UNCONNECTED742, UNCONNECTED743;
  wire UNCONNECTED744, UNCONNECTED745, UNCONNECTED746, UNCONNECTED747,
       UNCONNECTED748, UNCONNECTED749, UNCONNECTED750, UNCONNECTED751;
  wire UNCONNECTED752, UNCONNECTED753, UNCONNECTED754, UNCONNECTED755,
       UNCONNECTED756, UNCONNECTED757, UNCONNECTED758, UNCONNECTED759;
  wire UNCONNECTED760, UNCONNECTED761, UNCONNECTED762, UNCONNECTED763,
       UNCONNECTED764, UNCONNECTED765, UNCONNECTED766, UNCONNECTED767;
  wire UNCONNECTED768, UNCONNECTED769, UNCONNECTED770, UNCONNECTED771,
       UNCONNECTED772, UNCONNECTED773, UNCONNECTED774, UNCONNECTED775;
  wire UNCONNECTED776, UNCONNECTED777, UNCONNECTED778, UNCONNECTED779,
       UNCONNECTED780, UNCONNECTED781, UNCONNECTED782, UNCONNECTED783;
  wire UNCONNECTED784, UNCONNECTED785, UNCONNECTED786, UNCONNECTED787,
       UNCONNECTED788, UNCONNECTED789, UNCONNECTED790, UNCONNECTED791;
  wire UNCONNECTED792, UNCONNECTED793, UNCONNECTED794, UNCONNECTED795,
       UNCONNECTED796, UNCONNECTED797, UNCONNECTED798, UNCONNECTED799;
  wire UNCONNECTED800, UNCONNECTED801, UNCONNECTED802, UNCONNECTED803,
       UNCONNECTED804, UNCONNECTED805, UNCONNECTED806, UNCONNECTED807;
  wire UNCONNECTED808, UNCONNECTED809, UNCONNECTED810, UNCONNECTED811,
       UNCONNECTED812, UNCONNECTED813, UNCONNECTED814, UNCONNECTED815;
  wire UNCONNECTED816, UNCONNECTED817, UNCONNECTED818, UNCONNECTED819,
       UNCONNECTED820, UNCONNECTED821, UNCONNECTED822, UNCONNECTED823;
  wire UNCONNECTED824, UNCONNECTED825, UNCONNECTED826, UNCONNECTED827,
       UNCONNECTED828, UNCONNECTED829, UNCONNECTED830, UNCONNECTED831;
  wire UNCONNECTED832, UNCONNECTED833, UNCONNECTED834, UNCONNECTED835,
       UNCONNECTED836, UNCONNECTED837, UNCONNECTED838, UNCONNECTED839;
  wire UNCONNECTED840, UNCONNECTED841, UNCONNECTED842, UNCONNECTED843,
       UNCONNECTED844, UNCONNECTED845, UNCONNECTED846, UNCONNECTED847;
  wire UNCONNECTED848, UNCONNECTED849, UNCONNECTED850, UNCONNECTED851,
       UNCONNECTED852, UNCONNECTED853, UNCONNECTED854, UNCONNECTED855;
  wire UNCONNECTED856, UNCONNECTED857, UNCONNECTED858, UNCONNECTED859,
       UNCONNECTED860, UNCONNECTED861, UNCONNECTED862, UNCONNECTED863;
  wire UNCONNECTED864, UNCONNECTED865, UNCONNECTED866, UNCONNECTED867,
       UNCONNECTED868, UNCONNECTED869, UNCONNECTED870, UNCONNECTED871;
  wire UNCONNECTED872, UNCONNECTED873, UNCONNECTED874, UNCONNECTED875,
       UNCONNECTED876, UNCONNECTED877, UNCONNECTED878, UNCONNECTED879;
  wire UNCONNECTED880, UNCONNECTED881, UNCONNECTED882, UNCONNECTED883,
       UNCONNECTED884, UNCONNECTED885, UNCONNECTED886, UNCONNECTED887;
  wire UNCONNECTED888, UNCONNECTED889, UNCONNECTED890, UNCONNECTED891,
       UNCONNECTED892, UNCONNECTED893, UNCONNECTED894, UNCONNECTED895;
  wire UNCONNECTED896, UNCONNECTED897, UNCONNECTED898, UNCONNECTED899,
       UNCONNECTED900, UNCONNECTED901, UNCONNECTED902, UNCONNECTED903;
  wire UNCONNECTED904, UNCONNECTED905, UNCONNECTED906, UNCONNECTED907,
       UNCONNECTED908, UNCONNECTED909, UNCONNECTED910, UNCONNECTED911;
  wire UNCONNECTED912, UNCONNECTED913, UNCONNECTED914, UNCONNECTED915,
       UNCONNECTED916, UNCONNECTED917, UNCONNECTED918, UNCONNECTED919;
  wire UNCONNECTED920, UNCONNECTED921, UNCONNECTED922, UNCONNECTED923,
       UNCONNECTED924, UNCONNECTED925, UNCONNECTED926, UNCONNECTED927;
  wire UNCONNECTED928, UNCONNECTED929, UNCONNECTED930, UNCONNECTED931,
       UNCONNECTED932, UNCONNECTED933, UNCONNECTED934, UNCONNECTED935;
  wire UNCONNECTED936, UNCONNECTED937, UNCONNECTED938, UNCONNECTED939,
       UNCONNECTED940, UNCONNECTED941, UNCONNECTED942, UNCONNECTED943;
  wire UNCONNECTED944, UNCONNECTED945, UNCONNECTED946, UNCONNECTED947,
       UNCONNECTED948, UNCONNECTED949, UNCONNECTED950, UNCONNECTED951;
  wire UNCONNECTED952, UNCONNECTED953, UNCONNECTED954, UNCONNECTED955,
       UNCONNECTED956, UNCONNECTED957, UNCONNECTED958, UNCONNECTED959;
  wire UNCONNECTED960, UNCONNECTED961, UNCONNECTED962, UNCONNECTED963,
       UNCONNECTED964, UNCONNECTED965, UNCONNECTED966, UNCONNECTED967;
  wire UNCONNECTED968, UNCONNECTED969, UNCONNECTED970, UNCONNECTED971,
       UNCONNECTED972, UNCONNECTED973, UNCONNECTED974, UNCONNECTED975;
  wire UNCONNECTED976, UNCONNECTED977, UNCONNECTED978, UNCONNECTED979,
       UNCONNECTED980, UNCONNECTED981, UNCONNECTED982, UNCONNECTED983;
  wire UNCONNECTED984, UNCONNECTED985, UNCONNECTED986, UNCONNECTED987,
       UNCONNECTED988, UNCONNECTED989, UNCONNECTED990, UNCONNECTED991;
  wire UNCONNECTED992, UNCONNECTED993, UNCONNECTED994, UNCONNECTED995,
       UNCONNECTED996, UNCONNECTED997, UNCONNECTED998, UNCONNECTED999;
  wire UNCONNECTED1000, UNCONNECTED1001, UNCONNECTED1002,
       UNCONNECTED1003, UNCONNECTED1004, UNCONNECTED1005,
       UNCONNECTED1006, UNCONNECTED1007;
  wire fsm_TmrError, n_796, n_797, n_798, n_799, n_800, n_801, n_802;
  wire n_803, n_804, n_805, n_806, n_807, n_808, n_809, n_810;
  wire n_811, n_812, n_813, n_814, n_815, n_816, n_817, n_818;
  wire n_819, n_820, n_821, n_822, n_823, n_824, n_825, n_826;
  wire n_827, n_828, n_829, n_830, n_831, n_832, n_833, n_834;
  wire n_835, n_836, n_837, n_838, n_839, n_840, n_841, n_842;
  wire n_843, n_844, n_845, n_846, n_847, n_848, n_849, n_850;
  wire n_851, n_852, n_853, n_854, n_855, n_856, n_857, n_858;
  wire n_859, n_860, n_861, n_862, n_863, n_864, n_865, n_866;
  wire n_867, n_868, n_869, n_870, n_871, n_872, n_873, n_874;
  wire n_875, n_876, n_877, n_878, n_879, n_880, n_881, n_882;
  wire n_883, n_884, n_885, n_886, n_887, n_888, n_889, n_890;
  wire n_891, n_892, n_893, n_894, n_895, n_896, n_897, n_898;
  wire n_899, n_900, n_901, n_902, n_903, n_904, n_905, n_906;
  wire n_907, n_908, n_909, n_910, n_911, n_912, n_913, n_914;
  wire n_915, n_916, n_917, n_918, n_919, n_920, n_921, n_922;
  wire n_923, n_924, n_925, n_926, n_927, n_928, n_929, n_930;
  wire n_931, n_932, n_933, n_934, n_935, n_936, n_937, n_938;
  wire n_939, n_940, n_941, n_942, n_943, n_944, n_945, n_966;
  wire n_967, n_972, n_982, n_983, n_984, n_989, n_999, n_1000;
  wire n_1001, n_1006, n_1016, n_1017, n_1853, n_1854, n_1855, n_1856;
  wire n_1857, n_1858, n_1859, n_1860, n_1861, n_1862, n_1863, n_1864;
  wire n_1865, n_1866, n_1867, n_1868, n_1869, n_1870;
  Delay_enc delay_A(CLK_A, reset_A, DATA_to_enc, dDATA_to_enc_A);
  Delay_enc delay_B(CLK_B, reset_B, DATA_to_enc, dDATA_to_enc_B);
  Delay_enc delay_C(CLK_C, reset_C, DATA_to_enc, dDATA_to_enc_C);
  LDTU_FSMTMR fsm(.CLK_A (CLK_A), .CLK_B (CLK_B), .CLK_C (CLK_C),
       .reset_A (reset_A), .reset_B (reset_B), .reset_C (reset_C),
       .baseline_flag (baseline_flag), .Current_state_A
       (Current_state_A), .Current_state_B (Current_state_B),
       .Current_state_C (Current_state_C), .tmrError (fsm_TmrError));
  majorityVoter LoadVoter(.inA (Load_A), .inB (Load_B), .inC (Load_C),
       .out (Load), .tmrErr (LoadTmrError));
  majorityVoter_WIDTH32 DATA_32Voter(.inA (DATA_32_A), .inB
       (DATA_32_B), .inC (DATA_32_C), .out (DATA_32), .tmrErr
       (DATA_32TmrError));
  case_box_147 ctl_Current_state_C_370_9(.in_0 (Current_state_C),
       .out_0 ({n_797, n_798, n_799, n_800, n_801, n_802, n_803, n_804,
       n_805, n_806, n_807, n_808, n_809, n_810, n_811, n_812}));
  mux mux_Load_C_370_9(.ctl ({n_797, n_798, n_799, n_800, n_801, n_802,
       n_803, n_804, n_805, n_806, n_807, n_808, n_809, n_810, n_811,
       n_812}), .in_0 (1'b0), .in_1 (1'b0), .in_2 (1'b1), .in_3 (1'b0),
       .in_4 (1'b1), .in_5 (1'b0), .in_6 (1'b1), .in_7 (1'b0), .in_8
       (1'b1), .in_9 (1'b1), .in_10 (1'b1), .in_11 (1'b0), .in_12
       (1'b1), .in_13 (1'b1), .in_14 (1'b1), .in_15 (1'b0), .z (n_813));
  bmux mux_Load_C_356_13(.ctl (n_796), .in_0 (n_813), .in_1 (1'b0), .z
       (UNCONNECTED741));
  bmux_241 mux_Ld_bas_1_C_356_13(.ctl (n_796), .in_0
       (dDATA_to_enc_C[5:0]), .in_1 (6'b000000), .z ({UNCONNECTED747,
       UNCONNECTED746, UNCONNECTED745, UNCONNECTED744, UNCONNECTED743,
       UNCONNECTED742}));
  bmux_241 mux_Ld_bas_2_C_356_13(.ctl (n_796), .in_0
       (dDATA_to_enc_C[5:0]), .in_1 (6'b000000), .z ({UNCONNECTED753,
       UNCONNECTED752, UNCONNECTED751, UNCONNECTED750, UNCONNECTED749,
       UNCONNECTED748}));
  bmux_241 mux_Ld_bas_3_C_356_13(.ctl (n_796), .in_0
       (dDATA_to_enc_C[5:0]), .in_1 (6'b000000), .z ({UNCONNECTED759,
       UNCONNECTED758, UNCONNECTED757, UNCONNECTED756, UNCONNECTED755,
       UNCONNECTED754}));
  bmux_241 mux_Ld_bas_4_C_356_13(.ctl (n_796), .in_0
       (dDATA_to_enc_C[5:0]), .in_1 (6'b000000), .z ({UNCONNECTED765,
       UNCONNECTED764, UNCONNECTED763, UNCONNECTED762, UNCONNECTED761,
       UNCONNECTED760}));
  bmux_241 mux_Ld_bas_5_C_356_13(.ctl (n_796), .in_0
       (dDATA_to_enc_C[5:0]), .in_1 (6'b000000), .z ({UNCONNECTED771,
       UNCONNECTED770, UNCONNECTED769, UNCONNECTED768, UNCONNECTED767,
       UNCONNECTED766}));
  bmux_169 mux_Ld_sign_1_C_356_13(.ctl (n_796), .in_0 (dDATA_to_enc_C),
       .in_1 (13'b0000000000000), .z ({UNCONNECTED784, UNCONNECTED783,
       UNCONNECTED782, UNCONNECTED781, UNCONNECTED780, UNCONNECTED779,
       UNCONNECTED778, UNCONNECTED777, UNCONNECTED776, UNCONNECTED775,
       UNCONNECTED774, UNCONNECTED773, UNCONNECTED772}));
  bmux_169 mux_Ld_sign_2_C_356_13(.ctl (n_796), .in_0 (dDATA_to_enc_C),
       .in_1 (13'b0000000000000), .z ({UNCONNECTED797, UNCONNECTED796,
       UNCONNECTED795, UNCONNECTED794, UNCONNECTED793, UNCONNECTED792,
       UNCONNECTED791, UNCONNECTED790, UNCONNECTED789, UNCONNECTED788,
       UNCONNECTED787, UNCONNECTED786, UNCONNECTED785}));
  mux_248 mux_DATA_32_C_370_9(.ctl ({n_797, n_799, n_801, n_803, n_805,
       n_806, n_807, n_809, n_810, n_811, n_812}), .in_0
       (32'b11110000000000000000000000000000), .in_1
       ({26'b10000001000000000000000000, Ld_bas_1_C}), .in_2
       ({20'b10000010000000000000, Ld_bas_2_C, Ld_bas_1_C}), .in_3
       ({14'b10000011000000, Ld_bas_3_C, Ld_bas_2_C, Ld_bas_1_C}),
       .in_4 ({8'b10000100, Ld_bas_4_C, Ld_bas_3_C, Ld_bas_2_C,
       Ld_bas_1_C}), .in_5 ({2'b01, Ld_bas_5_C, Ld_bas_4_C, Ld_bas_3_C,
       Ld_bas_2_C, Ld_bas_1_C}), .in_6 ({2'b01, Ld_bas_5_C, Ld_bas_4_C,
       Ld_bas_3_C, Ld_bas_2_C, Ld_bas_1_C}), .in_7
       ({19'b0010110101010101010, Ld_sign_1_C}), .in_8 ({6'b001010,
       Ld_sign_2_C, Ld_sign_1_C}), .in_9 ({6'b001010, Ld_sign_2_C,
       Ld_sign_1_C}), .in_10 (32'b11110000000000000000000000000000), .z
       ({n_845, n_844, n_843, n_842, n_841, n_840, n_839, n_838, n_837,
       n_836, n_835, n_834, n_833, n_832, n_831, n_830, n_829, n_828,
       n_827, n_826, n_825, n_824, n_823, n_822, n_821, n_820, n_819,
       n_818, n_817, n_816, n_815, n_814}));
  bmux_279 mux_DATA_32_C_356_13(.ctl (n_796), .in_0 ({n_845, n_844,
       n_843, n_842, n_841, n_840, n_839, n_838, n_837, n_836, n_835,
       n_834, n_833, n_832, n_831, n_830, n_829, n_828, n_827, n_826,
       n_825, n_824, n_823, n_822, n_821, n_820, n_819, n_818, n_817,
       n_816, n_815, n_814}), .in_1
       (32'b11110000000000000000000000000000), .z ({UNCONNECTED829,
       UNCONNECTED828, UNCONNECTED827, UNCONNECTED826, UNCONNECTED825,
       UNCONNECTED824, UNCONNECTED823, UNCONNECTED822, UNCONNECTED821,
       UNCONNECTED820, UNCONNECTED819, UNCONNECTED818, UNCONNECTED817,
       UNCONNECTED816, UNCONNECTED815, UNCONNECTED814, UNCONNECTED813,
       UNCONNECTED812, UNCONNECTED811, UNCONNECTED810, UNCONNECTED809,
       UNCONNECTED808, UNCONNECTED807, UNCONNECTED806, UNCONNECTED805,
       UNCONNECTED804, UNCONNECTED803, UNCONNECTED802, UNCONNECTED801,
       UNCONNECTED800, UNCONNECTED799, UNCONNECTED798}));
  case_box_148 ctl_Current_state_B_259_9(.in_0 (Current_state_B),
       .out_0 ({n_847, n_848, n_849, n_850, n_851, n_852, n_853, n_854,
       n_855, n_856, n_857, n_858, n_859, n_860, n_861, n_862}));
  mux mux_Load_B_259_9(.ctl ({n_847, n_848, n_849, n_850, n_851, n_852,
       n_853, n_854, n_855, n_856, n_857, n_858, n_859, n_860, n_861,
       n_862}), .in_0 (1'b0), .in_1 (1'b0), .in_2 (1'b1), .in_3 (1'b0),
       .in_4 (1'b1), .in_5 (1'b0), .in_6 (1'b1), .in_7 (1'b0), .in_8
       (1'b1), .in_9 (1'b1), .in_10 (1'b1), .in_11 (1'b0), .in_12
       (1'b1), .in_13 (1'b1), .in_14 (1'b1), .in_15 (1'b0), .z (n_863));
  bmux mux_Load_B_245_13(.ctl (n_846), .in_0 (n_863), .in_1 (1'b0), .z
       (UNCONNECTED830));
  bmux_241 mux_Ld_bas_1_B_245_13(.ctl (n_846), .in_0
       (dDATA_to_enc_B[5:0]), .in_1 (6'b000000), .z ({UNCONNECTED836,
       UNCONNECTED835, UNCONNECTED834, UNCONNECTED833, UNCONNECTED832,
       UNCONNECTED831}));
  bmux_241 mux_Ld_bas_2_B_245_13(.ctl (n_846), .in_0
       (dDATA_to_enc_B[5:0]), .in_1 (6'b000000), .z ({UNCONNECTED842,
       UNCONNECTED841, UNCONNECTED840, UNCONNECTED839, UNCONNECTED838,
       UNCONNECTED837}));
  bmux_241 mux_Ld_bas_3_B_245_13(.ctl (n_846), .in_0
       (dDATA_to_enc_B[5:0]), .in_1 (6'b000000), .z ({UNCONNECTED848,
       UNCONNECTED847, UNCONNECTED846, UNCONNECTED845, UNCONNECTED844,
       UNCONNECTED843}));
  bmux_241 mux_Ld_bas_4_B_245_13(.ctl (n_846), .in_0
       (dDATA_to_enc_B[5:0]), .in_1 (6'b000000), .z ({UNCONNECTED854,
       UNCONNECTED853, UNCONNECTED852, UNCONNECTED851, UNCONNECTED850,
       UNCONNECTED849}));
  bmux_241 mux_Ld_bas_5_B_245_13(.ctl (n_846), .in_0
       (dDATA_to_enc_B[5:0]), .in_1 (6'b000000), .z ({UNCONNECTED860,
       UNCONNECTED859, UNCONNECTED858, UNCONNECTED857, UNCONNECTED856,
       UNCONNECTED855}));
  bmux_169 mux_Ld_sign_1_B_245_13(.ctl (n_846), .in_0 (dDATA_to_enc_B),
       .in_1 (13'b0000000000000), .z ({UNCONNECTED873, UNCONNECTED872,
       UNCONNECTED871, UNCONNECTED870, UNCONNECTED869, UNCONNECTED868,
       UNCONNECTED867, UNCONNECTED866, UNCONNECTED865, UNCONNECTED864,
       UNCONNECTED863, UNCONNECTED862, UNCONNECTED861}));
  bmux_169 mux_Ld_sign_2_B_245_13(.ctl (n_846), .in_0 (dDATA_to_enc_B),
       .in_1 (13'b0000000000000), .z ({UNCONNECTED886, UNCONNECTED885,
       UNCONNECTED884, UNCONNECTED883, UNCONNECTED882, UNCONNECTED881,
       UNCONNECTED880, UNCONNECTED879, UNCONNECTED878, UNCONNECTED877,
       UNCONNECTED876, UNCONNECTED875, UNCONNECTED874}));
  mux_248 mux_DATA_32_B_259_9(.ctl ({n_847, n_849, n_851, n_853, n_855,
       n_856, n_857, n_859, n_860, n_861, n_862}), .in_0
       (32'b11110000000000000000000000000000), .in_1
       ({26'b10000001000000000000000000, Ld_bas_1_B}), .in_2
       ({20'b10000010000000000000, Ld_bas_2_B, Ld_bas_1_B}), .in_3
       ({14'b10000011000000, Ld_bas_3_B, Ld_bas_2_B, Ld_bas_1_B}),
       .in_4 ({8'b10000100, Ld_bas_4_B, Ld_bas_3_B, Ld_bas_2_B,
       Ld_bas_1_B}), .in_5 ({2'b01, Ld_bas_5_B, Ld_bas_4_B, Ld_bas_3_B,
       Ld_bas_2_B, Ld_bas_1_B}), .in_6 ({2'b01, Ld_bas_5_B, Ld_bas_4_B,
       Ld_bas_3_B, Ld_bas_2_B, Ld_bas_1_B}), .in_7
       ({19'b0010110101010101010, Ld_sign_1_B}), .in_8 ({6'b001010,
       Ld_sign_2_B, Ld_sign_1_B}), .in_9 ({6'b001010, Ld_sign_2_B,
       Ld_sign_1_B}), .in_10 (32'b11110000000000000000000000000000), .z
       ({n_895, n_894, n_893, n_892, n_891, n_890, n_889, n_888, n_887,
       n_886, n_885, n_884, n_883, n_882, n_881, n_880, n_879, n_878,
       n_877, n_876, n_875, n_874, n_873, n_872, n_871, n_870, n_869,
       n_868, n_867, n_866, n_865, n_864}));
  bmux_279 mux_DATA_32_B_245_13(.ctl (n_846), .in_0 ({n_895, n_894,
       n_893, n_892, n_891, n_890, n_889, n_888, n_887, n_886, n_885,
       n_884, n_883, n_882, n_881, n_880, n_879, n_878, n_877, n_876,
       n_875, n_874, n_873, n_872, n_871, n_870, n_869, n_868, n_867,
       n_866, n_865, n_864}), .in_1
       (32'b11110000000000000000000000000000), .z ({UNCONNECTED918,
       UNCONNECTED917, UNCONNECTED916, UNCONNECTED915, UNCONNECTED914,
       UNCONNECTED913, UNCONNECTED912, UNCONNECTED911, UNCONNECTED910,
       UNCONNECTED909, UNCONNECTED908, UNCONNECTED907, UNCONNECTED906,
       UNCONNECTED905, UNCONNECTED904, UNCONNECTED903, UNCONNECTED902,
       UNCONNECTED901, UNCONNECTED900, UNCONNECTED899, UNCONNECTED898,
       UNCONNECTED897, UNCONNECTED896, UNCONNECTED895, UNCONNECTED894,
       UNCONNECTED893, UNCONNECTED892, UNCONNECTED891, UNCONNECTED890,
       UNCONNECTED889, UNCONNECTED888, UNCONNECTED887}));
  case_box_151 ctl_Current_state_A_148_9(.in_0 (Current_state_A),
       .out_0 ({n_897, n_898, n_899, n_900, n_901, n_902, n_903, n_904,
       n_905, n_906, n_907, n_908, n_909, n_910, n_911, n_912}));
  mux mux_Load_A_148_9(.ctl ({n_897, n_898, n_899, n_900, n_901, n_902,
       n_903, n_904, n_905, n_906, n_907, n_908, n_909, n_910, n_911,
       n_912}), .in_0 (1'b0), .in_1 (1'b0), .in_2 (1'b1), .in_3 (1'b0),
       .in_4 (1'b1), .in_5 (1'b0), .in_6 (1'b1), .in_7 (1'b0), .in_8
       (1'b1), .in_9 (1'b1), .in_10 (1'b1), .in_11 (1'b0), .in_12
       (1'b1), .in_13 (1'b1), .in_14 (1'b1), .in_15 (1'b0), .z (n_913));
  bmux mux_Load_A_134_13(.ctl (n_896), .in_0 (n_913), .in_1 (1'b0), .z
       (UNCONNECTED919));
  bmux_241 mux_Ld_bas_1_A_134_13(.ctl (n_896), .in_0
       (dDATA_to_enc_A[5:0]), .in_1 (6'b000000), .z ({UNCONNECTED925,
       UNCONNECTED924, UNCONNECTED923, UNCONNECTED922, UNCONNECTED921,
       UNCONNECTED920}));
  bmux_241 mux_Ld_bas_2_A_134_13(.ctl (n_896), .in_0
       (dDATA_to_enc_A[5:0]), .in_1 (6'b000000), .z ({UNCONNECTED931,
       UNCONNECTED930, UNCONNECTED929, UNCONNECTED928, UNCONNECTED927,
       UNCONNECTED926}));
  bmux_241 mux_Ld_bas_3_A_134_13(.ctl (n_896), .in_0
       (dDATA_to_enc_A[5:0]), .in_1 (6'b000000), .z ({UNCONNECTED937,
       UNCONNECTED936, UNCONNECTED935, UNCONNECTED934, UNCONNECTED933,
       UNCONNECTED932}));
  bmux_241 mux_Ld_bas_4_A_134_13(.ctl (n_896), .in_0
       (dDATA_to_enc_A[5:0]), .in_1 (6'b000000), .z ({UNCONNECTED943,
       UNCONNECTED942, UNCONNECTED941, UNCONNECTED940, UNCONNECTED939,
       UNCONNECTED938}));
  bmux_241 mux_Ld_bas_5_A_134_13(.ctl (n_896), .in_0
       (dDATA_to_enc_A[5:0]), .in_1 (6'b000000), .z ({UNCONNECTED949,
       UNCONNECTED948, UNCONNECTED947, UNCONNECTED946, UNCONNECTED945,
       UNCONNECTED944}));
  bmux_169 mux_Ld_sign_1_A_134_13(.ctl (n_896), .in_0 (dDATA_to_enc_A),
       .in_1 (13'b0000000000000), .z ({UNCONNECTED962, UNCONNECTED961,
       UNCONNECTED960, UNCONNECTED959, UNCONNECTED958, UNCONNECTED957,
       UNCONNECTED956, UNCONNECTED955, UNCONNECTED954, UNCONNECTED953,
       UNCONNECTED952, UNCONNECTED951, UNCONNECTED950}));
  bmux_169 mux_Ld_sign_2_A_134_13(.ctl (n_896), .in_0 (dDATA_to_enc_A),
       .in_1 (13'b0000000000000), .z ({UNCONNECTED975, UNCONNECTED974,
       UNCONNECTED973, UNCONNECTED972, UNCONNECTED971, UNCONNECTED970,
       UNCONNECTED969, UNCONNECTED968, UNCONNECTED967, UNCONNECTED966,
       UNCONNECTED965, UNCONNECTED964, UNCONNECTED963}));
  mux_248 mux_DATA_32_A_148_9(.ctl ({n_897, n_899, n_901, n_903, n_905,
       n_906, n_907, n_909, n_910, n_911, n_912}), .in_0
       (32'b11110000000000000000000000000000), .in_1
       ({26'b10000001000000000000000000, Ld_bas_1_A}), .in_2
       ({20'b10000010000000000000, Ld_bas_2_A, Ld_bas_1_A}), .in_3
       ({14'b10000011000000, Ld_bas_3_A, Ld_bas_2_A, Ld_bas_1_A}),
       .in_4 ({8'b10000100, Ld_bas_4_A, Ld_bas_3_A, Ld_bas_2_A,
       Ld_bas_1_A}), .in_5 ({2'b01, Ld_bas_5_A, Ld_bas_4_A, Ld_bas_3_A,
       Ld_bas_2_A, Ld_bas_1_A}), .in_6 ({2'b01, Ld_bas_5_A, Ld_bas_4_A,
       Ld_bas_3_A, Ld_bas_2_A, Ld_bas_1_A}), .in_7
       ({19'b0010110101010101010, Ld_sign_1_A}), .in_8 ({6'b001010,
       Ld_sign_2_A, Ld_sign_1_A}), .in_9 ({6'b001010, Ld_sign_2_A,
       Ld_sign_1_A}), .in_10 (32'b11110000000000000000000000000000), .z
       ({n_945, n_944, n_943, n_942, n_941, n_940, n_939, n_938, n_937,
       n_936, n_935, n_934, n_933, n_932, n_931, n_930, n_929, n_928,
       n_927, n_926, n_925, n_924, n_923, n_922, n_921, n_920, n_919,
       n_918, n_917, n_916, n_915, n_914}));
  bmux_279 mux_DATA_32_A_134_13(.ctl (n_896), .in_0 ({n_945, n_944,
       n_943, n_942, n_941, n_940, n_939, n_938, n_937, n_936, n_935,
       n_934, n_933, n_932, n_931, n_930, n_929, n_928, n_927, n_926,
       n_925, n_924, n_923, n_922, n_921, n_920, n_919, n_918, n_917,
       n_916, n_915, n_914}), .in_1
       (32'b11110000000000000000000000000000), .z ({UNCONNECTED1007,
       UNCONNECTED1006, UNCONNECTED1005, UNCONNECTED1004,
       UNCONNECTED1003, UNCONNECTED1002, UNCONNECTED1001,
       UNCONNECTED1000, UNCONNECTED999, UNCONNECTED998, UNCONNECTED997,
       UNCONNECTED996, UNCONNECTED995, UNCONNECTED994, UNCONNECTED993,
       UNCONNECTED992, UNCONNECTED991, UNCONNECTED990, UNCONNECTED989,
       UNCONNECTED988, UNCONNECTED987, UNCONNECTED986, UNCONNECTED985,
       UNCONNECTED984, UNCONNECTED983, UNCONNECTED982, UNCONNECTED981,
       UNCONNECTED980, UNCONNECTED979, UNCONNECTED978, UNCONNECTED977,
       UNCONNECTED976}));
  or g28 (n_1017, LoadTmrError, DATA_32TmrError);
  or g29 (tmrError, n_1017, fsm_TmrError);
  or g33 (n_966, n_909, n_906);
  or g34 (n_967, n_911, n_966);
  or g50 (n_983, n_859, n_856);
  or g51 (n_984, n_861, n_983);
  or g67 (n_1000, n_809, n_806);
  or g68 (n_1001, n_811, n_1000);
  CDN_flop \Ld_bas_1_A_reg[0] (.clk (CLK_A), .d (dDATA_to_enc_A[0]),
       .sena (n_967), .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd
       (1'b0), .q (Ld_bas_1_A[0]));
  CDN_flop \Ld_bas_1_A_reg[1] (.clk (CLK_A), .d (dDATA_to_enc_A[1]),
       .sena (n_967), .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd
       (1'b0), .q (Ld_bas_1_A[1]));
  CDN_flop \Ld_bas_1_A_reg[2] (.clk (CLK_A), .d (dDATA_to_enc_A[2]),
       .sena (n_967), .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd
       (1'b0), .q (Ld_bas_1_A[2]));
  CDN_flop \Ld_bas_1_A_reg[3] (.clk (CLK_A), .d (dDATA_to_enc_A[3]),
       .sena (n_967), .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd
       (1'b0), .q (Ld_bas_1_A[3]));
  CDN_flop \Ld_bas_1_A_reg[4] (.clk (CLK_A), .d (dDATA_to_enc_A[4]),
       .sena (n_967), .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd
       (1'b0), .q (Ld_bas_1_A[4]));
  CDN_flop \Ld_bas_1_A_reg[5] (.clk (CLK_A), .d (dDATA_to_enc_A[5]),
       .sena (n_967), .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd
       (1'b0), .q (Ld_bas_1_A[5]));
  CDN_flop \Ld_bas_2_A_reg[0] (.clk (CLK_A), .d (dDATA_to_enc_A[0]),
       .sena (n_898), .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd
       (1'b0), .q (Ld_bas_2_A[0]));
  CDN_flop \Ld_bas_2_A_reg[1] (.clk (CLK_A), .d (dDATA_to_enc_A[1]),
       .sena (n_898), .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd
       (1'b0), .q (Ld_bas_2_A[1]));
  CDN_flop \Ld_bas_2_A_reg[2] (.clk (CLK_A), .d (dDATA_to_enc_A[2]),
       .sena (n_898), .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd
       (1'b0), .q (Ld_bas_2_A[2]));
  CDN_flop \Ld_bas_2_A_reg[3] (.clk (CLK_A), .d (dDATA_to_enc_A[3]),
       .sena (n_898), .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd
       (1'b0), .q (Ld_bas_2_A[3]));
  CDN_flop \Ld_bas_2_A_reg[4] (.clk (CLK_A), .d (dDATA_to_enc_A[4]),
       .sena (n_898), .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd
       (1'b0), .q (Ld_bas_2_A[4]));
  CDN_flop \Ld_bas_2_A_reg[5] (.clk (CLK_A), .d (dDATA_to_enc_A[5]),
       .sena (n_898), .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd
       (1'b0), .q (Ld_bas_2_A[5]));
  CDN_flop \Ld_bas_3_A_reg[0] (.clk (CLK_A), .d (dDATA_to_enc_A[0]),
       .sena (n_900), .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd
       (1'b0), .q (Ld_bas_3_A[0]));
  CDN_flop \Ld_bas_3_A_reg[1] (.clk (CLK_A), .d (dDATA_to_enc_A[1]),
       .sena (n_900), .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd
       (1'b0), .q (Ld_bas_3_A[1]));
  CDN_flop \Ld_bas_3_A_reg[2] (.clk (CLK_A), .d (dDATA_to_enc_A[2]),
       .sena (n_900), .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd
       (1'b0), .q (Ld_bas_3_A[2]));
  CDN_flop \Ld_bas_3_A_reg[3] (.clk (CLK_A), .d (dDATA_to_enc_A[3]),
       .sena (n_900), .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd
       (1'b0), .q (Ld_bas_3_A[3]));
  CDN_flop \Ld_bas_3_A_reg[4] (.clk (CLK_A), .d (dDATA_to_enc_A[4]),
       .sena (n_900), .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd
       (1'b0), .q (Ld_bas_3_A[4]));
  CDN_flop \Ld_bas_3_A_reg[5] (.clk (CLK_A), .d (dDATA_to_enc_A[5]),
       .sena (n_900), .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd
       (1'b0), .q (Ld_bas_3_A[5]));
  CDN_flop \Ld_bas_4_A_reg[0] (.clk (CLK_A), .d (dDATA_to_enc_A[0]),
       .sena (n_902), .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd
       (1'b0), .q (Ld_bas_4_A[0]));
  CDN_flop \Ld_bas_4_A_reg[1] (.clk (CLK_A), .d (dDATA_to_enc_A[1]),
       .sena (n_902), .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd
       (1'b0), .q (Ld_bas_4_A[1]));
  CDN_flop \Ld_bas_4_A_reg[2] (.clk (CLK_A), .d (dDATA_to_enc_A[2]),
       .sena (n_902), .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd
       (1'b0), .q (Ld_bas_4_A[2]));
  CDN_flop \Ld_bas_4_A_reg[3] (.clk (CLK_A), .d (dDATA_to_enc_A[3]),
       .sena (n_902), .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd
       (1'b0), .q (Ld_bas_4_A[3]));
  CDN_flop \Ld_bas_4_A_reg[4] (.clk (CLK_A), .d (dDATA_to_enc_A[4]),
       .sena (n_902), .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd
       (1'b0), .q (Ld_bas_4_A[4]));
  CDN_flop \Ld_bas_4_A_reg[5] (.clk (CLK_A), .d (dDATA_to_enc_A[5]),
       .sena (n_902), .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd
       (1'b0), .q (Ld_bas_4_A[5]));
  CDN_flop \Ld_bas_5_A_reg[0] (.clk (CLK_A), .d (dDATA_to_enc_A[0]),
       .sena (n_904), .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd
       (1'b0), .q (Ld_bas_5_A[0]));
  CDN_flop \Ld_bas_5_A_reg[1] (.clk (CLK_A), .d (dDATA_to_enc_A[1]),
       .sena (n_904), .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd
       (1'b0), .q (Ld_bas_5_A[1]));
  CDN_flop \Ld_bas_5_A_reg[2] (.clk (CLK_A), .d (dDATA_to_enc_A[2]),
       .sena (n_904), .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd
       (1'b0), .q (Ld_bas_5_A[2]));
  CDN_flop \Ld_bas_5_A_reg[3] (.clk (CLK_A), .d (dDATA_to_enc_A[3]),
       .sena (n_904), .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd
       (1'b0), .q (Ld_bas_5_A[3]));
  CDN_flop \Ld_bas_5_A_reg[4] (.clk (CLK_A), .d (dDATA_to_enc_A[4]),
       .sena (n_904), .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd
       (1'b0), .q (Ld_bas_5_A[4]));
  CDN_flop \Ld_bas_5_A_reg[5] (.clk (CLK_A), .d (dDATA_to_enc_A[5]),
       .sena (n_904), .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd
       (1'b0), .q (Ld_bas_5_A[5]));
  CDN_flop \Ld_sign_1_A_reg[0] (.clk (CLK_A), .d (dDATA_to_enc_A[0]),
       .sena (n_972), .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd
       (1'b0), .q (Ld_sign_1_A[0]));
  CDN_flop \Ld_sign_1_A_reg[1] (.clk (CLK_A), .d (dDATA_to_enc_A[1]),
       .sena (n_972), .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd
       (1'b0), .q (Ld_sign_1_A[1]));
  CDN_flop \Ld_sign_1_A_reg[2] (.clk (CLK_A), .d (dDATA_to_enc_A[2]),
       .sena (n_972), .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd
       (1'b0), .q (Ld_sign_1_A[2]));
  CDN_flop \Ld_sign_1_A_reg[3] (.clk (CLK_A), .d (dDATA_to_enc_A[3]),
       .sena (n_972), .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd
       (1'b0), .q (Ld_sign_1_A[3]));
  CDN_flop \Ld_sign_1_A_reg[4] (.clk (CLK_A), .d (dDATA_to_enc_A[4]),
       .sena (n_972), .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd
       (1'b0), .q (Ld_sign_1_A[4]));
  CDN_flop \Ld_sign_1_A_reg[5] (.clk (CLK_A), .d (dDATA_to_enc_A[5]),
       .sena (n_972), .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd
       (1'b0), .q (Ld_sign_1_A[5]));
  CDN_flop \Ld_sign_1_A_reg[6] (.clk (CLK_A), .d (dDATA_to_enc_A[6]),
       .sena (n_972), .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd
       (1'b0), .q (Ld_sign_1_A[6]));
  CDN_flop \Ld_sign_1_A_reg[7] (.clk (CLK_A), .d (dDATA_to_enc_A[7]),
       .sena (n_972), .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd
       (1'b0), .q (Ld_sign_1_A[7]));
  CDN_flop \Ld_sign_1_A_reg[8] (.clk (CLK_A), .d (dDATA_to_enc_A[8]),
       .sena (n_972), .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd
       (1'b0), .q (Ld_sign_1_A[8]));
  CDN_flop \Ld_sign_1_A_reg[9] (.clk (CLK_A), .d (dDATA_to_enc_A[9]),
       .sena (n_972), .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd
       (1'b0), .q (Ld_sign_1_A[9]));
  CDN_flop \Ld_sign_1_A_reg[10] (.clk (CLK_A), .d (dDATA_to_enc_A[10]),
       .sena (n_972), .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd
       (1'b0), .q (Ld_sign_1_A[10]));
  CDN_flop \Ld_sign_1_A_reg[11] (.clk (CLK_A), .d (dDATA_to_enc_A[11]),
       .sena (n_972), .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd
       (1'b0), .q (Ld_sign_1_A[11]));
  CDN_flop \Ld_sign_1_A_reg[12] (.clk (CLK_A), .d (dDATA_to_enc_A[12]),
       .sena (n_972), .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd
       (1'b0), .q (Ld_sign_1_A[12]));
  CDN_flop \Ld_sign_2_A_reg[0] (.clk (CLK_A), .d (dDATA_to_enc_A[0]),
       .sena (n_908), .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd
       (1'b0), .q (Ld_sign_2_A[0]));
  CDN_flop \Ld_sign_2_A_reg[1] (.clk (CLK_A), .d (dDATA_to_enc_A[1]),
       .sena (n_908), .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd
       (1'b0), .q (Ld_sign_2_A[1]));
  CDN_flop \Ld_sign_2_A_reg[2] (.clk (CLK_A), .d (dDATA_to_enc_A[2]),
       .sena (n_908), .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd
       (1'b0), .q (Ld_sign_2_A[2]));
  CDN_flop \Ld_sign_2_A_reg[3] (.clk (CLK_A), .d (dDATA_to_enc_A[3]),
       .sena (n_908), .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd
       (1'b0), .q (Ld_sign_2_A[3]));
  CDN_flop \Ld_sign_2_A_reg[4] (.clk (CLK_A), .d (dDATA_to_enc_A[4]),
       .sena (n_908), .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd
       (1'b0), .q (Ld_sign_2_A[4]));
  CDN_flop \Ld_sign_2_A_reg[5] (.clk (CLK_A), .d (dDATA_to_enc_A[5]),
       .sena (n_908), .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd
       (1'b0), .q (Ld_sign_2_A[5]));
  CDN_flop \Ld_sign_2_A_reg[6] (.clk (CLK_A), .d (dDATA_to_enc_A[6]),
       .sena (n_908), .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd
       (1'b0), .q (Ld_sign_2_A[6]));
  CDN_flop \Ld_sign_2_A_reg[7] (.clk (CLK_A), .d (dDATA_to_enc_A[7]),
       .sena (n_908), .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd
       (1'b0), .q (Ld_sign_2_A[7]));
  CDN_flop \Ld_sign_2_A_reg[8] (.clk (CLK_A), .d (dDATA_to_enc_A[8]),
       .sena (n_908), .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd
       (1'b0), .q (Ld_sign_2_A[8]));
  CDN_flop \Ld_sign_2_A_reg[9] (.clk (CLK_A), .d (dDATA_to_enc_A[9]),
       .sena (n_908), .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd
       (1'b0), .q (Ld_sign_2_A[9]));
  CDN_flop \Ld_sign_2_A_reg[10] (.clk (CLK_A), .d (dDATA_to_enc_A[10]),
       .sena (n_908), .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd
       (1'b0), .q (Ld_sign_2_A[10]));
  CDN_flop \Ld_sign_2_A_reg[11] (.clk (CLK_A), .d (dDATA_to_enc_A[11]),
       .sena (n_908), .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd
       (1'b0), .q (Ld_sign_2_A[11]));
  CDN_flop \Ld_sign_2_A_reg[12] (.clk (CLK_A), .d (dDATA_to_enc_A[12]),
       .sena (n_908), .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd
       (1'b0), .q (Ld_sign_2_A[12]));
  CDN_flop \DATA_32_A_reg[0] (.clk (CLK_A), .d (n_914), .sena (n_982),
       .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd (1'b0), .q
       (DATA_32_A[0]));
  CDN_flop \DATA_32_A_reg[1] (.clk (CLK_A), .d (n_915), .sena (n_982),
       .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd (1'b0), .q
       (DATA_32_A[1]));
  CDN_flop \DATA_32_A_reg[2] (.clk (CLK_A), .d (n_916), .sena (n_982),
       .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd (1'b0), .q
       (DATA_32_A[2]));
  CDN_flop \DATA_32_A_reg[3] (.clk (CLK_A), .d (n_917), .sena (n_982),
       .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd (1'b0), .q
       (DATA_32_A[3]));
  CDN_flop \DATA_32_A_reg[4] (.clk (CLK_A), .d (n_918), .sena (n_982),
       .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd (1'b0), .q
       (DATA_32_A[4]));
  CDN_flop \DATA_32_A_reg[5] (.clk (CLK_A), .d (n_919), .sena (n_982),
       .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd (1'b0), .q
       (DATA_32_A[5]));
  CDN_flop \DATA_32_A_reg[6] (.clk (CLK_A), .d (n_920), .sena (n_982),
       .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd (1'b0), .q
       (DATA_32_A[6]));
  CDN_flop \DATA_32_A_reg[7] (.clk (CLK_A), .d (n_921), .sena (n_982),
       .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd (1'b0), .q
       (DATA_32_A[7]));
  CDN_flop \DATA_32_A_reg[8] (.clk (CLK_A), .d (n_922), .sena (n_982),
       .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd (1'b0), .q
       (DATA_32_A[8]));
  CDN_flop \DATA_32_A_reg[9] (.clk (CLK_A), .d (n_923), .sena (n_982),
       .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd (1'b0), .q
       (DATA_32_A[9]));
  CDN_flop \DATA_32_A_reg[10] (.clk (CLK_A), .d (n_924), .sena (n_982),
       .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd (1'b0), .q
       (DATA_32_A[10]));
  CDN_flop \DATA_32_A_reg[11] (.clk (CLK_A), .d (n_925), .sena (n_982),
       .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd (1'b0), .q
       (DATA_32_A[11]));
  CDN_flop \DATA_32_A_reg[12] (.clk (CLK_A), .d (n_926), .sena (n_982),
       .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd (1'b0), .q
       (DATA_32_A[12]));
  CDN_flop \DATA_32_A_reg[13] (.clk (CLK_A), .d (n_927), .sena (n_982),
       .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd (1'b0), .q
       (DATA_32_A[13]));
  CDN_flop \DATA_32_A_reg[14] (.clk (CLK_A), .d (n_928), .sena (n_982),
       .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd (1'b0), .q
       (DATA_32_A[14]));
  CDN_flop \DATA_32_A_reg[15] (.clk (CLK_A), .d (n_929), .sena (n_982),
       .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd (1'b0), .q
       (DATA_32_A[15]));
  CDN_flop \DATA_32_A_reg[16] (.clk (CLK_A), .d (n_930), .sena (n_982),
       .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd (1'b0), .q
       (DATA_32_A[16]));
  CDN_flop \DATA_32_A_reg[17] (.clk (CLK_A), .d (n_931), .sena (n_982),
       .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd (1'b0), .q
       (DATA_32_A[17]));
  CDN_flop \DATA_32_A_reg[18] (.clk (CLK_A), .d (n_932), .sena (n_982),
       .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd (1'b0), .q
       (DATA_32_A[18]));
  CDN_flop \DATA_32_A_reg[19] (.clk (CLK_A), .d (n_933), .sena (n_982),
       .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd (1'b0), .q
       (DATA_32_A[19]));
  CDN_flop \DATA_32_A_reg[20] (.clk (CLK_A), .d (n_934), .sena (n_982),
       .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd (1'b0), .q
       (DATA_32_A[20]));
  CDN_flop \DATA_32_A_reg[21] (.clk (CLK_A), .d (n_935), .sena (n_982),
       .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd (1'b0), .q
       (DATA_32_A[21]));
  CDN_flop \DATA_32_A_reg[22] (.clk (CLK_A), .d (n_936), .sena (n_982),
       .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd (1'b0), .q
       (DATA_32_A[22]));
  CDN_flop \DATA_32_A_reg[23] (.clk (CLK_A), .d (n_937), .sena (n_982),
       .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd (1'b0), .q
       (DATA_32_A[23]));
  CDN_flop \DATA_32_A_reg[24] (.clk (CLK_A), .d (n_938), .sena (n_982),
       .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd (1'b0), .q
       (DATA_32_A[24]));
  CDN_flop \DATA_32_A_reg[25] (.clk (CLK_A), .d (n_939), .sena (n_982),
       .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd (1'b0), .q
       (DATA_32_A[25]));
  CDN_flop \DATA_32_A_reg[26] (.clk (CLK_A), .d (n_940), .sena (n_982),
       .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd (1'b0), .q
       (DATA_32_A[26]));
  CDN_flop \DATA_32_A_reg[27] (.clk (CLK_A), .d (n_941), .sena (n_982),
       .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd (1'b0), .q
       (DATA_32_A[27]));
  CDN_flop \DATA_32_A_reg[28] (.clk (CLK_A), .d (n_942), .sena (n_982),
       .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd (1'b1), .q
       (DATA_32_A[28]));
  CDN_flop \DATA_32_A_reg[29] (.clk (CLK_A), .d (n_943), .sena (n_982),
       .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd (1'b1), .q
       (DATA_32_A[29]));
  CDN_flop \DATA_32_A_reg[30] (.clk (CLK_A), .d (n_944), .sena (n_982),
       .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd (1'b1), .q
       (DATA_32_A[30]));
  CDN_flop \DATA_32_A_reg[31] (.clk (CLK_A), .d (n_945), .sena (n_982),
       .aclr (1'b0), .apre (1'b0), .srl (n_896), .srd (1'b1), .q
       (DATA_32_A[31]));
  CDN_flop Load_A_reg(.clk (CLK_A), .d (n_913), .sena (1'b1), .aclr
       (1'b0), .apre (1'b0), .srl (n_896), .srd (1'b0), .q (Load_A));
  CDN_flop \Ld_bas_1_B_reg[0] (.clk (CLK_B), .d (dDATA_to_enc_B[0]),
       .sena (n_984), .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd
       (1'b0), .q (Ld_bas_1_B[0]));
  CDN_flop \Ld_bas_1_B_reg[1] (.clk (CLK_B), .d (dDATA_to_enc_B[1]),
       .sena (n_984), .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd
       (1'b0), .q (Ld_bas_1_B[1]));
  CDN_flop \Ld_bas_1_B_reg[2] (.clk (CLK_B), .d (dDATA_to_enc_B[2]),
       .sena (n_984), .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd
       (1'b0), .q (Ld_bas_1_B[2]));
  CDN_flop \Ld_bas_1_B_reg[3] (.clk (CLK_B), .d (dDATA_to_enc_B[3]),
       .sena (n_984), .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd
       (1'b0), .q (Ld_bas_1_B[3]));
  CDN_flop \Ld_bas_1_B_reg[4] (.clk (CLK_B), .d (dDATA_to_enc_B[4]),
       .sena (n_984), .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd
       (1'b0), .q (Ld_bas_1_B[4]));
  CDN_flop \Ld_bas_1_B_reg[5] (.clk (CLK_B), .d (dDATA_to_enc_B[5]),
       .sena (n_984), .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd
       (1'b0), .q (Ld_bas_1_B[5]));
  CDN_flop \Ld_bas_2_B_reg[0] (.clk (CLK_B), .d (dDATA_to_enc_B[0]),
       .sena (n_848), .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd
       (1'b0), .q (Ld_bas_2_B[0]));
  CDN_flop \Ld_bas_2_B_reg[1] (.clk (CLK_B), .d (dDATA_to_enc_B[1]),
       .sena (n_848), .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd
       (1'b0), .q (Ld_bas_2_B[1]));
  CDN_flop \Ld_bas_2_B_reg[2] (.clk (CLK_B), .d (dDATA_to_enc_B[2]),
       .sena (n_848), .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd
       (1'b0), .q (Ld_bas_2_B[2]));
  CDN_flop \Ld_bas_2_B_reg[3] (.clk (CLK_B), .d (dDATA_to_enc_B[3]),
       .sena (n_848), .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd
       (1'b0), .q (Ld_bas_2_B[3]));
  CDN_flop \Ld_bas_2_B_reg[4] (.clk (CLK_B), .d (dDATA_to_enc_B[4]),
       .sena (n_848), .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd
       (1'b0), .q (Ld_bas_2_B[4]));
  CDN_flop \Ld_bas_2_B_reg[5] (.clk (CLK_B), .d (dDATA_to_enc_B[5]),
       .sena (n_848), .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd
       (1'b0), .q (Ld_bas_2_B[5]));
  CDN_flop \Ld_bas_3_B_reg[0] (.clk (CLK_B), .d (dDATA_to_enc_B[0]),
       .sena (n_850), .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd
       (1'b0), .q (Ld_bas_3_B[0]));
  CDN_flop \Ld_bas_3_B_reg[1] (.clk (CLK_B), .d (dDATA_to_enc_B[1]),
       .sena (n_850), .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd
       (1'b0), .q (Ld_bas_3_B[1]));
  CDN_flop \Ld_bas_3_B_reg[2] (.clk (CLK_B), .d (dDATA_to_enc_B[2]),
       .sena (n_850), .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd
       (1'b0), .q (Ld_bas_3_B[2]));
  CDN_flop \Ld_bas_3_B_reg[3] (.clk (CLK_B), .d (dDATA_to_enc_B[3]),
       .sena (n_850), .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd
       (1'b0), .q (Ld_bas_3_B[3]));
  CDN_flop \Ld_bas_3_B_reg[4] (.clk (CLK_B), .d (dDATA_to_enc_B[4]),
       .sena (n_850), .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd
       (1'b0), .q (Ld_bas_3_B[4]));
  CDN_flop \Ld_bas_3_B_reg[5] (.clk (CLK_B), .d (dDATA_to_enc_B[5]),
       .sena (n_850), .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd
       (1'b0), .q (Ld_bas_3_B[5]));
  CDN_flop \Ld_bas_4_B_reg[0] (.clk (CLK_B), .d (dDATA_to_enc_B[0]),
       .sena (n_852), .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd
       (1'b0), .q (Ld_bas_4_B[0]));
  CDN_flop \Ld_bas_4_B_reg[1] (.clk (CLK_B), .d (dDATA_to_enc_B[1]),
       .sena (n_852), .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd
       (1'b0), .q (Ld_bas_4_B[1]));
  CDN_flop \Ld_bas_4_B_reg[2] (.clk (CLK_B), .d (dDATA_to_enc_B[2]),
       .sena (n_852), .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd
       (1'b0), .q (Ld_bas_4_B[2]));
  CDN_flop \Ld_bas_4_B_reg[3] (.clk (CLK_B), .d (dDATA_to_enc_B[3]),
       .sena (n_852), .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd
       (1'b0), .q (Ld_bas_4_B[3]));
  CDN_flop \Ld_bas_4_B_reg[4] (.clk (CLK_B), .d (dDATA_to_enc_B[4]),
       .sena (n_852), .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd
       (1'b0), .q (Ld_bas_4_B[4]));
  CDN_flop \Ld_bas_4_B_reg[5] (.clk (CLK_B), .d (dDATA_to_enc_B[5]),
       .sena (n_852), .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd
       (1'b0), .q (Ld_bas_4_B[5]));
  CDN_flop \Ld_bas_5_B_reg[0] (.clk (CLK_B), .d (dDATA_to_enc_B[0]),
       .sena (n_854), .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd
       (1'b0), .q (Ld_bas_5_B[0]));
  CDN_flop \Ld_bas_5_B_reg[1] (.clk (CLK_B), .d (dDATA_to_enc_B[1]),
       .sena (n_854), .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd
       (1'b0), .q (Ld_bas_5_B[1]));
  CDN_flop \Ld_bas_5_B_reg[2] (.clk (CLK_B), .d (dDATA_to_enc_B[2]),
       .sena (n_854), .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd
       (1'b0), .q (Ld_bas_5_B[2]));
  CDN_flop \Ld_bas_5_B_reg[3] (.clk (CLK_B), .d (dDATA_to_enc_B[3]),
       .sena (n_854), .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd
       (1'b0), .q (Ld_bas_5_B[3]));
  CDN_flop \Ld_bas_5_B_reg[4] (.clk (CLK_B), .d (dDATA_to_enc_B[4]),
       .sena (n_854), .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd
       (1'b0), .q (Ld_bas_5_B[4]));
  CDN_flop \Ld_bas_5_B_reg[5] (.clk (CLK_B), .d (dDATA_to_enc_B[5]),
       .sena (n_854), .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd
       (1'b0), .q (Ld_bas_5_B[5]));
  CDN_flop \Ld_sign_1_B_reg[0] (.clk (CLK_B), .d (dDATA_to_enc_B[0]),
       .sena (n_989), .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd
       (1'b0), .q (Ld_sign_1_B[0]));
  CDN_flop \Ld_sign_1_B_reg[1] (.clk (CLK_B), .d (dDATA_to_enc_B[1]),
       .sena (n_989), .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd
       (1'b0), .q (Ld_sign_1_B[1]));
  CDN_flop \Ld_sign_1_B_reg[2] (.clk (CLK_B), .d (dDATA_to_enc_B[2]),
       .sena (n_989), .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd
       (1'b0), .q (Ld_sign_1_B[2]));
  CDN_flop \Ld_sign_1_B_reg[3] (.clk (CLK_B), .d (dDATA_to_enc_B[3]),
       .sena (n_989), .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd
       (1'b0), .q (Ld_sign_1_B[3]));
  CDN_flop \Ld_sign_1_B_reg[4] (.clk (CLK_B), .d (dDATA_to_enc_B[4]),
       .sena (n_989), .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd
       (1'b0), .q (Ld_sign_1_B[4]));
  CDN_flop \Ld_sign_1_B_reg[5] (.clk (CLK_B), .d (dDATA_to_enc_B[5]),
       .sena (n_989), .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd
       (1'b0), .q (Ld_sign_1_B[5]));
  CDN_flop \Ld_sign_1_B_reg[6] (.clk (CLK_B), .d (dDATA_to_enc_B[6]),
       .sena (n_989), .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd
       (1'b0), .q (Ld_sign_1_B[6]));
  CDN_flop \Ld_sign_1_B_reg[7] (.clk (CLK_B), .d (dDATA_to_enc_B[7]),
       .sena (n_989), .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd
       (1'b0), .q (Ld_sign_1_B[7]));
  CDN_flop \Ld_sign_1_B_reg[8] (.clk (CLK_B), .d (dDATA_to_enc_B[8]),
       .sena (n_989), .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd
       (1'b0), .q (Ld_sign_1_B[8]));
  CDN_flop \Ld_sign_1_B_reg[9] (.clk (CLK_B), .d (dDATA_to_enc_B[9]),
       .sena (n_989), .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd
       (1'b0), .q (Ld_sign_1_B[9]));
  CDN_flop \Ld_sign_1_B_reg[10] (.clk (CLK_B), .d (dDATA_to_enc_B[10]),
       .sena (n_989), .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd
       (1'b0), .q (Ld_sign_1_B[10]));
  CDN_flop \Ld_sign_1_B_reg[11] (.clk (CLK_B), .d (dDATA_to_enc_B[11]),
       .sena (n_989), .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd
       (1'b0), .q (Ld_sign_1_B[11]));
  CDN_flop \Ld_sign_1_B_reg[12] (.clk (CLK_B), .d (dDATA_to_enc_B[12]),
       .sena (n_989), .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd
       (1'b0), .q (Ld_sign_1_B[12]));
  CDN_flop \Ld_sign_2_B_reg[0] (.clk (CLK_B), .d (dDATA_to_enc_B[0]),
       .sena (n_858), .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd
       (1'b0), .q (Ld_sign_2_B[0]));
  CDN_flop \Ld_sign_2_B_reg[1] (.clk (CLK_B), .d (dDATA_to_enc_B[1]),
       .sena (n_858), .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd
       (1'b0), .q (Ld_sign_2_B[1]));
  CDN_flop \Ld_sign_2_B_reg[2] (.clk (CLK_B), .d (dDATA_to_enc_B[2]),
       .sena (n_858), .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd
       (1'b0), .q (Ld_sign_2_B[2]));
  CDN_flop \Ld_sign_2_B_reg[3] (.clk (CLK_B), .d (dDATA_to_enc_B[3]),
       .sena (n_858), .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd
       (1'b0), .q (Ld_sign_2_B[3]));
  CDN_flop \Ld_sign_2_B_reg[4] (.clk (CLK_B), .d (dDATA_to_enc_B[4]),
       .sena (n_858), .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd
       (1'b0), .q (Ld_sign_2_B[4]));
  CDN_flop \Ld_sign_2_B_reg[5] (.clk (CLK_B), .d (dDATA_to_enc_B[5]),
       .sena (n_858), .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd
       (1'b0), .q (Ld_sign_2_B[5]));
  CDN_flop \Ld_sign_2_B_reg[6] (.clk (CLK_B), .d (dDATA_to_enc_B[6]),
       .sena (n_858), .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd
       (1'b0), .q (Ld_sign_2_B[6]));
  CDN_flop \Ld_sign_2_B_reg[7] (.clk (CLK_B), .d (dDATA_to_enc_B[7]),
       .sena (n_858), .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd
       (1'b0), .q (Ld_sign_2_B[7]));
  CDN_flop \Ld_sign_2_B_reg[8] (.clk (CLK_B), .d (dDATA_to_enc_B[8]),
       .sena (n_858), .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd
       (1'b0), .q (Ld_sign_2_B[8]));
  CDN_flop \Ld_sign_2_B_reg[9] (.clk (CLK_B), .d (dDATA_to_enc_B[9]),
       .sena (n_858), .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd
       (1'b0), .q (Ld_sign_2_B[9]));
  CDN_flop \Ld_sign_2_B_reg[10] (.clk (CLK_B), .d (dDATA_to_enc_B[10]),
       .sena (n_858), .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd
       (1'b0), .q (Ld_sign_2_B[10]));
  CDN_flop \Ld_sign_2_B_reg[11] (.clk (CLK_B), .d (dDATA_to_enc_B[11]),
       .sena (n_858), .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd
       (1'b0), .q (Ld_sign_2_B[11]));
  CDN_flop \Ld_sign_2_B_reg[12] (.clk (CLK_B), .d (dDATA_to_enc_B[12]),
       .sena (n_858), .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd
       (1'b0), .q (Ld_sign_2_B[12]));
  CDN_flop \DATA_32_B_reg[0] (.clk (CLK_B), .d (n_864), .sena (n_999),
       .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd (1'b0), .q
       (DATA_32_B[0]));
  CDN_flop \DATA_32_B_reg[1] (.clk (CLK_B), .d (n_865), .sena (n_999),
       .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd (1'b0), .q
       (DATA_32_B[1]));
  CDN_flop \DATA_32_B_reg[2] (.clk (CLK_B), .d (n_866), .sena (n_999),
       .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd (1'b0), .q
       (DATA_32_B[2]));
  CDN_flop \DATA_32_B_reg[3] (.clk (CLK_B), .d (n_867), .sena (n_999),
       .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd (1'b0), .q
       (DATA_32_B[3]));
  CDN_flop \DATA_32_B_reg[4] (.clk (CLK_B), .d (n_868), .sena (n_999),
       .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd (1'b0), .q
       (DATA_32_B[4]));
  CDN_flop \DATA_32_B_reg[5] (.clk (CLK_B), .d (n_869), .sena (n_999),
       .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd (1'b0), .q
       (DATA_32_B[5]));
  CDN_flop \DATA_32_B_reg[6] (.clk (CLK_B), .d (n_870), .sena (n_999),
       .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd (1'b0), .q
       (DATA_32_B[6]));
  CDN_flop \DATA_32_B_reg[7] (.clk (CLK_B), .d (n_871), .sena (n_999),
       .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd (1'b0), .q
       (DATA_32_B[7]));
  CDN_flop \DATA_32_B_reg[8] (.clk (CLK_B), .d (n_872), .sena (n_999),
       .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd (1'b0), .q
       (DATA_32_B[8]));
  CDN_flop \DATA_32_B_reg[9] (.clk (CLK_B), .d (n_873), .sena (n_999),
       .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd (1'b0), .q
       (DATA_32_B[9]));
  CDN_flop \DATA_32_B_reg[10] (.clk (CLK_B), .d (n_874), .sena (n_999),
       .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd (1'b0), .q
       (DATA_32_B[10]));
  CDN_flop \DATA_32_B_reg[11] (.clk (CLK_B), .d (n_875), .sena (n_999),
       .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd (1'b0), .q
       (DATA_32_B[11]));
  CDN_flop \DATA_32_B_reg[12] (.clk (CLK_B), .d (n_876), .sena (n_999),
       .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd (1'b0), .q
       (DATA_32_B[12]));
  CDN_flop \DATA_32_B_reg[13] (.clk (CLK_B), .d (n_877), .sena (n_999),
       .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd (1'b0), .q
       (DATA_32_B[13]));
  CDN_flop \DATA_32_B_reg[14] (.clk (CLK_B), .d (n_878), .sena (n_999),
       .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd (1'b0), .q
       (DATA_32_B[14]));
  CDN_flop \DATA_32_B_reg[15] (.clk (CLK_B), .d (n_879), .sena (n_999),
       .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd (1'b0), .q
       (DATA_32_B[15]));
  CDN_flop \DATA_32_B_reg[16] (.clk (CLK_B), .d (n_880), .sena (n_999),
       .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd (1'b0), .q
       (DATA_32_B[16]));
  CDN_flop \DATA_32_B_reg[17] (.clk (CLK_B), .d (n_881), .sena (n_999),
       .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd (1'b0), .q
       (DATA_32_B[17]));
  CDN_flop \DATA_32_B_reg[18] (.clk (CLK_B), .d (n_882), .sena (n_999),
       .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd (1'b0), .q
       (DATA_32_B[18]));
  CDN_flop \DATA_32_B_reg[19] (.clk (CLK_B), .d (n_883), .sena (n_999),
       .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd (1'b0), .q
       (DATA_32_B[19]));
  CDN_flop \DATA_32_B_reg[20] (.clk (CLK_B), .d (n_884), .sena (n_999),
       .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd (1'b0), .q
       (DATA_32_B[20]));
  CDN_flop \DATA_32_B_reg[21] (.clk (CLK_B), .d (n_885), .sena (n_999),
       .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd (1'b0), .q
       (DATA_32_B[21]));
  CDN_flop \DATA_32_B_reg[22] (.clk (CLK_B), .d (n_886), .sena (n_999),
       .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd (1'b0), .q
       (DATA_32_B[22]));
  CDN_flop \DATA_32_B_reg[23] (.clk (CLK_B), .d (n_887), .sena (n_999),
       .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd (1'b0), .q
       (DATA_32_B[23]));
  CDN_flop \DATA_32_B_reg[24] (.clk (CLK_B), .d (n_888), .sena (n_999),
       .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd (1'b0), .q
       (DATA_32_B[24]));
  CDN_flop \DATA_32_B_reg[25] (.clk (CLK_B), .d (n_889), .sena (n_999),
       .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd (1'b0), .q
       (DATA_32_B[25]));
  CDN_flop \DATA_32_B_reg[26] (.clk (CLK_B), .d (n_890), .sena (n_999),
       .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd (1'b0), .q
       (DATA_32_B[26]));
  CDN_flop \DATA_32_B_reg[27] (.clk (CLK_B), .d (n_891), .sena (n_999),
       .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd (1'b0), .q
       (DATA_32_B[27]));
  CDN_flop \DATA_32_B_reg[28] (.clk (CLK_B), .d (n_892), .sena (n_999),
       .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd (1'b1), .q
       (DATA_32_B[28]));
  CDN_flop \DATA_32_B_reg[29] (.clk (CLK_B), .d (n_893), .sena (n_999),
       .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd (1'b1), .q
       (DATA_32_B[29]));
  CDN_flop \DATA_32_B_reg[30] (.clk (CLK_B), .d (n_894), .sena (n_999),
       .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd (1'b1), .q
       (DATA_32_B[30]));
  CDN_flop \DATA_32_B_reg[31] (.clk (CLK_B), .d (n_895), .sena (n_999),
       .aclr (1'b0), .apre (1'b0), .srl (n_846), .srd (1'b1), .q
       (DATA_32_B[31]));
  CDN_flop Load_B_reg(.clk (CLK_B), .d (n_863), .sena (1'b1), .aclr
       (1'b0), .apre (1'b0), .srl (n_846), .srd (1'b0), .q (Load_B));
  CDN_flop \Ld_bas_1_C_reg[0] (.clk (CLK_C), .d (dDATA_to_enc_C[0]),
       .sena (n_1001), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd
       (1'b0), .q (Ld_bas_1_C[0]));
  CDN_flop \Ld_bas_1_C_reg[1] (.clk (CLK_C), .d (dDATA_to_enc_C[1]),
       .sena (n_1001), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd
       (1'b0), .q (Ld_bas_1_C[1]));
  CDN_flop \Ld_bas_1_C_reg[2] (.clk (CLK_C), .d (dDATA_to_enc_C[2]),
       .sena (n_1001), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd
       (1'b0), .q (Ld_bas_1_C[2]));
  CDN_flop \Ld_bas_1_C_reg[3] (.clk (CLK_C), .d (dDATA_to_enc_C[3]),
       .sena (n_1001), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd
       (1'b0), .q (Ld_bas_1_C[3]));
  CDN_flop \Ld_bas_1_C_reg[4] (.clk (CLK_C), .d (dDATA_to_enc_C[4]),
       .sena (n_1001), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd
       (1'b0), .q (Ld_bas_1_C[4]));
  CDN_flop \Ld_bas_1_C_reg[5] (.clk (CLK_C), .d (dDATA_to_enc_C[5]),
       .sena (n_1001), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd
       (1'b0), .q (Ld_bas_1_C[5]));
  CDN_flop \Ld_bas_2_C_reg[0] (.clk (CLK_C), .d (dDATA_to_enc_C[0]),
       .sena (n_798), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd
       (1'b0), .q (Ld_bas_2_C[0]));
  CDN_flop \Ld_bas_2_C_reg[1] (.clk (CLK_C), .d (dDATA_to_enc_C[1]),
       .sena (n_798), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd
       (1'b0), .q (Ld_bas_2_C[1]));
  CDN_flop \Ld_bas_2_C_reg[2] (.clk (CLK_C), .d (dDATA_to_enc_C[2]),
       .sena (n_798), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd
       (1'b0), .q (Ld_bas_2_C[2]));
  CDN_flop \Ld_bas_2_C_reg[3] (.clk (CLK_C), .d (dDATA_to_enc_C[3]),
       .sena (n_798), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd
       (1'b0), .q (Ld_bas_2_C[3]));
  CDN_flop \Ld_bas_2_C_reg[4] (.clk (CLK_C), .d (dDATA_to_enc_C[4]),
       .sena (n_798), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd
       (1'b0), .q (Ld_bas_2_C[4]));
  CDN_flop \Ld_bas_2_C_reg[5] (.clk (CLK_C), .d (dDATA_to_enc_C[5]),
       .sena (n_798), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd
       (1'b0), .q (Ld_bas_2_C[5]));
  CDN_flop \Ld_bas_3_C_reg[0] (.clk (CLK_C), .d (dDATA_to_enc_C[0]),
       .sena (n_800), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd
       (1'b0), .q (Ld_bas_3_C[0]));
  CDN_flop \Ld_bas_3_C_reg[1] (.clk (CLK_C), .d (dDATA_to_enc_C[1]),
       .sena (n_800), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd
       (1'b0), .q (Ld_bas_3_C[1]));
  CDN_flop \Ld_bas_3_C_reg[2] (.clk (CLK_C), .d (dDATA_to_enc_C[2]),
       .sena (n_800), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd
       (1'b0), .q (Ld_bas_3_C[2]));
  CDN_flop \Ld_bas_3_C_reg[3] (.clk (CLK_C), .d (dDATA_to_enc_C[3]),
       .sena (n_800), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd
       (1'b0), .q (Ld_bas_3_C[3]));
  CDN_flop \Ld_bas_3_C_reg[4] (.clk (CLK_C), .d (dDATA_to_enc_C[4]),
       .sena (n_800), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd
       (1'b0), .q (Ld_bas_3_C[4]));
  CDN_flop \Ld_bas_3_C_reg[5] (.clk (CLK_C), .d (dDATA_to_enc_C[5]),
       .sena (n_800), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd
       (1'b0), .q (Ld_bas_3_C[5]));
  CDN_flop \Ld_bas_4_C_reg[0] (.clk (CLK_C), .d (dDATA_to_enc_C[0]),
       .sena (n_802), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd
       (1'b0), .q (Ld_bas_4_C[0]));
  CDN_flop \Ld_bas_4_C_reg[1] (.clk (CLK_C), .d (dDATA_to_enc_C[1]),
       .sena (n_802), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd
       (1'b0), .q (Ld_bas_4_C[1]));
  CDN_flop \Ld_bas_4_C_reg[2] (.clk (CLK_C), .d (dDATA_to_enc_C[2]),
       .sena (n_802), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd
       (1'b0), .q (Ld_bas_4_C[2]));
  CDN_flop \Ld_bas_4_C_reg[3] (.clk (CLK_C), .d (dDATA_to_enc_C[3]),
       .sena (n_802), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd
       (1'b0), .q (Ld_bas_4_C[3]));
  CDN_flop \Ld_bas_4_C_reg[4] (.clk (CLK_C), .d (dDATA_to_enc_C[4]),
       .sena (n_802), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd
       (1'b0), .q (Ld_bas_4_C[4]));
  CDN_flop \Ld_bas_4_C_reg[5] (.clk (CLK_C), .d (dDATA_to_enc_C[5]),
       .sena (n_802), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd
       (1'b0), .q (Ld_bas_4_C[5]));
  CDN_flop \Ld_bas_5_C_reg[0] (.clk (CLK_C), .d (dDATA_to_enc_C[0]),
       .sena (n_804), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd
       (1'b0), .q (Ld_bas_5_C[0]));
  CDN_flop \Ld_bas_5_C_reg[1] (.clk (CLK_C), .d (dDATA_to_enc_C[1]),
       .sena (n_804), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd
       (1'b0), .q (Ld_bas_5_C[1]));
  CDN_flop \Ld_bas_5_C_reg[2] (.clk (CLK_C), .d (dDATA_to_enc_C[2]),
       .sena (n_804), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd
       (1'b0), .q (Ld_bas_5_C[2]));
  CDN_flop \Ld_bas_5_C_reg[3] (.clk (CLK_C), .d (dDATA_to_enc_C[3]),
       .sena (n_804), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd
       (1'b0), .q (Ld_bas_5_C[3]));
  CDN_flop \Ld_bas_5_C_reg[4] (.clk (CLK_C), .d (dDATA_to_enc_C[4]),
       .sena (n_804), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd
       (1'b0), .q (Ld_bas_5_C[4]));
  CDN_flop \Ld_bas_5_C_reg[5] (.clk (CLK_C), .d (dDATA_to_enc_C[5]),
       .sena (n_804), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd
       (1'b0), .q (Ld_bas_5_C[5]));
  CDN_flop \Ld_sign_1_C_reg[0] (.clk (CLK_C), .d (dDATA_to_enc_C[0]),
       .sena (n_1006), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd
       (1'b0), .q (Ld_sign_1_C[0]));
  CDN_flop \Ld_sign_1_C_reg[1] (.clk (CLK_C), .d (dDATA_to_enc_C[1]),
       .sena (n_1006), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd
       (1'b0), .q (Ld_sign_1_C[1]));
  CDN_flop \Ld_sign_1_C_reg[2] (.clk (CLK_C), .d (dDATA_to_enc_C[2]),
       .sena (n_1006), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd
       (1'b0), .q (Ld_sign_1_C[2]));
  CDN_flop \Ld_sign_1_C_reg[3] (.clk (CLK_C), .d (dDATA_to_enc_C[3]),
       .sena (n_1006), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd
       (1'b0), .q (Ld_sign_1_C[3]));
  CDN_flop \Ld_sign_1_C_reg[4] (.clk (CLK_C), .d (dDATA_to_enc_C[4]),
       .sena (n_1006), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd
       (1'b0), .q (Ld_sign_1_C[4]));
  CDN_flop \Ld_sign_1_C_reg[5] (.clk (CLK_C), .d (dDATA_to_enc_C[5]),
       .sena (n_1006), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd
       (1'b0), .q (Ld_sign_1_C[5]));
  CDN_flop \Ld_sign_1_C_reg[6] (.clk (CLK_C), .d (dDATA_to_enc_C[6]),
       .sena (n_1006), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd
       (1'b0), .q (Ld_sign_1_C[6]));
  CDN_flop \Ld_sign_1_C_reg[7] (.clk (CLK_C), .d (dDATA_to_enc_C[7]),
       .sena (n_1006), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd
       (1'b0), .q (Ld_sign_1_C[7]));
  CDN_flop \Ld_sign_1_C_reg[8] (.clk (CLK_C), .d (dDATA_to_enc_C[8]),
       .sena (n_1006), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd
       (1'b0), .q (Ld_sign_1_C[8]));
  CDN_flop \Ld_sign_1_C_reg[9] (.clk (CLK_C), .d (dDATA_to_enc_C[9]),
       .sena (n_1006), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd
       (1'b0), .q (Ld_sign_1_C[9]));
  CDN_flop \Ld_sign_1_C_reg[10] (.clk (CLK_C), .d (dDATA_to_enc_C[10]),
       .sena (n_1006), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd
       (1'b0), .q (Ld_sign_1_C[10]));
  CDN_flop \Ld_sign_1_C_reg[11] (.clk (CLK_C), .d (dDATA_to_enc_C[11]),
       .sena (n_1006), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd
       (1'b0), .q (Ld_sign_1_C[11]));
  CDN_flop \Ld_sign_1_C_reg[12] (.clk (CLK_C), .d (dDATA_to_enc_C[12]),
       .sena (n_1006), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd
       (1'b0), .q (Ld_sign_1_C[12]));
  CDN_flop \Ld_sign_2_C_reg[0] (.clk (CLK_C), .d (dDATA_to_enc_C[0]),
       .sena (n_808), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd
       (1'b0), .q (Ld_sign_2_C[0]));
  CDN_flop \Ld_sign_2_C_reg[1] (.clk (CLK_C), .d (dDATA_to_enc_C[1]),
       .sena (n_808), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd
       (1'b0), .q (Ld_sign_2_C[1]));
  CDN_flop \Ld_sign_2_C_reg[2] (.clk (CLK_C), .d (dDATA_to_enc_C[2]),
       .sena (n_808), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd
       (1'b0), .q (Ld_sign_2_C[2]));
  CDN_flop \Ld_sign_2_C_reg[3] (.clk (CLK_C), .d (dDATA_to_enc_C[3]),
       .sena (n_808), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd
       (1'b0), .q (Ld_sign_2_C[3]));
  CDN_flop \Ld_sign_2_C_reg[4] (.clk (CLK_C), .d (dDATA_to_enc_C[4]),
       .sena (n_808), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd
       (1'b0), .q (Ld_sign_2_C[4]));
  CDN_flop \Ld_sign_2_C_reg[5] (.clk (CLK_C), .d (dDATA_to_enc_C[5]),
       .sena (n_808), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd
       (1'b0), .q (Ld_sign_2_C[5]));
  CDN_flop \Ld_sign_2_C_reg[6] (.clk (CLK_C), .d (dDATA_to_enc_C[6]),
       .sena (n_808), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd
       (1'b0), .q (Ld_sign_2_C[6]));
  CDN_flop \Ld_sign_2_C_reg[7] (.clk (CLK_C), .d (dDATA_to_enc_C[7]),
       .sena (n_808), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd
       (1'b0), .q (Ld_sign_2_C[7]));
  CDN_flop \Ld_sign_2_C_reg[8] (.clk (CLK_C), .d (dDATA_to_enc_C[8]),
       .sena (n_808), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd
       (1'b0), .q (Ld_sign_2_C[8]));
  CDN_flop \Ld_sign_2_C_reg[9] (.clk (CLK_C), .d (dDATA_to_enc_C[9]),
       .sena (n_808), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd
       (1'b0), .q (Ld_sign_2_C[9]));
  CDN_flop \Ld_sign_2_C_reg[10] (.clk (CLK_C), .d (dDATA_to_enc_C[10]),
       .sena (n_808), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd
       (1'b0), .q (Ld_sign_2_C[10]));
  CDN_flop \Ld_sign_2_C_reg[11] (.clk (CLK_C), .d (dDATA_to_enc_C[11]),
       .sena (n_808), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd
       (1'b0), .q (Ld_sign_2_C[11]));
  CDN_flop \Ld_sign_2_C_reg[12] (.clk (CLK_C), .d (dDATA_to_enc_C[12]),
       .sena (n_808), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd
       (1'b0), .q (Ld_sign_2_C[12]));
  CDN_flop \DATA_32_C_reg[0] (.clk (CLK_C), .d (n_814), .sena (n_1016),
       .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd (1'b0), .q
       (DATA_32_C[0]));
  CDN_flop \DATA_32_C_reg[1] (.clk (CLK_C), .d (n_815), .sena (n_1016),
       .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd (1'b0), .q
       (DATA_32_C[1]));
  CDN_flop \DATA_32_C_reg[2] (.clk (CLK_C), .d (n_816), .sena (n_1016),
       .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd (1'b0), .q
       (DATA_32_C[2]));
  CDN_flop \DATA_32_C_reg[3] (.clk (CLK_C), .d (n_817), .sena (n_1016),
       .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd (1'b0), .q
       (DATA_32_C[3]));
  CDN_flop \DATA_32_C_reg[4] (.clk (CLK_C), .d (n_818), .sena (n_1016),
       .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd (1'b0), .q
       (DATA_32_C[4]));
  CDN_flop \DATA_32_C_reg[5] (.clk (CLK_C), .d (n_819), .sena (n_1016),
       .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd (1'b0), .q
       (DATA_32_C[5]));
  CDN_flop \DATA_32_C_reg[6] (.clk (CLK_C), .d (n_820), .sena (n_1016),
       .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd (1'b0), .q
       (DATA_32_C[6]));
  CDN_flop \DATA_32_C_reg[7] (.clk (CLK_C), .d (n_821), .sena (n_1016),
       .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd (1'b0), .q
       (DATA_32_C[7]));
  CDN_flop \DATA_32_C_reg[8] (.clk (CLK_C), .d (n_822), .sena (n_1016),
       .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd (1'b0), .q
       (DATA_32_C[8]));
  CDN_flop \DATA_32_C_reg[9] (.clk (CLK_C), .d (n_823), .sena (n_1016),
       .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd (1'b0), .q
       (DATA_32_C[9]));
  CDN_flop \DATA_32_C_reg[10] (.clk (CLK_C), .d (n_824), .sena
       (n_1016), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd (1'b0),
       .q (DATA_32_C[10]));
  CDN_flop \DATA_32_C_reg[11] (.clk (CLK_C), .d (n_825), .sena
       (n_1016), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd (1'b0),
       .q (DATA_32_C[11]));
  CDN_flop \DATA_32_C_reg[12] (.clk (CLK_C), .d (n_826), .sena
       (n_1016), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd (1'b0),
       .q (DATA_32_C[12]));
  CDN_flop \DATA_32_C_reg[13] (.clk (CLK_C), .d (n_827), .sena
       (n_1016), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd (1'b0),
       .q (DATA_32_C[13]));
  CDN_flop \DATA_32_C_reg[14] (.clk (CLK_C), .d (n_828), .sena
       (n_1016), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd (1'b0),
       .q (DATA_32_C[14]));
  CDN_flop \DATA_32_C_reg[15] (.clk (CLK_C), .d (n_829), .sena
       (n_1016), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd (1'b0),
       .q (DATA_32_C[15]));
  CDN_flop \DATA_32_C_reg[16] (.clk (CLK_C), .d (n_830), .sena
       (n_1016), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd (1'b0),
       .q (DATA_32_C[16]));
  CDN_flop \DATA_32_C_reg[17] (.clk (CLK_C), .d (n_831), .sena
       (n_1016), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd (1'b0),
       .q (DATA_32_C[17]));
  CDN_flop \DATA_32_C_reg[18] (.clk (CLK_C), .d (n_832), .sena
       (n_1016), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd (1'b0),
       .q (DATA_32_C[18]));
  CDN_flop \DATA_32_C_reg[19] (.clk (CLK_C), .d (n_833), .sena
       (n_1016), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd (1'b0),
       .q (DATA_32_C[19]));
  CDN_flop \DATA_32_C_reg[20] (.clk (CLK_C), .d (n_834), .sena
       (n_1016), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd (1'b0),
       .q (DATA_32_C[20]));
  CDN_flop \DATA_32_C_reg[21] (.clk (CLK_C), .d (n_835), .sena
       (n_1016), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd (1'b0),
       .q (DATA_32_C[21]));
  CDN_flop \DATA_32_C_reg[22] (.clk (CLK_C), .d (n_836), .sena
       (n_1016), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd (1'b0),
       .q (DATA_32_C[22]));
  CDN_flop \DATA_32_C_reg[23] (.clk (CLK_C), .d (n_837), .sena
       (n_1016), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd (1'b0),
       .q (DATA_32_C[23]));
  CDN_flop \DATA_32_C_reg[24] (.clk (CLK_C), .d (n_838), .sena
       (n_1016), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd (1'b0),
       .q (DATA_32_C[24]));
  CDN_flop \DATA_32_C_reg[25] (.clk (CLK_C), .d (n_839), .sena
       (n_1016), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd (1'b0),
       .q (DATA_32_C[25]));
  CDN_flop \DATA_32_C_reg[26] (.clk (CLK_C), .d (n_840), .sena
       (n_1016), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd (1'b0),
       .q (DATA_32_C[26]));
  CDN_flop \DATA_32_C_reg[27] (.clk (CLK_C), .d (n_841), .sena
       (n_1016), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd (1'b0),
       .q (DATA_32_C[27]));
  CDN_flop \DATA_32_C_reg[28] (.clk (CLK_C), .d (n_842), .sena
       (n_1016), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd (1'b1),
       .q (DATA_32_C[28]));
  CDN_flop \DATA_32_C_reg[29] (.clk (CLK_C), .d (n_843), .sena
       (n_1016), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd (1'b1),
       .q (DATA_32_C[29]));
  CDN_flop \DATA_32_C_reg[30] (.clk (CLK_C), .d (n_844), .sena
       (n_1016), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd (1'b1),
       .q (DATA_32_C[30]));
  CDN_flop \DATA_32_C_reg[31] (.clk (CLK_C), .d (n_845), .sena
       (n_1016), .aclr (1'b0), .apre (1'b0), .srl (n_796), .srd (1'b1),
       .q (DATA_32_C[31]));
  CDN_flop Load_C_reg(.clk (CLK_C), .d (n_813), .sena (1'b1), .aclr
       (1'b0), .apre (1'b0), .srl (n_796), .srd (1'b0), .q (Load_C));
  not g589 (n_796, reset_C);
  not g590 (n_846, reset_B);
  not g591 (n_896, reset_A);
  or g592 (n_1853, n_912, n_911, n_910);
  or g593 (n_1854, n_909, n_907, n_906);
  or g594 (n_1855, n_905, n_903, n_901);
  or g595 (n_1856, n_899, n_897);
  or g596 (n_982, n_1853, n_1854, n_1855, n_1856);
  or g597 (n_1857, n_862, n_861, n_860);
  or g598 (n_1858, n_859, n_857, n_856);
  or g599 (n_1859, n_855, n_853, n_851);
  or g600 (n_1860, n_849, n_847);
  or g601 (n_999, n_1857, n_1858, n_1859, n_1860);
  or g602 (n_1861, n_812, n_811, n_810);
  or g603 (n_1862, n_809, n_807, n_806);
  or g604 (n_1863, n_805, n_803, n_801);
  or g605 (n_1864, n_799, n_797);
  or g606 (n_1016, n_1861, n_1862, n_1863, n_1864);
  or g607 (n_1865, n_910, n_907);
  or g608 (n_1866, n_905, n_903);
  or g609 (n_972, n_901, n_899, n_1865, n_1866);
  or g610 (n_1867, n_860, n_857);
  or g611 (n_1868, n_855, n_853);
  or g612 (n_989, n_851, n_849, n_1867, n_1868);
  or g613 (n_1869, n_810, n_807);
  or g614 (n_1870, n_805, n_803);
  or g615 (n_1006, n_801, n_799, n_1869, n_1870);
endmodule

module CRC_calc(reset, data, crc, newcrc);
  input reset;
  input [31:0] data;
  input [11:0] crc;
  output [11:0] newcrc;
  wire reset;
  wire [31:0] data;
  wire [11:0] crc;
  wire [11:0] newcrc;
  wire n_14, n_15, n_16, n_17, n_18, n_19, n_20, n_21;
  wire n_22, n_23, n_24, n_25, n_26, n_86, n_88, n_102;
  wire n_252, n_253, n_254, n_255, n_256, n_257, n_258, n_259;
  wire n_260, n_261, n_262, n_263, n_264, n_265, n_266, n_267;
  wire n_268, n_269, n_270, n_271, n_272, n_273, n_274, n_275;
  wire n_276, n_277, n_278, n_279, n_280, n_281, n_282, n_283;
  wire n_284, n_285, n_286, n_287, n_288, n_289, n_290, n_291;
  wire n_292, n_293, n_294, n_295, n_296, n_297, n_298, n_299;
  wire n_300, n_301, n_303, n_304, n_305, n_306, n_307, n_309;
  wire n_310, n_311, n_313, n_314, n_315, n_316, n_317, n_318;
  wire n_319, n_321, n_322, n_323, n_325, n_326, n_327, n_328;
  wire n_329, n_330, n_331, n_332, n_333, n_334, n_335, n_336;
  wire n_337, n_338, n_339, n_340, n_341, n_342, n_343, n_344;
  wire n_345, n_346, n_347, n_349, n_350, n_351, n_352, n_353;
  wire n_354, n_355, n_356, n_357, n_358, n_360, n_361, n_362;
  wire n_363, n_364, n_365, n_366, n_367, n_368, n_369, n_370;
  wire n_371, n_372, n_373, n_374, n_375, n_377, n_378, n_379;
  wire n_380, n_381, n_382, n_383, n_384, n_385, n_386, n_387;
  wire n_388, n_389, n_390, n_391, n_392, n_393, n_394, n_395;
  wire n_396, n_397, n_398, n_399, n_405, n_410, n_411, n_412;
  wire n_413, n_414, n_415, n_416, n_417, n_418, n_419, n_420;
  wire n_421, n_422, n_423, n_424, n_425;
  bmux mux_415_24(.ctl (n_14), .in_0 (n_15), .in_1 (1'b0), .z
       (newcrc[0]));
  bmux mux_416_24(.ctl (n_14), .in_0 (n_16), .in_1 (1'b0), .z
       (newcrc[1]));
  bmux mux_417_24(.ctl (n_14), .in_0 (n_17), .in_1 (1'b0), .z
       (newcrc[2]));
  bmux mux_418_24(.ctl (n_14), .in_0 (n_18), .in_1 (1'b0), .z
       (newcrc[3]));
  bmux mux_419_24(.ctl (n_14), .in_0 (n_19), .in_1 (1'b0), .z
       (newcrc[4]));
  bmux mux_420_24(.ctl (n_14), .in_0 (n_20), .in_1 (1'b0), .z
       (newcrc[5]));
  bmux mux_421_24(.ctl (n_14), .in_0 (n_21), .in_1 (1'b0), .z
       (newcrc[6]));
  bmux mux_422_24(.ctl (n_14), .in_0 (n_22), .in_1 (1'b0), .z
       (newcrc[7]));
  bmux mux_423_24(.ctl (n_14), .in_0 (n_23), .in_1 (1'b0), .z
       (newcrc[8]));
  bmux mux_424_24(.ctl (n_14), .in_0 (n_24), .in_1 (1'b0), .z
       (newcrc[9]));
  bmux mux_425_25(.ctl (n_14), .in_0 (n_25), .in_1 (1'b0), .z
       (newcrc[10]));
  bmux mux_426_25(.ctl (n_14), .in_0 (n_26), .in_1 (1'b0), .z
       (newcrc[11]));
  xor g30 (n_86, data[31], data[29]);
  xor g31 (n_88, n_86, data[27]);
  xor g41 (n_102, data[29], data[28]);
  not g195 (n_14, reset);
  xor g196 (n_252, n_102, data[25]);
  xor g197 (n_253, data[24], data[23]);
  xor g198 (n_254, data[22], data[21]);
  xor g199 (n_255, data[16], data[15]);
  xor g200 (n_256, data[14], data[13]);
  xor g201 (n_257, data[12], data[11]);
  xor g202 (n_258, data[10], data[7]);
  xor g203 (n_259, data[6], data[5]);
  xor g204 (n_260, data[4], data[3]);
  xor g205 (n_261, data[2], data[1]);
  xor g206 (n_262, data[0], crc[1]);
  xor g207 (n_263, crc[2], crc[3]);
  xor g208 (n_264, crc[4], crc[5]);
  xor g209 (n_265, crc[8], crc[9]);
  xor g210 (n_266, n_252, n_253);
  xor g211 (n_267, n_254, n_255);
  xor g212 (n_268, n_256, n_257);
  xor g213 (n_269, n_258, n_259);
  xor g214 (n_270, n_260, n_261);
  xor g215 (n_271, n_262, n_263);
  xor g216 (n_272, n_264, n_265);
  xor g217 (n_273, n_266, n_267);
  xor g218 (n_274, n_268, n_269);
  xor g219 (n_275, n_270, n_271);
  xor g220 (n_276, n_272, n_273);
  xor g221 (n_277, n_274, n_275);
  xor g222 (n_26, n_276, n_277);
  xor g223 (n_278, n_88, data[25]);
  xor g224 (n_279, data[20], data[16]);
  xor g225 (n_280, data[9], data[7]);
  xor g226 (n_281, crc[0], crc[5]);
  xor g227 (n_282, crc[7], crc[9]);
  xor g228 (n_283, crc[11], n_278);
  xor g229 (n_284, n_279, n_280);
  xor g230 (n_285, n_281, n_282);
  xor g231 (n_286, n_283, n_284);
  xor g232 (n_25, n_285, n_286);
  xor g233 (n_287, data[30], data[28]);
  xor g234 (n_288, data[26], data[24]);
  xor g235 (n_289, data[19], data[15]);
  xor g236 (n_290, data[8], data[6]);
  xor g237 (n_291, crc[4], crc[6]);
  xor g238 (n_292, crc[8], crc[10]);
  xor g239 (n_293, n_287, n_288);
  xor g240 (n_294, n_289, n_290);
  xor g241 (n_295, n_291, n_292);
  xor g242 (n_296, n_293, n_294);
  xor g243 (n_24, n_295, n_296);
  xor g244 (n_297, data[29], data[27]);
  xor g245 (n_298, data[25], data[23]);
  xor g246 (n_299, data[18], data[14]);
  xor g247 (n_300, data[7], data[5]);
  xor g248 (n_301, crc[3], crc[5]);
  xor g250 (n_303, n_297, n_298);
  xor g251 (n_304, n_299, n_300);
  xor g252 (n_305, n_301, n_282);
  xor g253 (n_306, n_303, n_304);
  xor g254 (n_23, n_305, n_306);
  xor g255 (n_307, data[31], data[28]);
  xor g257 (n_309, data[22], data[17]);
  xor g258 (n_310, data[13], data[6]);
  xor g259 (n_311, data[4], crc[2]);
  xor g261 (n_313, crc[8], crc[11]);
  xor g262 (n_314, n_307, n_288);
  xor g263 (n_315, n_309, n_310);
  xor g264 (n_316, n_311, n_291);
  xor g265 (n_317, n_313, n_314);
  xor g266 (n_318, n_315, n_316);
  xor g267 (n_22, n_317, n_318);
  xor g268 (n_319, data[30], data[27]);
  xor g270 (n_321, data[21], data[16]);
  xor g271 (n_322, data[12], data[5]);
  xor g272 (n_323, data[3], crc[1]);
  xor g274 (n_325, crc[7], crc[10]);
  xor g275 (n_326, n_319, n_298);
  xor g276 (n_327, n_321, n_322);
  xor g277 (n_328, n_323, n_301);
  xor g278 (n_329, n_325, n_326);
  xor g279 (n_330, n_327, n_328);
  xor g280 (n_21, n_329, n_330);
  xor g281 (n_331, data[29], data[26]);
  xor g282 (n_332, data[24], data[22]);
  xor g283 (n_333, data[20], data[15]);
  xor g284 (n_334, data[11], data[4]);
  xor g285 (n_335, data[2], crc[0]);
  xor g286 (n_336, crc[2], crc[4]);
  xor g287 (n_337, crc[6], crc[9]);
  xor g288 (n_338, n_331, n_332);
  xor g289 (n_339, n_333, n_334);
  xor g290 (n_340, n_335, n_336);
  xor g291 (n_341, n_337, n_338);
  xor g292 (n_342, n_339, n_340);
  xor g293 (n_20, n_341, n_342);
  xor g294 (n_343, data[28], data[25]);
  xor g295 (n_344, data[23], data[21]);
  xor g296 (n_345, data[19], data[14]);
  xor g297 (n_346, data[10], data[3]);
  xor g298 (n_347, data[1], crc[1]);
  xor g300 (n_349, crc[8], n_343);
  xor g301 (n_350, n_344, n_345);
  xor g302 (n_351, n_346, n_347);
  xor g303 (n_352, n_301, n_349);
  xor g304 (n_353, n_350, n_351);
  xor g305 (n_19, n_352, n_353);
  xor g306 (n_354, data[27], data[24]);
  xor g307 (n_355, data[22], data[20]);
  xor g308 (n_356, data[18], data[13]);
  xor g309 (n_357, data[9], data[2]);
  xor g310 (n_358, data[0], crc[0]);
  xor g312 (n_360, crc[7], n_354);
  xor g313 (n_361, n_355, n_356);
  xor g314 (n_362, n_357, n_358);
  xor g315 (n_363, n_336, n_360);
  xor g316 (n_364, n_361, n_362);
  xor g317 (n_18, n_363, n_364);
  xor g318 (n_365, n_102, data[26]);
  xor g319 (n_366, data[25], data[24]);
  xor g320 (n_367, data[22], data[19]);
  xor g321 (n_368, data[17], data[16]);
  xor g322 (n_369, data[15], data[14]);
  xor g323 (n_370, data[13], data[11]);
  xor g324 (n_371, data[10], data[8]);
  xor g325 (n_372, data[7], data[6]);
  xor g326 (n_373, data[5], data[4]);
  xor g327 (n_374, data[3], data[2]);
  xor g328 (n_375, data[0], crc[2]);
  xor g330 (n_377, crc[6], crc[8]);
  xor g331 (n_378, crc[9], n_365);
  xor g332 (n_379, n_366, n_367);
  xor g333 (n_380, n_368, n_369);
  xor g334 (n_381, n_370, n_371);
  xor g335 (n_382, n_372, n_373);
  xor g336 (n_383, n_374, n_375);
  xor g337 (n_384, n_264, n_377);
  xor g338 (n_385, n_378, n_379);
  xor g339 (n_386, n_380, n_381);
  xor g340 (n_387, n_382, n_383);
  xor g341 (n_388, n_384, n_385);
  xor g342 (n_389, n_386, n_387);
  xor g343 (n_17, n_388, n_389);
  xor g344 (n_390, n_88, data[22]);
  xor g345 (n_391, data[18], data[11]);
  xor g346 (n_392, data[9], data[0]);
  xor g347 (n_393, crc[2], crc[7]);
  xor g348 (n_394, crc[9], crc[11]);
  xor g349 (n_395, n_390, n_391);
  xor g350 (n_396, n_392, n_393);
  xor g351 (n_397, n_394, n_395);
  xor g352 (n_16, n_396, n_397);
  xor g353 (n_398, data[30], data[29]);
  xor g354 (n_399, data[26], data[25]);
  xor g360 (n_405, data[8], data[7]);
  xor g365 (n_410, crc[3], crc[4]);
  xor g366 (n_411, crc[5], crc[6]);
  xor g367 (n_412, crc[9], crc[10]);
  xor g368 (n_413, n_398, n_399);
  xor g369 (n_414, n_253, n_309);
  xor g370 (n_415, n_255, n_256);
  xor g371 (n_416, n_257, n_405);
  xor g372 (n_417, n_259, n_260);
  xor g373 (n_418, n_261, n_375);
  xor g374 (n_419, n_410, n_411);
  xor g375 (n_420, n_412, n_413);
  xor g376 (n_421, n_414, n_415);
  xor g377 (n_422, n_416, n_417);
  xor g378 (n_423, n_418, n_419);
  xor g379 (n_424, n_420, n_421);
  xor g380 (n_425, n_422, n_423);
  xor g381 (n_15, n_424, n_425);
endmodule

module bmux_379(ctl, in_0, in_1, in_2, in_3, z);
  input [1:0] ctl;
  input [5:0] in_0, in_1, in_2, in_3;
  output [5:0] z;
  wire [1:0] ctl;
  wire [5:0] in_0, in_1, in_2, in_3;
  wire [5:0] z;
  CDN_bmux4 g1(.sel0 (ctl[0]), .data0 (in_0[5]), .data1 (in_1[5]),
       .sel1 (ctl[1]), .data2 (in_2[5]), .data3 (in_3[5]), .z (z[5]));
  CDN_bmux4 g2(.sel0 (ctl[0]), .data0 (in_0[4]), .data1 (in_1[4]),
       .sel1 (ctl[1]), .data2 (in_2[4]), .data3 (in_3[4]), .z (z[4]));
  CDN_bmux4 g3(.sel0 (ctl[0]), .data0 (in_0[3]), .data1 (in_1[3]),
       .sel1 (ctl[1]), .data2 (in_2[3]), .data3 (in_3[3]), .z (z[3]));
  CDN_bmux4 g4(.sel0 (ctl[0]), .data0 (in_0[2]), .data1 (in_1[2]),
       .sel1 (ctl[1]), .data2 (in_2[2]), .data3 (in_3[2]), .z (z[2]));
  CDN_bmux4 g5(.sel0 (ctl[0]), .data0 (in_0[1]), .data1 (in_1[1]),
       .sel1 (ctl[1]), .data2 (in_2[1]), .data3 (in_3[1]), .z (z[1]));
  CDN_bmux4 g6(.sel0 (ctl[0]), .data0 (in_0[0]), .data1 (in_1[0]),
       .sel1 (ctl[1]), .data2 (in_2[0]), .data3 (in_3[0]), .z (z[0]));
endmodule

module SumValue(data, sum_val);
  input [7:0] data;
  output [7:0] sum_val;
  wire [7:0] data;
  wire [7:0] sum_val;
  wire n_39, n_43, n_45, n_56, n_58, n_60, n_61, n_62;
  assign sum_val[6] = 1'b0;
  assign sum_val[7] = 1'b0;
  bmux_212 mux_sum_val_443_20(.ctl (n_39), .in_0 (2'b01), .in_1
       (2'b10), .z ({n_45, n_43}));
  bmux_379 mux_sum_val_439_10(.ctl (data[7:6]), .in_0 ({4'b0000, n_45,
       n_43}), .in_1 (6'b000101), .in_2 (data[5:0]), .in_3 (6'b000000),
       .z (sum_val[5:0]));
  nor g6 (n_60, data[7], data[6]);
  nand g7 (n_61, n_56, data[3], n_58, data[5]);
  not g8 (n_62, n_60);
  nor g9 (n_39, n_61, n_62);
  not g10 (n_56, data[2]);
  not g11 (n_58, data[4]);
endmodule

module fanout_WIDTH32(in, outA, outB, outC);
  input [31:0] in;
  output [31:0] outA, outB, outC;
  wire [31:0] in;
  wire [31:0] outA, outB, outC;
  assign outC[0] = in[0];
  assign outC[1] = in[1];
  assign outC[2] = in[2];
  assign outC[3] = in[3];
  assign outC[4] = in[4];
  assign outC[5] = in[5];
  assign outC[6] = in[6];
  assign outC[7] = in[7];
  assign outC[8] = in[8];
  assign outC[9] = in[9];
  assign outC[10] = in[10];
  assign outC[11] = in[11];
  assign outC[12] = in[12];
  assign outC[13] = in[13];
  assign outC[14] = in[14];
  assign outC[15] = in[15];
  assign outC[16] = in[16];
  assign outC[17] = in[17];
  assign outC[18] = in[18];
  assign outC[19] = in[19];
  assign outC[20] = in[20];
  assign outC[21] = in[21];
  assign outC[22] = in[22];
  assign outC[23] = in[23];
  assign outC[24] = in[24];
  assign outC[25] = in[25];
  assign outC[26] = in[26];
  assign outC[27] = in[27];
  assign outC[28] = in[28];
  assign outC[29] = in[29];
  assign outC[30] = in[30];
  assign outC[31] = in[31];
  assign outB[0] = in[0];
  assign outB[1] = in[1];
  assign outB[2] = in[2];
  assign outB[3] = in[3];
  assign outB[4] = in[4];
  assign outB[5] = in[5];
  assign outB[6] = in[6];
  assign outB[7] = in[7];
  assign outB[8] = in[8];
  assign outB[9] = in[9];
  assign outB[10] = in[10];
  assign outB[11] = in[11];
  assign outB[12] = in[12];
  assign outB[13] = in[13];
  assign outB[14] = in[14];
  assign outB[15] = in[15];
  assign outB[16] = in[16];
  assign outB[17] = in[17];
  assign outB[18] = in[18];
  assign outB[19] = in[19];
  assign outB[20] = in[20];
  assign outB[21] = in[21];
  assign outB[22] = in[22];
  assign outB[23] = in[23];
  assign outB[24] = in[24];
  assign outB[25] = in[25];
  assign outB[26] = in[26];
  assign outB[27] = in[27];
  assign outB[28] = in[28];
  assign outB[29] = in[29];
  assign outB[30] = in[30];
  assign outB[31] = in[31];
  assign outA[0] = in[0];
  assign outA[1] = in[1];
  assign outA[2] = in[2];
  assign outA[3] = in[3];
  assign outA[4] = in[4];
  assign outA[5] = in[5];
  assign outA[6] = in[6];
  assign outA[7] = in[7];
  assign outA[8] = in[8];
  assign outA[9] = in[9];
  assign outA[10] = in[10];
  assign outA[11] = in[11];
  assign outA[12] = in[12];
  assign outA[13] = in[13];
  assign outA[14] = in[14];
  assign outA[15] = in[15];
  assign outA[16] = in[16];
  assign outA[17] = in[17];
  assign outA[18] = in[18];
  assign outA[19] = in[19];
  assign outA[20] = in[20];
  assign outA[21] = in[21];
  assign outA[22] = in[22];
  assign outA[23] = in[23];
  assign outA[24] = in[24];
  assign outA[25] = in[25];
  assign outA[26] = in[26];
  assign outA[27] = in[27];
  assign outA[28] = in[28];
  assign outA[29] = in[29];
  assign outA[30] = in[30];
  assign outA[31] = in[31];
endmodule

module fanout(in, outA, outB, outC);
  input [0:0] in;
  output [0:0] outA, outB, outC;
  wire [0:0] in;
  wire [0:0] outA, outB, outC;
  assign outC[0] = in;
  assign outB[0] = in;
  assign outA[0] = in;
endmodule

module add_unsigned_389(A, B, Z);
  input [7:0] A, B;
  output [7:0] Z;
  wire [7:0] A, B;
  wire [7:0] Z;
  wire n_26, n_29, n_30, n_31, n_32, n_33, n_34, n_35;
  wire n_36, n_37, n_38, n_39, n_40, n_41, n_42, n_43;
  wire n_44, n_45, n_46, n_47, n_48, n_51, n_52, n_53;
  wire n_54, n_55, n_56, n_57, n_58, n_59, n_60, n_61;
  wire n_62, n_68, n_69, n_70, n_71, n_72, n_73, n_74;
  wire n_75, n_80, n_81, n_82, n_83, n_84, n_85, n_86;
  wire n_87, n_88, n_89, n_90, n_91, n_92, n_93;
  xor g1 (Z[0], A[0], B[0]);
  nand g2 (n_26, A[0], B[0]);
  nor g6 (n_29, A[1], B[1]);
  nand g7 (n_32, A[1], B[1]);
  nor g8 (n_39, A[2], B[2]);
  nand g9 (n_34, A[2], B[2]);
  nor g10 (n_35, A[3], B[3]);
  nand g11 (n_36, A[3], B[3]);
  nor g12 (n_45, A[4], B[4]);
  nand g13 (n_40, A[4], B[4]);
  nor g14 (n_41, A[5], B[5]);
  nand g15 (n_42, A[5], B[5]);
  nor g16 (n_51, A[6], B[6]);
  nand g17 (n_46, A[6], B[6]);
  nor g18 (n_47, A[7], B[7]);
  nand g19 (n_48, A[7], B[7]);
  not g20 (n_31, n_29);
  nand g21 (n_33, n_30, n_31);
  nand g22 (n_52, n_32, n_33);
  nor g23 (n_37, n_34, n_35);
  not g24 (n_38, n_36);
  nor g25 (n_56, n_37, n_38);
  nor g26 (n_55, n_39, n_35);
  nor g27 (n_43, n_40, n_41);
  not g28 (n_44, n_42);
  nor g29 (n_58, n_43, n_44);
  nor g30 (n_61, n_45, n_41);
  not g35 (n_53, n_39);
  nand g36 (n_54, n_52, n_53);
  nand g37 (n_83, n_34, n_54);
  nand g38 (n_57, n_55, n_52);
  nand g39 (n_68, n_56, n_57);
  nor g40 (n_59, n_51, n_58);
  not g41 (n_60, n_46);
  nor g42 (n_74, n_59, n_60);
  not g43 (n_62, n_51);
  nand g44 (n_72, n_61, n_62);
  not g50 (n_69, n_45);
  nand g51 (n_70, n_68, n_69);
  nand g52 (n_87, n_40, n_70);
  nand g53 (n_71, n_61, n_68);
  nand g54 (n_89, n_58, n_71);
  not g55 (n_73, n_72);
  nand g56 (n_75, n_68, n_73);
  nand g57 (n_92, n_74, n_75);
  nand g61 (n_80, n_31, n_32);
  xnor g62 (Z[1], n_30, n_80);
  nand g63 (n_81, n_53, n_34);
  xnor g64 (Z[2], n_52, n_81);
  not g65 (n_82, n_35);
  nand g66 (n_84, n_82, n_36);
  xnor g67 (Z[3], n_83, n_84);
  nand g68 (n_85, n_69, n_40);
  xnor g69 (Z[4], n_68, n_85);
  not g70 (n_86, n_41);
  nand g71 (n_88, n_86, n_42);
  xnor g72 (Z[5], n_87, n_88);
  nand g73 (n_90, n_62, n_46);
  xnor g74 (Z[6], n_89, n_90);
  not g75 (n_91, n_47);
  nand g76 (n_93, n_91, n_48);
  xnor g77 (Z[7], n_92, n_93);
  not g79 (n_30, n_26);
endmodule

module add_unsigned_391(A, B, Z);
  input [5:0] A;
  input B;
  output [5:0] Z;
  wire [5:0] A;
  wire B;
  wire [5:0] Z;
  wire n_15, n_24, n_27, n_29, n_33, n_40, n_42, n_43;
  wire n_45, n_46, n_48, n_52, n_55, n_57, n_59, n_60;
  xor g1 (Z[0], A[0], B);
  nand g2 (n_15, A[0], B);
  nand g17 (n_27, n_24, A[1]);
  nor g22 (n_43, n_33, n_29);
  nand g28 (n_42, n_40, A[2]);
  nand g30 (n_45, n_43, n_40);
  nand g33 (n_48, n_46, A[4]);
  xnor g38 (Z[1], n_24, n_52);
  xnor g40 (Z[2], n_40, n_33);
  xnor g43 (Z[3], n_55, n_29);
  xnor g45 (Z[4], n_46, n_57);
  xnor g48 (Z[5], n_59, n_60);
  not g51 (n_33, A[2]);
  not g52 (n_29, A[3]);
  not g55 (n_24, n_15);
  not g56 (n_52, A[1]);
  not g57 (n_57, A[4]);
  not g58 (n_60, A[5]);
  not g59 (n_40, n_27);
  not g60 (n_55, n_42);
  not g61 (n_46, n_45);
  not g62 (n_59, n_48);
endmodule

module add_unsigned_393(A, B, Z);
  input [7:0] A;
  input B;
  output [7:0] Z;
  wire [7:0] A;
  wire B;
  wire [7:0] Z;
  wire n_19, n_30, n_33, n_35, n_39, n_41, n_45, n_51;
  wire n_52, n_54, n_55, n_57, n_61, n_68, n_70, n_71;
  wire n_72, n_73, n_75, n_80, n_83, n_87, n_89, n_92;
  wire n_93;
  xor g1 (Z[0], A[0], B);
  nand g2 (n_19, A[0], B);
  nand g21 (n_33, n_30, A[1]);
  nor g26 (n_55, n_39, n_35);
  nor g30 (n_61, n_45, n_41);
  nand g36 (n_54, n_52, A[2]);
  nand g38 (n_57, n_55, n_52);
  nand g44 (n_72, n_61, A[6]);
  nand g51 (n_70, n_68, A[4]);
  nand g53 (n_71, n_61, n_68);
  not g55 (n_73, n_72);
  nand g56 (n_75, n_68, n_73);
  xnor g62 (Z[1], n_30, n_80);
  xnor g64 (Z[2], n_52, n_39);
  xnor g67 (Z[3], n_83, n_35);
  xnor g69 (Z[4], n_68, n_45);
  xnor g72 (Z[5], n_87, n_41);
  xnor g74 (Z[6], n_89, n_51);
  xnor g77 (Z[7], n_92, n_93);
  not g80 (n_39, A[2]);
  not g81 (n_35, A[3]);
  not g82 (n_45, A[4]);
  not g83 (n_41, A[5]);
  not g84 (n_51, A[6]);
  not g86 (n_30, n_19);
  not g87 (n_80, A[1]);
  not g88 (n_93, A[7]);
  not g89 (n_52, n_33);
  not g90 (n_83, n_54);
  not g91 (n_68, n_57);
  not g92 (n_87, n_70);
  not g93 (n_89, n_71);
  not g94 (n_92, n_75);
endmodule

module gt_unsigned(A, B, Z);
  input [5:0] A, B;
  output Z;
  wire [5:0] A, B;
  wire Z;
  wire n_22, n_23, n_24, n_25, n_26, n_28, n_29, n_31;
  wire n_32, n_33, n_34, n_35, n_36, n_37, n_38, n_39;
  wire n_40, n_41, n_42, n_43, n_44, n_45, n_46, n_47;
  wire n_48, n_51, n_52, n_53, n_54, n_57, n_58, n_59;
  not g2 (n_22, A[5]);
  not g3 (n_23, A[4]);
  not g4 (n_24, A[3]);
  not g5 (n_25, A[2]);
  not g6 (n_26, A[1]);
  not g8 (Z, n_28);
  nand g12 (n_32, n_29, A[0]);
  nor g13 (n_31, B[1], n_26);
  nand g14 (n_34, B[1], n_26);
  nor g15 (n_41, B[2], n_25);
  nand g16 (n_36, B[2], n_25);
  nor g17 (n_37, B[3], n_24);
  nand g18 (n_38, B[3], n_24);
  nor g19 (n_47, B[4], n_23);
  nand g20 (n_42, B[4], n_23);
  nor g21 (n_43, B[5], n_22);
  nand g22 (n_44, B[5], n_22);
  not g23 (n_33, n_31);
  nand g24 (n_35, n_32, n_33);
  nand g25 (n_48, n_34, n_35);
  nor g26 (n_39, n_36, n_37);
  not g27 (n_40, n_38);
  nor g28 (n_52, n_39, n_40);
  nor g29 (n_51, n_41, n_37);
  nor g30 (n_45, n_42, n_43);
  not g31 (n_46, n_44);
  nor g32 (n_58, n_45, n_46);
  nor g33 (n_57, n_47, n_43);
  nand g37 (n_53, n_51, n_48);
  nand g38 (n_54, n_52, n_53);
  nand g42 (n_59, n_57, n_54);
  nand g43 (n_28, n_58, n_59);
  not g57 (n_29, B[0]);
endmodule

module LDTU_CUTMR_Nbits_3232(CLK_A, CLK_B, CLK_C, reset_A, reset_B,
     reset_C, Load_data, DATA_32, full, DATA_from_CU, losing_data,
     write_signal, read_signal, tmrError, handshake);
  input CLK_A, CLK_B, CLK_C, reset_A, reset_B, reset_C, Load_data,
       full, handshake;
  input [31:0] DATA_32;
  output [31:0] DATA_from_CU;
  output losing_data, write_signal, read_signal, tmrError;
  wire CLK_A, CLK_B, CLK_C, reset_A, reset_B, reset_C, Load_data, full,
       handshake;
  wire [31:0] DATA_32;
  wire [31:0] DATA_from_CU;
  wire losing_data, write_signal, read_signal, tmrError;
  wire [31:0] DATA_32_A;
  wire [11:0] crc_A;
  wire [11:0] out_crc_A;
  wire [31:0] DATA_32_B;
  wire [11:0] crc_B;
  wire [11:0] out_crc_B;
  wire [31:0] DATA_32_C;
  wire [11:0] crc_C;
  wire [11:0] out_crc_C;
  wire [7:0] sum_val_A;
  wire [7:0] sum_val_B;
  wire [7:0] sum_val_C;
  wire [31:0] DATA_from_CU_A;
  wire [31:0] DATA_from_CU_B;
  wire [31:0] DATA_from_CU_C;
  wire [7:0] NSample_A;
  wire [5:0] Nlimit_A;
  wire [7:0] NFrame_A;
  wire [7:0] NSample_B;
  wire [5:0] Nlimit_B;
  wire [7:0] NFrame_B;
  wire [7:0] NSample_C;
  wire [5:0] Nlimit_C;
  wire [7:0] NFrame_C;
  wire [7:0] NSamples_C;
  wire [7:0] NSamples_B;
  wire [7:0] NSamples_A;
  wire DATA_from_CUTmrError, Load_data_A, Load_data_B, Load_data_C,
       UNCONNECTED1008, UNCONNECTED1009, UNCONNECTED1010,
       UNCONNECTED1011;
  wire UNCONNECTED1012, UNCONNECTED1013, UNCONNECTED1014,
       UNCONNECTED1015, UNCONNECTED1016, UNCONNECTED1017,
       UNCONNECTED1018, UNCONNECTED1019;
  wire UNCONNECTED1020, UNCONNECTED1021, UNCONNECTED1022,
       UNCONNECTED1023, UNCONNECTED1024, UNCONNECTED1025,
       UNCONNECTED1026, UNCONNECTED1027;
  wire UNCONNECTED1028, UNCONNECTED1029, UNCONNECTED1030,
       UNCONNECTED1031, UNCONNECTED1032, UNCONNECTED1033,
       UNCONNECTED1034, UNCONNECTED1035;
  wire UNCONNECTED1036, UNCONNECTED1037, UNCONNECTED1038,
       UNCONNECTED1039, UNCONNECTED1040, UNCONNECTED1041,
       UNCONNECTED1042, UNCONNECTED1043;
  wire UNCONNECTED1044, UNCONNECTED1045, UNCONNECTED1046,
       UNCONNECTED1047, UNCONNECTED1048, UNCONNECTED1049,
       UNCONNECTED1050, UNCONNECTED1051;
  wire UNCONNECTED1052, UNCONNECTED1053, UNCONNECTED1054,
       UNCONNECTED1055, UNCONNECTED1056, UNCONNECTED1057,
       UNCONNECTED1058, UNCONNECTED1059;
  wire UNCONNECTED1060, UNCONNECTED1061, UNCONNECTED1062,
       UNCONNECTED1063, UNCONNECTED1064, UNCONNECTED1065,
       UNCONNECTED1066, UNCONNECTED1067;
  wire UNCONNECTED1068, UNCONNECTED1069, UNCONNECTED1070,
       UNCONNECTED1071, UNCONNECTED1072, UNCONNECTED1073,
       UNCONNECTED1074, UNCONNECTED1075;
  wire UNCONNECTED1076, UNCONNECTED1077, UNCONNECTED1078,
       UNCONNECTED1079, UNCONNECTED1080, UNCONNECTED1081,
       UNCONNECTED1082, UNCONNECTED1083;
  wire UNCONNECTED1084, UNCONNECTED1085, UNCONNECTED1086,
       UNCONNECTED1087, UNCONNECTED1088, UNCONNECTED1089,
       UNCONNECTED1090, UNCONNECTED1091;
  wire UNCONNECTED1092, UNCONNECTED1093, UNCONNECTED1094,
       UNCONNECTED1095, UNCONNECTED1096, UNCONNECTED1097,
       UNCONNECTED1098, UNCONNECTED1099;
  wire UNCONNECTED1100, UNCONNECTED1101, UNCONNECTED1102,
       UNCONNECTED1103, UNCONNECTED1104, UNCONNECTED1105,
       UNCONNECTED1106, UNCONNECTED1107;
  wire UNCONNECTED1108, UNCONNECTED1109, UNCONNECTED1110,
       UNCONNECTED1111, UNCONNECTED1112, UNCONNECTED1113,
       UNCONNECTED1114, UNCONNECTED1115;
  wire UNCONNECTED1116, UNCONNECTED1117, UNCONNECTED1118,
       UNCONNECTED1119, UNCONNECTED1120, UNCONNECTED1121,
       UNCONNECTED1122, UNCONNECTED1123;
  wire UNCONNECTED1124, UNCONNECTED1125, UNCONNECTED1126,
       UNCONNECTED1127, UNCONNECTED1128, UNCONNECTED1129,
       UNCONNECTED1130, UNCONNECTED1131;
  wire UNCONNECTED1132, UNCONNECTED1133, UNCONNECTED1134,
       UNCONNECTED1135, UNCONNECTED1136, UNCONNECTED1137,
       UNCONNECTED1138, UNCONNECTED1139;
  wire UNCONNECTED1140, UNCONNECTED1141, UNCONNECTED1142,
       UNCONNECTED1143, UNCONNECTED1144, UNCONNECTED1145,
       UNCONNECTED1146, UNCONNECTED1147;
  wire UNCONNECTED1148, UNCONNECTED1149, UNCONNECTED1150,
       UNCONNECTED1151, UNCONNECTED1152, UNCONNECTED1153,
       UNCONNECTED1154, UNCONNECTED1155;
  wire UNCONNECTED1156, UNCONNECTED1157, UNCONNECTED1158,
       UNCONNECTED1159, UNCONNECTED1160, UNCONNECTED1161,
       UNCONNECTED1162, UNCONNECTED1163;
  wire UNCONNECTED1164, UNCONNECTED1165, UNCONNECTED1166,
       UNCONNECTED1167, UNCONNECTED1168, UNCONNECTED1169,
       UNCONNECTED1170, UNCONNECTED1171;
  wire UNCONNECTED1172, UNCONNECTED1173, UNCONNECTED1174,
       UNCONNECTED1175, UNCONNECTED1176, UNCONNECTED1177,
       UNCONNECTED1178, UNCONNECTED1179;
  wire UNCONNECTED1180, UNCONNECTED1181, UNCONNECTED1182,
       UNCONNECTED1183, UNCONNECTED1184, UNCONNECTED1185,
       UNCONNECTED1186, UNCONNECTED1187;
  wire UNCONNECTED1188, UNCONNECTED1189, UNCONNECTED1190,
       UNCONNECTED1191, UNCONNECTED1192, UNCONNECTED1193,
       UNCONNECTED1194, UNCONNECTED1195;
  wire UNCONNECTED1196, UNCONNECTED1197, UNCONNECTED1198,
       UNCONNECTED1199, UNCONNECTED1200, UNCONNECTED1201,
       UNCONNECTED1202, UNCONNECTED1203;
  wire UNCONNECTED1204, UNCONNECTED1205, UNCONNECTED1206,
       UNCONNECTED1207, UNCONNECTED1208, UNCONNECTED1209,
       UNCONNECTED1210, UNCONNECTED1211;
  wire UNCONNECTED1212, UNCONNECTED1213, UNCONNECTED1214,
       check_limit_A, check_limit_B, check_limit_C, full_A, full_B;
  wire full_C, handshake_A, handshake_B, handshake_C, losingTmrError,
       losing_data_A, losing_data_B, losing_data_C;
  wire n_400, n_402, n_403, n_405, n_406, n_408, n_409, n_411;
  wire n_412, n_413, n_414, n_415, n_416, n_417, n_418, n_419;
  wire n_420, n_421, n_422, n_423, n_424, n_425, n_426, n_427;
  wire n_428, n_429, n_430, n_431, n_432, n_433, n_434, n_435;
  wire n_436, n_437, n_438, n_439, n_440, n_441, n_442, n_443;
  wire n_444, n_445, n_446, n_447, n_448, n_449, n_450, n_451;
  wire n_452, n_453, n_454, n_455, n_456, n_457, n_458, n_459;
  wire n_460, n_461, n_462, n_463, n_464, n_465, n_466, n_467;
  wire n_468, n_469, n_470, n_471, n_472, n_473, n_474, n_475;
  wire n_476, n_477, n_478, n_479, n_480, n_481, n_482, n_483;
  wire n_484, n_485, n_486, n_487, n_488, n_489, n_490, n_491;
  wire n_492, n_493, n_494, n_495, n_496, n_497, n_498, n_499;
  wire n_500, n_502, n_503, n_504, n_505, n_506, n_507, n_508;
  wire n_509, n_510, n_511, n_512, n_513, n_514, n_515, n_516;
  wire n_517, n_518, n_519, n_520, n_521, n_522, n_523, n_524;
  wire n_525, n_526, n_527, n_528, n_529, n_530, n_531, n_532;
  wire n_533, n_534, n_535, n_536, n_537, n_538, n_539, n_540;
  wire n_541, n_542, n_543, n_544, n_545, n_546, n_547, n_548;
  wire n_549, n_550, n_551, n_552, n_553, n_554, n_555, n_556;
  wire n_557, n_558, n_559, n_560, n_561, n_562, n_563, n_564;
  wire n_565, n_566, n_567, n_568, n_569, n_570, n_571, n_572;
  wire n_573, n_574, n_575, n_576, n_577, n_578, n_579, n_580;
  wire n_581, n_582, n_583, n_584, n_585, n_586, n_587, n_588;
  wire n_589, n_590, n_591, n_593, n_594, n_595, n_596, n_597;
  wire n_598, n_599, n_600, n_601, n_602, n_603, n_604, n_605;
  wire n_606, n_607, n_608, n_609, n_610, n_611, n_612, n_613;
  wire n_614, n_615, n_616, n_617, n_618, n_619, n_620, n_621;
  wire n_622, n_623, n_624, n_625, n_626, n_627, n_628, n_629;
  wire n_630, n_631, n_632, n_633, n_634, n_635, n_636, n_637;
  wire n_638, n_639, n_640, n_641, n_642, n_643, n_644, n_645;
  wire n_646, n_647, n_648, n_649, n_650, n_651, n_652, n_653;
  wire n_654, n_655, n_656, n_657, n_658, n_659, n_660, n_661;
  wire n_662, n_663, n_664, n_665, n_666, n_667, n_668, n_669;
  wire n_670, n_671, n_672, n_673, n_674, n_675, n_676, n_677;
  wire n_678, n_679, n_680, n_681, n_720, n_722, n_723, n_725;
  wire n_736, n_738, n_739, n_741, n_752, n_754, n_755, n_757;
  wire n_781, n_783, n_785, n_1439, n_1444, n_1449, n_1451, n_1452;
  wire n_1453, n_1454, n_1455, n_1456, n_1457, n_1458, n_1459, n_1460;
  wire n_1461, n_1462, readTmrError, read_signal_A, read_signal_B,
       read_signal_C, writeTmrError, write_signal_A;
  wire write_signal_B, write_signal_C;
  CRC_calc calc_crc_A(.reset (reset_A), .data (DATA_32_A), .crc
       (crc_A), .newcrc (out_crc_A));
  CRC_calc calc_crc_B(.reset (reset_B), .data (DATA_32_B), .crc
       (crc_B), .newcrc (out_crc_B));
  CRC_calc calc_crc_C(.reset (reset_C), .data (DATA_32_C), .crc
       (crc_C), .newcrc (out_crc_C));
  SumValue SumValue_A(.data (DATA_32_A[31:24]), .sum_val (sum_val_A));
  SumValue SumValue_B(.data (DATA_32_B[31:24]), .sum_val (sum_val_B));
  SumValue SumValue_C(.data (DATA_32_C[31:24]), .sum_val (sum_val_C));
  majorityVoter_WIDTH32 DATA_from_CUVoter(.inA (DATA_from_CU_A), .inB
       (DATA_from_CU_B), .inC (DATA_from_CU_C), .out (DATA_from_CU),
       .tmrErr (DATA_from_CUTmrError));
  majorityVoter readVoter(.inA (read_signal_A), .inB (read_signal_B),
       .inC (read_signal_C), .out (read_signal), .tmrErr
       (readTmrError));
  majorityVoter writeVoter(.inA (write_signal_A), .inB
       (write_signal_B), .inC (write_signal_C), .out (write_signal),
       .tmrErr (writeTmrError));
  majorityVoter losingVoter(.inA (losing_data_A), .inB (losing_data_B),
       .inC (losing_data_C), .out (losing_data), .tmrErr
       (losingTmrError));
  fanout_WIDTH32 DATA_32Fanout(.in (DATA_32), .outA (DATA_32_A), .outB
       (DATA_32_B), .outC (DATA_32_C));
  fanout Load_dataFanout(.in (Load_data), .outA (Load_data_A), .outB
       (Load_data_B), .outC (Load_data_C));
  fanout handshakeFanout(.in (handshake), .outA (handshake_A), .outB
       (handshake_B), .outC (handshake_C));
  fanout fullFanout(.in (full), .outA (full_A), .outB (full_B), .outC
       (full_C));
  add_unsigned_389 add_158_29(.A (NSample_A), .B (sum_val_A), .Z
       ({n_635, n_634, n_633, n_632, n_631, n_630, n_629, n_628}));
  add_unsigned_391 add_157_26(.A (Nlimit_A), .B (1'b1), .Z ({n_599,
       n_598, n_597, n_596, n_595, n_594}));
  add_unsigned_393 add_152_28(.A (NFrame_A), .B (1'b1), .Z ({n_614,
       n_613, n_612, n_611, n_610, n_609, n_608, n_607}));
  add_unsigned_389 add_184_29(.A (NSample_B), .B (sum_val_B), .Z
       ({n_544, n_543, n_542, n_541, n_540, n_539, n_538, n_537}));
  add_unsigned_391 add_183_26(.A (Nlimit_B), .B (1'b1), .Z ({n_508,
       n_507, n_506, n_505, n_504, n_503}));
  add_unsigned_393 add_178_27(.A (NFrame_B), .B (1'b1), .Z ({n_523,
       n_522, n_521, n_520, n_519, n_518, n_517, n_516}));
  add_unsigned_389 add_210_29(.A (NSample_C), .B (sum_val_C), .Z
       ({n_453, n_452, n_451, n_450, n_449, n_448, n_447, n_446}));
  add_unsigned_391 add_209_26(.A (Nlimit_C), .B (1'b1), .Z ({n_417,
       n_416, n_415, n_414, n_413, n_412}));
  add_unsigned_393 add_204_27(.A (NFrame_C), .B (1'b1), .Z ({n_432,
       n_431, n_430, n_429, n_428, n_427, n_426, n_425}));
  gt_unsigned gt_100_34(.A (Nlimit_A), .B (6'b110001), .Z (n_606));
  gt_unsigned gt_104_34(.A (Nlimit_B), .B (6'b110001), .Z (n_515));
  gt_unsigned gt_108_34(.A (Nlimit_C), .B (6'b110001), .Z (n_424));
  bmux mux_read_signal_C_331_20(.ctl (handshake_C), .in_0 (1'b0), .in_1
       (1'b1), .z (n_402));
  bmux mux_read_signal_C_329_15(.ctl (n_400), .in_0 (n_402), .in_1
       (1'b0), .z (UNCONNECTED1008));
  bmux mux_read_signal_B_322_20(.ctl (handshake_B), .in_0 (1'b0), .in_1
       (1'b1), .z (n_405));
  bmux mux_read_signal_B_320_15(.ctl (n_403), .in_0 (n_405), .in_1
       (1'b0), .z (UNCONNECTED1009));
  bmux mux_read_signal_A_313_20(.ctl (handshake_A), .in_0 (1'b0), .in_1
       (1'b1), .z (n_408));
  bmux mux_read_signal_A_311_15(.ctl (n_406), .in_0 (n_408), .in_1
       (1'b0), .z (UNCONNECTED1010));
  bmux_241 mux_Nlimit_C_198_20(.ctl (n_409), .in_0 ({n_417, n_416,
       n_415, n_414, n_413, n_412}), .in_1 (6'b000000), .z ({n_423,
       n_422, n_421, n_420, n_419, n_418}));
  bmux_241 mux_Nlimit_C_192_14(.ctl (n_400), .in_0 ({n_423, n_422,
       n_421, n_420, n_419, n_418}), .in_1 (6'b000000), .z
       ({UNCONNECTED1016, UNCONNECTED1015, UNCONNECTED1014,
       UNCONNECTED1013, UNCONNECTED1012, UNCONNECTED1011}));
  bmux mux_108_34(.ctl (n_424), .in_0 (1'b0), .in_1 (1'b1), .z
       (check_limit_C));
  bmux_112 mux_NFrame_C_192_14(.ctl (n_400), .in_0 ({n_432, n_431,
       n_430, n_429, n_428, n_427, n_426, n_425}), .in_1 (8'b00000000),
       .z ({UNCONNECTED1024, UNCONNECTED1023, UNCONNECTED1022,
       UNCONNECTED1021, UNCONNECTED1020, UNCONNECTED1019,
       UNCONNECTED1018, UNCONNECTED1017}));
  bmux_19 mux_crc_C_198_20(.ctl (n_409), .in_0 (out_crc_C), .in_1
       (12'b000000000000), .z ({n_444, n_443, n_442, n_441, n_440,
       n_439, n_438, n_437, n_436, n_435, n_434, n_433}));
  bmux_19 mux_crc_C_192_14(.ctl (n_400), .in_0 ({n_444, n_443, n_442,
       n_441, n_440, n_439, n_438, n_437, n_436, n_435, n_434, n_433}),
       .in_1 (12'b000000000000), .z ({UNCONNECTED1036, UNCONNECTED1035,
       UNCONNECTED1034, UNCONNECTED1033, UNCONNECTED1032,
       UNCONNECTED1031, UNCONNECTED1030, UNCONNECTED1029,
       UNCONNECTED1028, UNCONNECTED1027, UNCONNECTED1026,
       UNCONNECTED1025}));
  bmux_112 mux_NSample_C_198_20(.ctl (n_409), .in_0 ({n_453, n_452,
       n_451, n_450, n_449, n_448, n_447, n_446}), .in_1 (8'b00000000),
       .z ({n_461, n_460, n_459, n_458, n_457, n_456, n_455, n_454}));
  bmux_112 mux_NSample_C_192_14(.ctl (n_400), .in_0 ({n_461, n_460,
       n_459, n_458, n_457, n_456, n_455, n_454}), .in_1 (8'b00000000),
       .z ({UNCONNECTED1044, UNCONNECTED1043, UNCONNECTED1042,
       UNCONNECTED1041, UNCONNECTED1040, UNCONNECTED1039,
       UNCONNECTED1038, UNCONNECTED1037}));
  bmux_112 mux_109_31(.ctl (n_445), .in_0 (NSample_C), .in_1
       (8'b00000000), .z (NSamples_C));
  bmux_279 mux_DATA_from_CU_C_285_20(.ctl (n_409), .in_0 (DATA_32_C),
       .in_1 ({4'b1101, NSamples_C, crc_C, NFrame_C}), .z ({n_493,
       n_492, n_491, n_490, n_489, n_488, n_487, n_486, n_485, n_484,
       n_483, n_482, n_481, n_480, n_479, n_478, n_477, n_476, n_475,
       n_474, n_473, n_472, n_471, n_470, n_469, n_468, n_467, n_466,
       n_465, n_464, n_463, n_462}));
  bmux_279 mux_DATA_from_CU_C_280_14(.ctl (n_400), .in_0 ({n_493,
       n_492, n_491, n_490, n_489, n_488, n_487, n_486, n_485, n_484,
       n_483, n_482, n_481, n_480, n_479, n_478, n_477, n_476, n_475,
       n_474, n_473, n_472, n_471, n_470, n_469, n_468, n_467, n_466,
       n_465, n_464, n_463, n_462}), .in_1
       (32'b11110000000000000000000000000000), .z ({UNCONNECTED1076,
       UNCONNECTED1075, UNCONNECTED1074, UNCONNECTED1073,
       UNCONNECTED1072, UNCONNECTED1071, UNCONNECTED1070,
       UNCONNECTED1069, UNCONNECTED1068, UNCONNECTED1067,
       UNCONNECTED1066, UNCONNECTED1065, UNCONNECTED1064,
       UNCONNECTED1063, UNCONNECTED1062, UNCONNECTED1061,
       UNCONNECTED1060, UNCONNECTED1059, UNCONNECTED1058,
       UNCONNECTED1057, UNCONNECTED1056, UNCONNECTED1055,
       UNCONNECTED1054, UNCONNECTED1053, UNCONNECTED1052,
       UNCONNECTED1051, UNCONNECTED1050, UNCONNECTED1049,
       UNCONNECTED1048, UNCONNECTED1047, UNCONNECTED1046,
       UNCONNECTED1045}));
  bmux mux_write_signal_C_288_16(.ctl (n_411), .in_0 (1'b0), .in_1
       (1'b1), .z (n_494));
  bmux mux_write_signal_C_287_22(.ctl (check_limit_C), .in_0 (1'b0),
       .in_1 (n_494), .z (n_495));
  bmux mux_write_signal_C_298_15(.ctl (n_411), .in_0 (1'b0), .in_1
       (1'b1), .z (n_496));
  bmux mux_write_signal_C_285_20(.ctl (n_409), .in_0 (n_496), .in_1
       (n_495), .z (n_497));
  bmux mux_write_signal_C_280_14(.ctl (n_400), .in_0 (n_497), .in_1
       (1'b0), .z (UNCONNECTED1077));
  bmux mux_losing_data_C_298_15(.ctl (n_411), .in_0 (1'b1), .in_1
       (1'b0), .z (n_498));
  bmux mux_losing_data_C_285_20(.ctl (n_409), .in_0 (n_498), .in_1
       (1'b0), .z (n_499));
  bmux mux_losing_data_C_280_14(.ctl (n_400), .in_0 (n_499), .in_1
       (1'b0), .z (UNCONNECTED1078));
  bmux_241 mux_Nlimit_B_172_20(.ctl (n_500), .in_0 ({n_508, n_507,
       n_506, n_505, n_504, n_503}), .in_1 (6'b000000), .z ({n_514,
       n_513, n_512, n_511, n_510, n_509}));
  bmux_241 mux_Nlimit_B_166_14(.ctl (n_403), .in_0 ({n_514, n_513,
       n_512, n_511, n_510, n_509}), .in_1 (6'b000000), .z
       ({UNCONNECTED1084, UNCONNECTED1083, UNCONNECTED1082,
       UNCONNECTED1081, UNCONNECTED1080, UNCONNECTED1079}));
  bmux mux_104_34(.ctl (n_515), .in_0 (1'b0), .in_1 (1'b1), .z
       (check_limit_B));
  bmux_112 mux_NFrame_B_166_14(.ctl (n_403), .in_0 ({n_523, n_522,
       n_521, n_520, n_519, n_518, n_517, n_516}), .in_1 (8'b00000000),
       .z ({UNCONNECTED1092, UNCONNECTED1091, UNCONNECTED1090,
       UNCONNECTED1089, UNCONNECTED1088, UNCONNECTED1087,
       UNCONNECTED1086, UNCONNECTED1085}));
  bmux_19 mux_crc_B_172_20(.ctl (n_500), .in_0 (out_crc_B), .in_1
       (12'b000000000000), .z ({n_535, n_534, n_533, n_532, n_531,
       n_530, n_529, n_528, n_527, n_526, n_525, n_524}));
  bmux_19 mux_crc_B_166_14(.ctl (n_403), .in_0 ({n_535, n_534, n_533,
       n_532, n_531, n_530, n_529, n_528, n_527, n_526, n_525, n_524}),
       .in_1 (12'b000000000000), .z ({UNCONNECTED1104, UNCONNECTED1103,
       UNCONNECTED1102, UNCONNECTED1101, UNCONNECTED1100,
       UNCONNECTED1099, UNCONNECTED1098, UNCONNECTED1097,
       UNCONNECTED1096, UNCONNECTED1095, UNCONNECTED1094,
       UNCONNECTED1093}));
  bmux_112 mux_NSample_B_172_20(.ctl (n_500), .in_0 ({n_544, n_543,
       n_542, n_541, n_540, n_539, n_538, n_537}), .in_1 (8'b00000000),
       .z ({n_552, n_551, n_550, n_549, n_548, n_547, n_546, n_545}));
  bmux_112 mux_NSample_B_166_14(.ctl (n_403), .in_0 ({n_552, n_551,
       n_550, n_549, n_548, n_547, n_546, n_545}), .in_1 (8'b00000000),
       .z ({UNCONNECTED1112, UNCONNECTED1111, UNCONNECTED1110,
       UNCONNECTED1109, UNCONNECTED1108, UNCONNECTED1107,
       UNCONNECTED1106, UNCONNECTED1105}));
  bmux_112 mux_105_31(.ctl (n_536), .in_0 (NSample_B), .in_1
       (8'b00000000), .z (NSamples_B));
  bmux_279 mux_DATA_from_CU_B_254_20(.ctl (n_500), .in_0 (DATA_32_B),
       .in_1 ({4'b1101, NSamples_B, crc_B, NFrame_B}), .z ({n_584,
       n_583, n_582, n_581, n_580, n_579, n_578, n_577, n_576, n_575,
       n_574, n_573, n_572, n_571, n_570, n_569, n_568, n_567, n_566,
       n_565, n_564, n_563, n_562, n_561, n_560, n_559, n_558, n_557,
       n_556, n_555, n_554, n_553}));
  bmux_279 mux_DATA_from_CU_B_249_14(.ctl (n_403), .in_0 ({n_584,
       n_583, n_582, n_581, n_580, n_579, n_578, n_577, n_576, n_575,
       n_574, n_573, n_572, n_571, n_570, n_569, n_568, n_567, n_566,
       n_565, n_564, n_563, n_562, n_561, n_560, n_559, n_558, n_557,
       n_556, n_555, n_554, n_553}), .in_1
       (32'b11110000000000000000000000000000), .z ({UNCONNECTED1144,
       UNCONNECTED1143, UNCONNECTED1142, UNCONNECTED1141,
       UNCONNECTED1140, UNCONNECTED1139, UNCONNECTED1138,
       UNCONNECTED1137, UNCONNECTED1136, UNCONNECTED1135,
       UNCONNECTED1134, UNCONNECTED1133, UNCONNECTED1132,
       UNCONNECTED1131, UNCONNECTED1130, UNCONNECTED1129,
       UNCONNECTED1128, UNCONNECTED1127, UNCONNECTED1126,
       UNCONNECTED1125, UNCONNECTED1124, UNCONNECTED1123,
       UNCONNECTED1122, UNCONNECTED1121, UNCONNECTED1120,
       UNCONNECTED1119, UNCONNECTED1118, UNCONNECTED1117,
       UNCONNECTED1116, UNCONNECTED1115, UNCONNECTED1114,
       UNCONNECTED1113}));
  bmux mux_write_signal_B_257_16(.ctl (n_502), .in_0 (1'b0), .in_1
       (1'b1), .z (n_585));
  bmux mux_write_signal_B_256_22(.ctl (check_limit_B), .in_0 (1'b0),
       .in_1 (n_585), .z (n_586));
  bmux mux_write_signal_B_267_15(.ctl (n_502), .in_0 (1'b0), .in_1
       (1'b1), .z (n_587));
  bmux mux_write_signal_B_254_20(.ctl (n_500), .in_0 (n_587), .in_1
       (n_586), .z (n_588));
  bmux mux_write_signal_B_249_14(.ctl (n_403), .in_0 (n_588), .in_1
       (1'b0), .z (UNCONNECTED1145));
  bmux mux_losing_data_B_267_15(.ctl (n_502), .in_0 (1'b1), .in_1
       (1'b0), .z (n_589));
  bmux mux_losing_data_B_254_20(.ctl (n_500), .in_0 (n_589), .in_1
       (1'b0), .z (n_590));
  bmux mux_losing_data_B_249_14(.ctl (n_403), .in_0 (n_590), .in_1
       (1'b0), .z (UNCONNECTED1146));
  bmux_241 mux_Nlimit_A_146_20(.ctl (n_591), .in_0 ({n_599, n_598,
       n_597, n_596, n_595, n_594}), .in_1 (6'b000000), .z ({n_605,
       n_604, n_603, n_602, n_601, n_600}));
  bmux_241 mux_Nlimit_A_140_14(.ctl (n_406), .in_0 ({n_605, n_604,
       n_603, n_602, n_601, n_600}), .in_1 (6'b000000), .z
       ({UNCONNECTED1152, UNCONNECTED1151, UNCONNECTED1150,
       UNCONNECTED1149, UNCONNECTED1148, UNCONNECTED1147}));
  bmux mux_100_34(.ctl (n_606), .in_0 (1'b0), .in_1 (1'b1), .z
       (check_limit_A));
  bmux_112 mux_NFrame_A_140_14(.ctl (n_406), .in_0 ({n_614, n_613,
       n_612, n_611, n_610, n_609, n_608, n_607}), .in_1 (8'b00000000),
       .z ({UNCONNECTED1160, UNCONNECTED1159, UNCONNECTED1158,
       UNCONNECTED1157, UNCONNECTED1156, UNCONNECTED1155,
       UNCONNECTED1154, UNCONNECTED1153}));
  bmux_19 mux_crc_A_146_20(.ctl (n_591), .in_0 (out_crc_A), .in_1
       (12'b000000000000), .z ({n_626, n_625, n_624, n_623, n_622,
       n_621, n_620, n_619, n_618, n_617, n_616, n_615}));
  bmux_19 mux_crc_A_140_14(.ctl (n_406), .in_0 ({n_626, n_625, n_624,
       n_623, n_622, n_621, n_620, n_619, n_618, n_617, n_616, n_615}),
       .in_1 (12'b000000000000), .z ({UNCONNECTED1172, UNCONNECTED1171,
       UNCONNECTED1170, UNCONNECTED1169, UNCONNECTED1168,
       UNCONNECTED1167, UNCONNECTED1166, UNCONNECTED1165,
       UNCONNECTED1164, UNCONNECTED1163, UNCONNECTED1162,
       UNCONNECTED1161}));
  bmux_112 mux_NSample_A_146_20(.ctl (n_591), .in_0 ({n_635, n_634,
       n_633, n_632, n_631, n_630, n_629, n_628}), .in_1 (8'b00000000),
       .z ({n_643, n_642, n_641, n_640, n_639, n_638, n_637, n_636}));
  bmux_112 mux_NSample_A_140_14(.ctl (n_406), .in_0 ({n_643, n_642,
       n_641, n_640, n_639, n_638, n_637, n_636}), .in_1 (8'b00000000),
       .z ({UNCONNECTED1180, UNCONNECTED1179, UNCONNECTED1178,
       UNCONNECTED1177, UNCONNECTED1176, UNCONNECTED1175,
       UNCONNECTED1174, UNCONNECTED1173}));
  bmux_112 mux_101_31(.ctl (n_627), .in_0 (NSample_A), .in_1
       (8'b00000000), .z (NSamples_A));
  bmux_279 mux_DATA_from_CU_A_223_20(.ctl (n_591), .in_0 (DATA_32_A),
       .in_1 ({4'b1101, NSamples_A, crc_A, NFrame_A}), .z ({n_675,
       n_674, n_673, n_672, n_671, n_670, n_669, n_668, n_667, n_666,
       n_665, n_664, n_663, n_662, n_661, n_660, n_659, n_658, n_657,
       n_656, n_655, n_654, n_653, n_652, n_651, n_650, n_649, n_648,
       n_647, n_646, n_645, n_644}));
  bmux_279 mux_DATA_from_CU_A_218_14(.ctl (n_406), .in_0 ({n_675,
       n_674, n_673, n_672, n_671, n_670, n_669, n_668, n_667, n_666,
       n_665, n_664, n_663, n_662, n_661, n_660, n_659, n_658, n_657,
       n_656, n_655, n_654, n_653, n_652, n_651, n_650, n_649, n_648,
       n_647, n_646, n_645, n_644}), .in_1
       (32'b11110000000000000000000000000000), .z ({UNCONNECTED1212,
       UNCONNECTED1211, UNCONNECTED1210, UNCONNECTED1209,
       UNCONNECTED1208, UNCONNECTED1207, UNCONNECTED1206,
       UNCONNECTED1205, UNCONNECTED1204, UNCONNECTED1203,
       UNCONNECTED1202, UNCONNECTED1201, UNCONNECTED1200,
       UNCONNECTED1199, UNCONNECTED1198, UNCONNECTED1197,
       UNCONNECTED1196, UNCONNECTED1195, UNCONNECTED1194,
       UNCONNECTED1193, UNCONNECTED1192, UNCONNECTED1191,
       UNCONNECTED1190, UNCONNECTED1189, UNCONNECTED1188,
       UNCONNECTED1187, UNCONNECTED1186, UNCONNECTED1185,
       UNCONNECTED1184, UNCONNECTED1183, UNCONNECTED1182,
       UNCONNECTED1181}));
  bmux mux_write_signal_A_226_16(.ctl (n_593), .in_0 (1'b0), .in_1
       (1'b1), .z (n_676));
  bmux mux_write_signal_A_225_22(.ctl (check_limit_A), .in_0 (1'b0),
       .in_1 (n_676), .z (n_677));
  bmux mux_write_signal_A_236_15(.ctl (n_593), .in_0 (1'b0), .in_1
       (1'b1), .z (n_678));
  bmux mux_write_signal_A_223_20(.ctl (n_591), .in_0 (n_678), .in_1
       (n_677), .z (n_679));
  bmux mux_write_signal_A_218_14(.ctl (n_406), .in_0 (n_679), .in_1
       (1'b0), .z (UNCONNECTED1213));
  bmux mux_losing_data_A_236_15(.ctl (n_593), .in_0 (1'b1), .in_1
       (1'b0), .z (n_680));
  bmux mux_losing_data_A_223_20(.ctl (n_591), .in_0 (n_680), .in_1
       (1'b0), .z (n_681));
  bmux mux_losing_data_A_218_14(.ctl (n_406), .in_0 (n_681), .in_1
       (1'b0), .z (UNCONNECTED1214));
  and g49 (n_720, n_593, check_limit_A);
  and g50 (n_723, n_720, n_591);
  and g51 (n_722, n_593, Load_data_A);
  or g52 (n_725, n_722, n_723);
  and g63 (n_736, n_502, check_limit_B);
  and g64 (n_739, n_736, n_500);
  and g65 (n_738, n_502, Load_data_B);
  or g66 (n_741, n_738, n_739);
  and g77 (n_752, n_411, check_limit_C);
  and g78 (n_755, n_752, n_409);
  and g79 (n_754, n_411, Load_data_C);
  or g80 (n_757, n_754, n_755);
  and g103 (n_781, handshake_A, reset_A);
  and g104 (n_783, handshake_B, reset_B);
  and g105 (n_785, handshake_C, reset_C);
  CDN_flop \NSample_A_reg[0] (.clk (CLK_A), .d (n_636), .sena (n_725),
       .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b0), .q
       (NSample_A[0]));
  CDN_flop \NSample_A_reg[1] (.clk (CLK_A), .d (n_637), .sena (n_725),
       .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b0), .q
       (NSample_A[1]));
  CDN_flop \NSample_A_reg[2] (.clk (CLK_A), .d (n_638), .sena (n_725),
       .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b0), .q
       (NSample_A[2]));
  CDN_flop \NSample_A_reg[3] (.clk (CLK_A), .d (n_639), .sena (n_725),
       .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b0), .q
       (NSample_A[3]));
  CDN_flop \NSample_A_reg[4] (.clk (CLK_A), .d (n_640), .sena (n_725),
       .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b0), .q
       (NSample_A[4]));
  CDN_flop \NSample_A_reg[5] (.clk (CLK_A), .d (n_641), .sena (n_725),
       .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b0), .q
       (NSample_A[5]));
  CDN_flop \NSample_A_reg[6] (.clk (CLK_A), .d (n_642), .sena (n_725),
       .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b0), .q
       (NSample_A[6]));
  CDN_flop \NSample_A_reg[7] (.clk (CLK_A), .d (n_643), .sena (n_725),
       .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b0), .q
       (NSample_A[7]));
  CDN_flop \Nlimit_A_reg[0] (.clk (CLK_A), .d (n_600), .sena (n_725),
       .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b0), .q
       (Nlimit_A[0]));
  CDN_flop \Nlimit_A_reg[1] (.clk (CLK_A), .d (n_601), .sena (n_725),
       .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b0), .q
       (Nlimit_A[1]));
  CDN_flop \Nlimit_A_reg[2] (.clk (CLK_A), .d (n_602), .sena (n_725),
       .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b0), .q
       (Nlimit_A[2]));
  CDN_flop \Nlimit_A_reg[3] (.clk (CLK_A), .d (n_603), .sena (n_725),
       .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b0), .q
       (Nlimit_A[3]));
  CDN_flop \Nlimit_A_reg[4] (.clk (CLK_A), .d (n_604), .sena (n_725),
       .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b0), .q
       (Nlimit_A[4]));
  CDN_flop \Nlimit_A_reg[5] (.clk (CLK_A), .d (n_605), .sena (n_725),
       .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b0), .q
       (Nlimit_A[5]));
  CDN_flop \NFrame_A_reg[0] (.clk (CLK_A), .d (n_607), .sena (n_723),
       .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b0), .q
       (NFrame_A[0]));
  CDN_flop \NFrame_A_reg[1] (.clk (CLK_A), .d (n_608), .sena (n_723),
       .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b0), .q
       (NFrame_A[1]));
  CDN_flop \NFrame_A_reg[2] (.clk (CLK_A), .d (n_609), .sena (n_723),
       .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b0), .q
       (NFrame_A[2]));
  CDN_flop \NFrame_A_reg[3] (.clk (CLK_A), .d (n_610), .sena (n_723),
       .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b0), .q
       (NFrame_A[3]));
  CDN_flop \NFrame_A_reg[4] (.clk (CLK_A), .d (n_611), .sena (n_723),
       .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b0), .q
       (NFrame_A[4]));
  CDN_flop \NFrame_A_reg[5] (.clk (CLK_A), .d (n_612), .sena (n_723),
       .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b0), .q
       (NFrame_A[5]));
  CDN_flop \NFrame_A_reg[6] (.clk (CLK_A), .d (n_613), .sena (n_723),
       .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b0), .q
       (NFrame_A[6]));
  CDN_flop \NFrame_A_reg[7] (.clk (CLK_A), .d (n_614), .sena (n_723),
       .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b0), .q
       (NFrame_A[7]));
  CDN_flop \crc_A_reg[0] (.clk (CLK_A), .d (n_615), .sena (n_725),
       .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b0), .q
       (crc_A[0]));
  CDN_flop \crc_A_reg[1] (.clk (CLK_A), .d (n_616), .sena (n_725),
       .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b0), .q
       (crc_A[1]));
  CDN_flop \crc_A_reg[2] (.clk (CLK_A), .d (n_617), .sena (n_725),
       .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b0), .q
       (crc_A[2]));
  CDN_flop \crc_A_reg[3] (.clk (CLK_A), .d (n_618), .sena (n_725),
       .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b0), .q
       (crc_A[3]));
  CDN_flop \crc_A_reg[4] (.clk (CLK_A), .d (n_619), .sena (n_725),
       .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b0), .q
       (crc_A[4]));
  CDN_flop \crc_A_reg[5] (.clk (CLK_A), .d (n_620), .sena (n_725),
       .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b0), .q
       (crc_A[5]));
  CDN_flop \crc_A_reg[6] (.clk (CLK_A), .d (n_621), .sena (n_725),
       .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b0), .q
       (crc_A[6]));
  CDN_flop \crc_A_reg[7] (.clk (CLK_A), .d (n_622), .sena (n_725),
       .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b0), .q
       (crc_A[7]));
  CDN_flop \crc_A_reg[8] (.clk (CLK_A), .d (n_623), .sena (n_725),
       .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b0), .q
       (crc_A[8]));
  CDN_flop \crc_A_reg[9] (.clk (CLK_A), .d (n_624), .sena (n_725),
       .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b0), .q
       (crc_A[9]));
  CDN_flop \crc_A_reg[10] (.clk (CLK_A), .d (n_625), .sena (n_725),
       .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b0), .q
       (crc_A[10]));
  CDN_flop \crc_A_reg[11] (.clk (CLK_A), .d (n_626), .sena (n_725),
       .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b0), .q
       (crc_A[11]));
  CDN_flop \NSample_B_reg[0] (.clk (CLK_B), .d (n_545), .sena (n_741),
       .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b0), .q
       (NSample_B[0]));
  CDN_flop \NSample_B_reg[1] (.clk (CLK_B), .d (n_546), .sena (n_741),
       .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b0), .q
       (NSample_B[1]));
  CDN_flop \NSample_B_reg[2] (.clk (CLK_B), .d (n_547), .sena (n_741),
       .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b0), .q
       (NSample_B[2]));
  CDN_flop \NSample_B_reg[3] (.clk (CLK_B), .d (n_548), .sena (n_741),
       .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b0), .q
       (NSample_B[3]));
  CDN_flop \NSample_B_reg[4] (.clk (CLK_B), .d (n_549), .sena (n_741),
       .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b0), .q
       (NSample_B[4]));
  CDN_flop \NSample_B_reg[5] (.clk (CLK_B), .d (n_550), .sena (n_741),
       .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b0), .q
       (NSample_B[5]));
  CDN_flop \NSample_B_reg[6] (.clk (CLK_B), .d (n_551), .sena (n_741),
       .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b0), .q
       (NSample_B[6]));
  CDN_flop \NSample_B_reg[7] (.clk (CLK_B), .d (n_552), .sena (n_741),
       .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b0), .q
       (NSample_B[7]));
  CDN_flop \Nlimit_B_reg[0] (.clk (CLK_B), .d (n_509), .sena (n_741),
       .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b0), .q
       (Nlimit_B[0]));
  CDN_flop \Nlimit_B_reg[1] (.clk (CLK_B), .d (n_510), .sena (n_741),
       .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b0), .q
       (Nlimit_B[1]));
  CDN_flop \Nlimit_B_reg[2] (.clk (CLK_B), .d (n_511), .sena (n_741),
       .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b0), .q
       (Nlimit_B[2]));
  CDN_flop \Nlimit_B_reg[3] (.clk (CLK_B), .d (n_512), .sena (n_741),
       .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b0), .q
       (Nlimit_B[3]));
  CDN_flop \Nlimit_B_reg[4] (.clk (CLK_B), .d (n_513), .sena (n_741),
       .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b0), .q
       (Nlimit_B[4]));
  CDN_flop \Nlimit_B_reg[5] (.clk (CLK_B), .d (n_514), .sena (n_741),
       .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b0), .q
       (Nlimit_B[5]));
  CDN_flop \NFrame_B_reg[0] (.clk (CLK_B), .d (n_516), .sena (n_739),
       .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b0), .q
       (NFrame_B[0]));
  CDN_flop \NFrame_B_reg[1] (.clk (CLK_B), .d (n_517), .sena (n_739),
       .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b0), .q
       (NFrame_B[1]));
  CDN_flop \NFrame_B_reg[2] (.clk (CLK_B), .d (n_518), .sena (n_739),
       .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b0), .q
       (NFrame_B[2]));
  CDN_flop \NFrame_B_reg[3] (.clk (CLK_B), .d (n_519), .sena (n_739),
       .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b0), .q
       (NFrame_B[3]));
  CDN_flop \NFrame_B_reg[4] (.clk (CLK_B), .d (n_520), .sena (n_739),
       .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b0), .q
       (NFrame_B[4]));
  CDN_flop \NFrame_B_reg[5] (.clk (CLK_B), .d (n_521), .sena (n_739),
       .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b0), .q
       (NFrame_B[5]));
  CDN_flop \NFrame_B_reg[6] (.clk (CLK_B), .d (n_522), .sena (n_739),
       .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b0), .q
       (NFrame_B[6]));
  CDN_flop \NFrame_B_reg[7] (.clk (CLK_B), .d (n_523), .sena (n_739),
       .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b0), .q
       (NFrame_B[7]));
  CDN_flop \crc_B_reg[0] (.clk (CLK_B), .d (n_524), .sena (n_741),
       .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b0), .q
       (crc_B[0]));
  CDN_flop \crc_B_reg[1] (.clk (CLK_B), .d (n_525), .sena (n_741),
       .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b0), .q
       (crc_B[1]));
  CDN_flop \crc_B_reg[2] (.clk (CLK_B), .d (n_526), .sena (n_741),
       .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b0), .q
       (crc_B[2]));
  CDN_flop \crc_B_reg[3] (.clk (CLK_B), .d (n_527), .sena (n_741),
       .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b0), .q
       (crc_B[3]));
  CDN_flop \crc_B_reg[4] (.clk (CLK_B), .d (n_528), .sena (n_741),
       .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b0), .q
       (crc_B[4]));
  CDN_flop \crc_B_reg[5] (.clk (CLK_B), .d (n_529), .sena (n_741),
       .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b0), .q
       (crc_B[5]));
  CDN_flop \crc_B_reg[6] (.clk (CLK_B), .d (n_530), .sena (n_741),
       .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b0), .q
       (crc_B[6]));
  CDN_flop \crc_B_reg[7] (.clk (CLK_B), .d (n_531), .sena (n_741),
       .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b0), .q
       (crc_B[7]));
  CDN_flop \crc_B_reg[8] (.clk (CLK_B), .d (n_532), .sena (n_741),
       .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b0), .q
       (crc_B[8]));
  CDN_flop \crc_B_reg[9] (.clk (CLK_B), .d (n_533), .sena (n_741),
       .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b0), .q
       (crc_B[9]));
  CDN_flop \crc_B_reg[10] (.clk (CLK_B), .d (n_534), .sena (n_741),
       .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b0), .q
       (crc_B[10]));
  CDN_flop \crc_B_reg[11] (.clk (CLK_B), .d (n_535), .sena (n_741),
       .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b0), .q
       (crc_B[11]));
  CDN_flop \NSample_C_reg[0] (.clk (CLK_C), .d (n_454), .sena (n_757),
       .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b0), .q
       (NSample_C[0]));
  CDN_flop \NSample_C_reg[1] (.clk (CLK_C), .d (n_455), .sena (n_757),
       .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b0), .q
       (NSample_C[1]));
  CDN_flop \NSample_C_reg[2] (.clk (CLK_C), .d (n_456), .sena (n_757),
       .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b0), .q
       (NSample_C[2]));
  CDN_flop \NSample_C_reg[3] (.clk (CLK_C), .d (n_457), .sena (n_757),
       .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b0), .q
       (NSample_C[3]));
  CDN_flop \NSample_C_reg[4] (.clk (CLK_C), .d (n_458), .sena (n_757),
       .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b0), .q
       (NSample_C[4]));
  CDN_flop \NSample_C_reg[5] (.clk (CLK_C), .d (n_459), .sena (n_757),
       .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b0), .q
       (NSample_C[5]));
  CDN_flop \NSample_C_reg[6] (.clk (CLK_C), .d (n_460), .sena (n_757),
       .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b0), .q
       (NSample_C[6]));
  CDN_flop \NSample_C_reg[7] (.clk (CLK_C), .d (n_461), .sena (n_757),
       .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b0), .q
       (NSample_C[7]));
  CDN_flop \Nlimit_C_reg[0] (.clk (CLK_C), .d (n_418), .sena (n_757),
       .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b0), .q
       (Nlimit_C[0]));
  CDN_flop \Nlimit_C_reg[1] (.clk (CLK_C), .d (n_419), .sena (n_757),
       .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b0), .q
       (Nlimit_C[1]));
  CDN_flop \Nlimit_C_reg[2] (.clk (CLK_C), .d (n_420), .sena (n_757),
       .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b0), .q
       (Nlimit_C[2]));
  CDN_flop \Nlimit_C_reg[3] (.clk (CLK_C), .d (n_421), .sena (n_757),
       .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b0), .q
       (Nlimit_C[3]));
  CDN_flop \Nlimit_C_reg[4] (.clk (CLK_C), .d (n_422), .sena (n_757),
       .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b0), .q
       (Nlimit_C[4]));
  CDN_flop \Nlimit_C_reg[5] (.clk (CLK_C), .d (n_423), .sena (n_757),
       .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b0), .q
       (Nlimit_C[5]));
  CDN_flop \NFrame_C_reg[0] (.clk (CLK_C), .d (n_425), .sena (n_755),
       .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b0), .q
       (NFrame_C[0]));
  CDN_flop \NFrame_C_reg[1] (.clk (CLK_C), .d (n_426), .sena (n_755),
       .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b0), .q
       (NFrame_C[1]));
  CDN_flop \NFrame_C_reg[2] (.clk (CLK_C), .d (n_427), .sena (n_755),
       .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b0), .q
       (NFrame_C[2]));
  CDN_flop \NFrame_C_reg[3] (.clk (CLK_C), .d (n_428), .sena (n_755),
       .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b0), .q
       (NFrame_C[3]));
  CDN_flop \NFrame_C_reg[4] (.clk (CLK_C), .d (n_429), .sena (n_755),
       .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b0), .q
       (NFrame_C[4]));
  CDN_flop \NFrame_C_reg[5] (.clk (CLK_C), .d (n_430), .sena (n_755),
       .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b0), .q
       (NFrame_C[5]));
  CDN_flop \NFrame_C_reg[6] (.clk (CLK_C), .d (n_431), .sena (n_755),
       .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b0), .q
       (NFrame_C[6]));
  CDN_flop \NFrame_C_reg[7] (.clk (CLK_C), .d (n_432), .sena (n_755),
       .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b0), .q
       (NFrame_C[7]));
  CDN_flop \crc_C_reg[0] (.clk (CLK_C), .d (n_433), .sena (n_757),
       .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b0), .q
       (crc_C[0]));
  CDN_flop \crc_C_reg[1] (.clk (CLK_C), .d (n_434), .sena (n_757),
       .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b0), .q
       (crc_C[1]));
  CDN_flop \crc_C_reg[2] (.clk (CLK_C), .d (n_435), .sena (n_757),
       .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b0), .q
       (crc_C[2]));
  CDN_flop \crc_C_reg[3] (.clk (CLK_C), .d (n_436), .sena (n_757),
       .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b0), .q
       (crc_C[3]));
  CDN_flop \crc_C_reg[4] (.clk (CLK_C), .d (n_437), .sena (n_757),
       .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b0), .q
       (crc_C[4]));
  CDN_flop \crc_C_reg[5] (.clk (CLK_C), .d (n_438), .sena (n_757),
       .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b0), .q
       (crc_C[5]));
  CDN_flop \crc_C_reg[6] (.clk (CLK_C), .d (n_439), .sena (n_757),
       .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b0), .q
       (crc_C[6]));
  CDN_flop \crc_C_reg[7] (.clk (CLK_C), .d (n_440), .sena (n_757),
       .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b0), .q
       (crc_C[7]));
  CDN_flop \crc_C_reg[8] (.clk (CLK_C), .d (n_441), .sena (n_757),
       .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b0), .q
       (crc_C[8]));
  CDN_flop \crc_C_reg[9] (.clk (CLK_C), .d (n_442), .sena (n_757),
       .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b0), .q
       (crc_C[9]));
  CDN_flop \crc_C_reg[10] (.clk (CLK_C), .d (n_443), .sena (n_757),
       .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b0), .q
       (crc_C[10]));
  CDN_flop \crc_C_reg[11] (.clk (CLK_C), .d (n_444), .sena (n_757),
       .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b0), .q
       (crc_C[11]));
  CDN_flop losing_data_A_reg(.clk (CLK_A), .d (n_681), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b0), .q
       (losing_data_A));
  CDN_flop write_signal_A_reg(.clk (CLK_A), .d (n_679), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b0), .q
       (write_signal_A));
  CDN_flop \DATA_from_CU_A_reg[0] (.clk (CLK_A), .d (n_644), .sena
       (n_725), .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b0),
       .q (DATA_from_CU_A[0]));
  CDN_flop \DATA_from_CU_A_reg[1] (.clk (CLK_A), .d (n_645), .sena
       (n_725), .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b0),
       .q (DATA_from_CU_A[1]));
  CDN_flop \DATA_from_CU_A_reg[2] (.clk (CLK_A), .d (n_646), .sena
       (n_725), .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b0),
       .q (DATA_from_CU_A[2]));
  CDN_flop \DATA_from_CU_A_reg[3] (.clk (CLK_A), .d (n_647), .sena
       (n_725), .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b0),
       .q (DATA_from_CU_A[3]));
  CDN_flop \DATA_from_CU_A_reg[4] (.clk (CLK_A), .d (n_648), .sena
       (n_725), .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b0),
       .q (DATA_from_CU_A[4]));
  CDN_flop \DATA_from_CU_A_reg[5] (.clk (CLK_A), .d (n_649), .sena
       (n_725), .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b0),
       .q (DATA_from_CU_A[5]));
  CDN_flop \DATA_from_CU_A_reg[6] (.clk (CLK_A), .d (n_650), .sena
       (n_725), .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b0),
       .q (DATA_from_CU_A[6]));
  CDN_flop \DATA_from_CU_A_reg[7] (.clk (CLK_A), .d (n_651), .sena
       (n_725), .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b0),
       .q (DATA_from_CU_A[7]));
  CDN_flop \DATA_from_CU_A_reg[8] (.clk (CLK_A), .d (n_652), .sena
       (n_725), .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b0),
       .q (DATA_from_CU_A[8]));
  CDN_flop \DATA_from_CU_A_reg[9] (.clk (CLK_A), .d (n_653), .sena
       (n_725), .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b0),
       .q (DATA_from_CU_A[9]));
  CDN_flop \DATA_from_CU_A_reg[10] (.clk (CLK_A), .d (n_654), .sena
       (n_725), .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b0),
       .q (DATA_from_CU_A[10]));
  CDN_flop \DATA_from_CU_A_reg[11] (.clk (CLK_A), .d (n_655), .sena
       (n_725), .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b0),
       .q (DATA_from_CU_A[11]));
  CDN_flop \DATA_from_CU_A_reg[12] (.clk (CLK_A), .d (n_656), .sena
       (n_725), .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b0),
       .q (DATA_from_CU_A[12]));
  CDN_flop \DATA_from_CU_A_reg[13] (.clk (CLK_A), .d (n_657), .sena
       (n_725), .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b0),
       .q (DATA_from_CU_A[13]));
  CDN_flop \DATA_from_CU_A_reg[14] (.clk (CLK_A), .d (n_658), .sena
       (n_725), .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b0),
       .q (DATA_from_CU_A[14]));
  CDN_flop \DATA_from_CU_A_reg[15] (.clk (CLK_A), .d (n_659), .sena
       (n_725), .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b0),
       .q (DATA_from_CU_A[15]));
  CDN_flop \DATA_from_CU_A_reg[16] (.clk (CLK_A), .d (n_660), .sena
       (n_725), .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b0),
       .q (DATA_from_CU_A[16]));
  CDN_flop \DATA_from_CU_A_reg[17] (.clk (CLK_A), .d (n_661), .sena
       (n_725), .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b0),
       .q (DATA_from_CU_A[17]));
  CDN_flop \DATA_from_CU_A_reg[18] (.clk (CLK_A), .d (n_662), .sena
       (n_725), .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b0),
       .q (DATA_from_CU_A[18]));
  CDN_flop \DATA_from_CU_A_reg[19] (.clk (CLK_A), .d (n_663), .sena
       (n_725), .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b0),
       .q (DATA_from_CU_A[19]));
  CDN_flop \DATA_from_CU_A_reg[20] (.clk (CLK_A), .d (n_664), .sena
       (n_725), .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b0),
       .q (DATA_from_CU_A[20]));
  CDN_flop \DATA_from_CU_A_reg[21] (.clk (CLK_A), .d (n_665), .sena
       (n_725), .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b0),
       .q (DATA_from_CU_A[21]));
  CDN_flop \DATA_from_CU_A_reg[22] (.clk (CLK_A), .d (n_666), .sena
       (n_725), .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b0),
       .q (DATA_from_CU_A[22]));
  CDN_flop \DATA_from_CU_A_reg[23] (.clk (CLK_A), .d (n_667), .sena
       (n_725), .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b0),
       .q (DATA_from_CU_A[23]));
  CDN_flop \DATA_from_CU_A_reg[24] (.clk (CLK_A), .d (n_668), .sena
       (n_725), .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b0),
       .q (DATA_from_CU_A[24]));
  CDN_flop \DATA_from_CU_A_reg[25] (.clk (CLK_A), .d (n_669), .sena
       (n_725), .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b0),
       .q (DATA_from_CU_A[25]));
  CDN_flop \DATA_from_CU_A_reg[26] (.clk (CLK_A), .d (n_670), .sena
       (n_725), .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b0),
       .q (DATA_from_CU_A[26]));
  CDN_flop \DATA_from_CU_A_reg[27] (.clk (CLK_A), .d (n_671), .sena
       (n_725), .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b0),
       .q (DATA_from_CU_A[27]));
  CDN_flop \DATA_from_CU_A_reg[28] (.clk (CLK_A), .d (n_672), .sena
       (n_725), .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b1),
       .q (DATA_from_CU_A[28]));
  CDN_flop \DATA_from_CU_A_reg[29] (.clk (CLK_A), .d (n_673), .sena
       (n_725), .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b1),
       .q (DATA_from_CU_A[29]));
  CDN_flop \DATA_from_CU_A_reg[30] (.clk (CLK_A), .d (n_674), .sena
       (n_725), .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b1),
       .q (DATA_from_CU_A[30]));
  CDN_flop \DATA_from_CU_A_reg[31] (.clk (CLK_A), .d (n_675), .sena
       (n_725), .aclr (1'b0), .apre (1'b0), .srl (n_406), .srd (1'b1),
       .q (DATA_from_CU_A[31]));
  CDN_flop losing_data_B_reg(.clk (CLK_B), .d (n_590), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b0), .q
       (losing_data_B));
  CDN_flop write_signal_B_reg(.clk (CLK_B), .d (n_588), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b0), .q
       (write_signal_B));
  CDN_flop \DATA_from_CU_B_reg[0] (.clk (CLK_B), .d (n_553), .sena
       (n_741), .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b0),
       .q (DATA_from_CU_B[0]));
  CDN_flop \DATA_from_CU_B_reg[1] (.clk (CLK_B), .d (n_554), .sena
       (n_741), .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b0),
       .q (DATA_from_CU_B[1]));
  CDN_flop \DATA_from_CU_B_reg[2] (.clk (CLK_B), .d (n_555), .sena
       (n_741), .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b0),
       .q (DATA_from_CU_B[2]));
  CDN_flop \DATA_from_CU_B_reg[3] (.clk (CLK_B), .d (n_556), .sena
       (n_741), .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b0),
       .q (DATA_from_CU_B[3]));
  CDN_flop \DATA_from_CU_B_reg[4] (.clk (CLK_B), .d (n_557), .sena
       (n_741), .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b0),
       .q (DATA_from_CU_B[4]));
  CDN_flop \DATA_from_CU_B_reg[5] (.clk (CLK_B), .d (n_558), .sena
       (n_741), .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b0),
       .q (DATA_from_CU_B[5]));
  CDN_flop \DATA_from_CU_B_reg[6] (.clk (CLK_B), .d (n_559), .sena
       (n_741), .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b0),
       .q (DATA_from_CU_B[6]));
  CDN_flop \DATA_from_CU_B_reg[7] (.clk (CLK_B), .d (n_560), .sena
       (n_741), .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b0),
       .q (DATA_from_CU_B[7]));
  CDN_flop \DATA_from_CU_B_reg[8] (.clk (CLK_B), .d (n_561), .sena
       (n_741), .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b0),
       .q (DATA_from_CU_B[8]));
  CDN_flop \DATA_from_CU_B_reg[9] (.clk (CLK_B), .d (n_562), .sena
       (n_741), .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b0),
       .q (DATA_from_CU_B[9]));
  CDN_flop \DATA_from_CU_B_reg[10] (.clk (CLK_B), .d (n_563), .sena
       (n_741), .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b0),
       .q (DATA_from_CU_B[10]));
  CDN_flop \DATA_from_CU_B_reg[11] (.clk (CLK_B), .d (n_564), .sena
       (n_741), .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b0),
       .q (DATA_from_CU_B[11]));
  CDN_flop \DATA_from_CU_B_reg[12] (.clk (CLK_B), .d (n_565), .sena
       (n_741), .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b0),
       .q (DATA_from_CU_B[12]));
  CDN_flop \DATA_from_CU_B_reg[13] (.clk (CLK_B), .d (n_566), .sena
       (n_741), .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b0),
       .q (DATA_from_CU_B[13]));
  CDN_flop \DATA_from_CU_B_reg[14] (.clk (CLK_B), .d (n_567), .sena
       (n_741), .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b0),
       .q (DATA_from_CU_B[14]));
  CDN_flop \DATA_from_CU_B_reg[15] (.clk (CLK_B), .d (n_568), .sena
       (n_741), .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b0),
       .q (DATA_from_CU_B[15]));
  CDN_flop \DATA_from_CU_B_reg[16] (.clk (CLK_B), .d (n_569), .sena
       (n_741), .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b0),
       .q (DATA_from_CU_B[16]));
  CDN_flop \DATA_from_CU_B_reg[17] (.clk (CLK_B), .d (n_570), .sena
       (n_741), .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b0),
       .q (DATA_from_CU_B[17]));
  CDN_flop \DATA_from_CU_B_reg[18] (.clk (CLK_B), .d (n_571), .sena
       (n_741), .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b0),
       .q (DATA_from_CU_B[18]));
  CDN_flop \DATA_from_CU_B_reg[19] (.clk (CLK_B), .d (n_572), .sena
       (n_741), .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b0),
       .q (DATA_from_CU_B[19]));
  CDN_flop \DATA_from_CU_B_reg[20] (.clk (CLK_B), .d (n_573), .sena
       (n_741), .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b0),
       .q (DATA_from_CU_B[20]));
  CDN_flop \DATA_from_CU_B_reg[21] (.clk (CLK_B), .d (n_574), .sena
       (n_741), .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b0),
       .q (DATA_from_CU_B[21]));
  CDN_flop \DATA_from_CU_B_reg[22] (.clk (CLK_B), .d (n_575), .sena
       (n_741), .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b0),
       .q (DATA_from_CU_B[22]));
  CDN_flop \DATA_from_CU_B_reg[23] (.clk (CLK_B), .d (n_576), .sena
       (n_741), .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b0),
       .q (DATA_from_CU_B[23]));
  CDN_flop \DATA_from_CU_B_reg[24] (.clk (CLK_B), .d (n_577), .sena
       (n_741), .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b0),
       .q (DATA_from_CU_B[24]));
  CDN_flop \DATA_from_CU_B_reg[25] (.clk (CLK_B), .d (n_578), .sena
       (n_741), .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b0),
       .q (DATA_from_CU_B[25]));
  CDN_flop \DATA_from_CU_B_reg[26] (.clk (CLK_B), .d (n_579), .sena
       (n_741), .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b0),
       .q (DATA_from_CU_B[26]));
  CDN_flop \DATA_from_CU_B_reg[27] (.clk (CLK_B), .d (n_580), .sena
       (n_741), .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b0),
       .q (DATA_from_CU_B[27]));
  CDN_flop \DATA_from_CU_B_reg[28] (.clk (CLK_B), .d (n_581), .sena
       (n_741), .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b1),
       .q (DATA_from_CU_B[28]));
  CDN_flop \DATA_from_CU_B_reg[29] (.clk (CLK_B), .d (n_582), .sena
       (n_741), .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b1),
       .q (DATA_from_CU_B[29]));
  CDN_flop \DATA_from_CU_B_reg[30] (.clk (CLK_B), .d (n_583), .sena
       (n_741), .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b1),
       .q (DATA_from_CU_B[30]));
  CDN_flop \DATA_from_CU_B_reg[31] (.clk (CLK_B), .d (n_584), .sena
       (n_741), .aclr (1'b0), .apre (1'b0), .srl (n_403), .srd (1'b1),
       .q (DATA_from_CU_B[31]));
  CDN_flop losing_data_C_reg(.clk (CLK_C), .d (n_499), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b0), .q
       (losing_data_C));
  CDN_flop write_signal_C_reg(.clk (CLK_C), .d (n_497), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b0), .q
       (write_signal_C));
  CDN_flop \DATA_from_CU_C_reg[0] (.clk (CLK_C), .d (n_462), .sena
       (n_757), .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b0),
       .q (DATA_from_CU_C[0]));
  CDN_flop \DATA_from_CU_C_reg[1] (.clk (CLK_C), .d (n_463), .sena
       (n_757), .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b0),
       .q (DATA_from_CU_C[1]));
  CDN_flop \DATA_from_CU_C_reg[2] (.clk (CLK_C), .d (n_464), .sena
       (n_757), .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b0),
       .q (DATA_from_CU_C[2]));
  CDN_flop \DATA_from_CU_C_reg[3] (.clk (CLK_C), .d (n_465), .sena
       (n_757), .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b0),
       .q (DATA_from_CU_C[3]));
  CDN_flop \DATA_from_CU_C_reg[4] (.clk (CLK_C), .d (n_466), .sena
       (n_757), .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b0),
       .q (DATA_from_CU_C[4]));
  CDN_flop \DATA_from_CU_C_reg[5] (.clk (CLK_C), .d (n_467), .sena
       (n_757), .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b0),
       .q (DATA_from_CU_C[5]));
  CDN_flop \DATA_from_CU_C_reg[6] (.clk (CLK_C), .d (n_468), .sena
       (n_757), .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b0),
       .q (DATA_from_CU_C[6]));
  CDN_flop \DATA_from_CU_C_reg[7] (.clk (CLK_C), .d (n_469), .sena
       (n_757), .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b0),
       .q (DATA_from_CU_C[7]));
  CDN_flop \DATA_from_CU_C_reg[8] (.clk (CLK_C), .d (n_470), .sena
       (n_757), .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b0),
       .q (DATA_from_CU_C[8]));
  CDN_flop \DATA_from_CU_C_reg[9] (.clk (CLK_C), .d (n_471), .sena
       (n_757), .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b0),
       .q (DATA_from_CU_C[9]));
  CDN_flop \DATA_from_CU_C_reg[10] (.clk (CLK_C), .d (n_472), .sena
       (n_757), .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b0),
       .q (DATA_from_CU_C[10]));
  CDN_flop \DATA_from_CU_C_reg[11] (.clk (CLK_C), .d (n_473), .sena
       (n_757), .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b0),
       .q (DATA_from_CU_C[11]));
  CDN_flop \DATA_from_CU_C_reg[12] (.clk (CLK_C), .d (n_474), .sena
       (n_757), .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b0),
       .q (DATA_from_CU_C[12]));
  CDN_flop \DATA_from_CU_C_reg[13] (.clk (CLK_C), .d (n_475), .sena
       (n_757), .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b0),
       .q (DATA_from_CU_C[13]));
  CDN_flop \DATA_from_CU_C_reg[14] (.clk (CLK_C), .d (n_476), .sena
       (n_757), .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b0),
       .q (DATA_from_CU_C[14]));
  CDN_flop \DATA_from_CU_C_reg[15] (.clk (CLK_C), .d (n_477), .sena
       (n_757), .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b0),
       .q (DATA_from_CU_C[15]));
  CDN_flop \DATA_from_CU_C_reg[16] (.clk (CLK_C), .d (n_478), .sena
       (n_757), .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b0),
       .q (DATA_from_CU_C[16]));
  CDN_flop \DATA_from_CU_C_reg[17] (.clk (CLK_C), .d (n_479), .sena
       (n_757), .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b0),
       .q (DATA_from_CU_C[17]));
  CDN_flop \DATA_from_CU_C_reg[18] (.clk (CLK_C), .d (n_480), .sena
       (n_757), .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b0),
       .q (DATA_from_CU_C[18]));
  CDN_flop \DATA_from_CU_C_reg[19] (.clk (CLK_C), .d (n_481), .sena
       (n_757), .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b0),
       .q (DATA_from_CU_C[19]));
  CDN_flop \DATA_from_CU_C_reg[20] (.clk (CLK_C), .d (n_482), .sena
       (n_757), .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b0),
       .q (DATA_from_CU_C[20]));
  CDN_flop \DATA_from_CU_C_reg[21] (.clk (CLK_C), .d (n_483), .sena
       (n_757), .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b0),
       .q (DATA_from_CU_C[21]));
  CDN_flop \DATA_from_CU_C_reg[22] (.clk (CLK_C), .d (n_484), .sena
       (n_757), .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b0),
       .q (DATA_from_CU_C[22]));
  CDN_flop \DATA_from_CU_C_reg[23] (.clk (CLK_C), .d (n_485), .sena
       (n_757), .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b0),
       .q (DATA_from_CU_C[23]));
  CDN_flop \DATA_from_CU_C_reg[24] (.clk (CLK_C), .d (n_486), .sena
       (n_757), .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b0),
       .q (DATA_from_CU_C[24]));
  CDN_flop \DATA_from_CU_C_reg[25] (.clk (CLK_C), .d (n_487), .sena
       (n_757), .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b0),
       .q (DATA_from_CU_C[25]));
  CDN_flop \DATA_from_CU_C_reg[26] (.clk (CLK_C), .d (n_488), .sena
       (n_757), .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b0),
       .q (DATA_from_CU_C[26]));
  CDN_flop \DATA_from_CU_C_reg[27] (.clk (CLK_C), .d (n_489), .sena
       (n_757), .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b0),
       .q (DATA_from_CU_C[27]));
  CDN_flop \DATA_from_CU_C_reg[28] (.clk (CLK_C), .d (n_490), .sena
       (n_757), .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b1),
       .q (DATA_from_CU_C[28]));
  CDN_flop \DATA_from_CU_C_reg[29] (.clk (CLK_C), .d (n_491), .sena
       (n_757), .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b1),
       .q (DATA_from_CU_C[29]));
  CDN_flop \DATA_from_CU_C_reg[30] (.clk (CLK_C), .d (n_492), .sena
       (n_757), .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b1),
       .q (DATA_from_CU_C[30]));
  CDN_flop \DATA_from_CU_C_reg[31] (.clk (CLK_C), .d (n_493), .sena
       (n_757), .aclr (1'b0), .apre (1'b0), .srl (n_400), .srd (1'b1),
       .q (DATA_from_CU_C[31]));
  CDN_flop read_signal_A_reg(.clk (CLK_A), .d (1'b0), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_1439), .srd (reset_A), .q
       (read_signal_A));
  or g481 (n_1439, n_406, n_781);
  CDN_flop read_signal_B_reg(.clk (CLK_B), .d (1'b0), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_1444), .srd (reset_B), .q
       (read_signal_B));
  or g483 (n_1444, n_403, n_783);
  CDN_flop read_signal_C_reg(.clk (CLK_C), .d (1'b0), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_1449), .srd (reset_C), .q
       (read_signal_C));
  or g485 (n_1449, n_400, n_785);
  nor g500 (n_1453, Nlimit_A[5], Nlimit_A[4], Nlimit_A[3], Nlimit_A[2]);
  not g501 (n_1451, Nlimit_A[1]);
  nand g502 (n_1454, n_1451, n_1452, n_1453);
  not g503 (n_627, n_1454);
  nor g505 (n_1457, Nlimit_B[5], Nlimit_B[4], Nlimit_B[3], Nlimit_B[2]);
  not g506 (n_1455, Nlimit_B[1]);
  nand g507 (n_1458, n_1455, n_1456, n_1457);
  not g508 (n_536, n_1458);
  nor g510 (n_1461, Nlimit_C[5], Nlimit_C[4], Nlimit_C[3], Nlimit_C[2]);
  not g511 (n_1459, Nlimit_C[1]);
  nand g512 (n_1462, n_1459, n_1460, n_1461);
  not g513 (n_445, n_1462);
  not g517 (n_400, reset_C);
  not g518 (n_403, reset_B);
  not g519 (n_406, reset_A);
  not g520 (n_409, Load_data_C);
  not g521 (n_411, full_C);
  not g522 (n_1460, Nlimit_C[0]);
  not g523 (n_500, Load_data_B);
  not g524 (n_502, full_B);
  not g525 (n_1456, Nlimit_B[0]);
  not g526 (n_591, Load_data_A);
  not g527 (n_593, full_A);
  not g528 (n_1452, Nlimit_A[0]);
  or g529 (tmrError, DATA_from_CUTmrError, readTmrError, writeTmrError,
       losingTmrError);
endmodule

module bmux_516(ctl, in_0, in_1, z);
  input ctl;
  input [37:0] in_0, in_1;
  output [37:0] z;
  wire ctl;
  wire [37:0] in_0, in_1;
  wire [37:0] z;
  CDN_bmux2 g1(.sel0 (ctl), .data0 (in_0[37]), .data1 (in_1[37]), .z
       (z[37]));
  CDN_bmux2 g2(.sel0 (ctl), .data0 (in_0[36]), .data1 (in_1[36]), .z
       (z[36]));
  CDN_bmux2 g3(.sel0 (ctl), .data0 (in_0[35]), .data1 (in_1[35]), .z
       (z[35]));
  CDN_bmux2 g4(.sel0 (ctl), .data0 (in_0[34]), .data1 (in_1[34]), .z
       (z[34]));
  CDN_bmux2 g5(.sel0 (ctl), .data0 (in_0[33]), .data1 (in_1[33]), .z
       (z[33]));
  CDN_bmux2 g6(.sel0 (ctl), .data0 (in_0[32]), .data1 (in_1[32]), .z
       (z[32]));
  CDN_bmux2 g7(.sel0 (ctl), .data0 (in_0[31]), .data1 (in_1[31]), .z
       (z[31]));
  CDN_bmux2 g8(.sel0 (ctl), .data0 (in_0[30]), .data1 (in_1[30]), .z
       (z[30]));
  CDN_bmux2 g9(.sel0 (ctl), .data0 (in_0[29]), .data1 (in_1[29]), .z
       (z[29]));
  CDN_bmux2 g10(.sel0 (ctl), .data0 (in_0[28]), .data1 (in_1[28]), .z
       (z[28]));
  CDN_bmux2 g11(.sel0 (ctl), .data0 (in_0[27]), .data1 (in_1[27]), .z
       (z[27]));
  CDN_bmux2 g12(.sel0 (ctl), .data0 (in_0[26]), .data1 (in_1[26]), .z
       (z[26]));
  CDN_bmux2 g13(.sel0 (ctl), .data0 (in_0[25]), .data1 (in_1[25]), .z
       (z[25]));
  CDN_bmux2 g14(.sel0 (ctl), .data0 (in_0[24]), .data1 (in_1[24]), .z
       (z[24]));
  CDN_bmux2 g15(.sel0 (ctl), .data0 (in_0[23]), .data1 (in_1[23]), .z
       (z[23]));
  CDN_bmux2 g16(.sel0 (ctl), .data0 (in_0[22]), .data1 (in_1[22]), .z
       (z[22]));
  CDN_bmux2 g17(.sel0 (ctl), .data0 (in_0[21]), .data1 (in_1[21]), .z
       (z[21]));
  CDN_bmux2 g18(.sel0 (ctl), .data0 (in_0[20]), .data1 (in_1[20]), .z
       (z[20]));
  CDN_bmux2 g19(.sel0 (ctl), .data0 (in_0[19]), .data1 (in_1[19]), .z
       (z[19]));
  CDN_bmux2 g20(.sel0 (ctl), .data0 (in_0[18]), .data1 (in_1[18]), .z
       (z[18]));
  CDN_bmux2 g21(.sel0 (ctl), .data0 (in_0[17]), .data1 (in_1[17]), .z
       (z[17]));
  CDN_bmux2 g22(.sel0 (ctl), .data0 (in_0[16]), .data1 (in_1[16]), .z
       (z[16]));
  CDN_bmux2 g23(.sel0 (ctl), .data0 (in_0[15]), .data1 (in_1[15]), .z
       (z[15]));
  CDN_bmux2 g24(.sel0 (ctl), .data0 (in_0[14]), .data1 (in_1[14]), .z
       (z[14]));
  CDN_bmux2 g25(.sel0 (ctl), .data0 (in_0[13]), .data1 (in_1[13]), .z
       (z[13]));
  CDN_bmux2 g26(.sel0 (ctl), .data0 (in_0[12]), .data1 (in_1[12]), .z
       (z[12]));
  CDN_bmux2 g27(.sel0 (ctl), .data0 (in_0[11]), .data1 (in_1[11]), .z
       (z[11]));
  CDN_bmux2 g28(.sel0 (ctl), .data0 (in_0[10]), .data1 (in_1[10]), .z
       (z[10]));
  CDN_bmux2 g29(.sel0 (ctl), .data0 (in_0[9]), .data1 (in_1[9]), .z
       (z[9]));
  CDN_bmux2 g30(.sel0 (ctl), .data0 (in_0[8]), .data1 (in_1[8]), .z
       (z[8]));
  CDN_bmux2 g31(.sel0 (ctl), .data0 (in_0[7]), .data1 (in_1[7]), .z
       (z[7]));
  CDN_bmux2 g32(.sel0 (ctl), .data0 (in_0[6]), .data1 (in_1[6]), .z
       (z[6]));
  CDN_bmux2 g33(.sel0 (ctl), .data0 (in_0[5]), .data1 (in_1[5]), .z
       (z[5]));
  CDN_bmux2 g34(.sel0 (ctl), .data0 (in_0[4]), .data1 (in_1[4]), .z
       (z[4]));
  CDN_bmux2 g35(.sel0 (ctl), .data0 (in_0[3]), .data1 (in_1[3]), .z
       (z[3]));
  CDN_bmux2 g36(.sel0 (ctl), .data0 (in_0[2]), .data1 (in_1[2]), .z
       (z[2]));
  CDN_bmux2 g37(.sel0 (ctl), .data0 (in_0[1]), .data1 (in_1[1]), .z
       (z[1]));
  CDN_bmux2 g38(.sel0 (ctl), .data0 (in_0[0]), .data1 (in_1[0]), .z
       (z[0]));
endmodule

module Hamm_TRX_Nbits_3232_Nbits_ham38(CLK, reset, data_input,
     data_ham_in, write_signal, start_write);
  input CLK, reset, write_signal;
  input [31:0] data_input;
  output [37:0] data_ham_in;
  output start_write;
  wire CLK, reset, write_signal;
  wire [31:0] data_input;
  wire [37:0] data_ham_in;
  wire start_write;
  wire UNCONNECTED1215, UNCONNECTED1216, UNCONNECTED1217,
       UNCONNECTED1218, UNCONNECTED1219, UNCONNECTED1220,
       UNCONNECTED1221, UNCONNECTED1222;
  wire UNCONNECTED1223, UNCONNECTED1224, UNCONNECTED1225,
       UNCONNECTED1226, UNCONNECTED1227, UNCONNECTED1228,
       UNCONNECTED1229, UNCONNECTED1230;
  wire UNCONNECTED1231, UNCONNECTED1232, UNCONNECTED1233,
       UNCONNECTED1234, UNCONNECTED1235, UNCONNECTED1236,
       UNCONNECTED1237, UNCONNECTED1238;
  wire UNCONNECTED1239, UNCONNECTED1240, UNCONNECTED1241,
       UNCONNECTED1242, UNCONNECTED1243, UNCONNECTED1244,
       UNCONNECTED1245, UNCONNECTED1246;
  wire UNCONNECTED1247, UNCONNECTED1248, UNCONNECTED1249,
       UNCONNECTED1250, UNCONNECTED1251, UNCONNECTED1252,
       UNCONNECTED1253, n_50;
  wire n_52, n_53, n_54, n_55, n_56, n_57, n_58, n_171;
  wire n_330, n_371, n_372, n_373, n_374, n_375, n_376, n_377;
  wire n_378, n_379, n_380, n_381, n_382, n_383, n_384, n_385;
  wire n_386, n_387, n_388, n_389, n_390, n_391, n_395, n_396;
  wire n_397, n_399, n_400, n_417, n_418, n_419, n_420, n_421;
  wire n_422, n_423, n_424, n_425, n_426, n_427, n_428, n_429;
  wire n_430, n_431, n_432, n_433, n_434, n_435, n_436, n_437;
  wire n_438, n_439, n_440, n_441, n_442, n_443, n_444, n_445;
  wire n_446, n_447, n_448, n_449, n_450, n_451, n_452, n_453;
  wire n_454, n_455, n_456, n_457, n_458, n_459, n_460, p1;
  wire p2, p3, p4, p5, p6;
  bmux mux_start_write_58_21(.ctl (write_signal), .in_0 (1'b0), .in_1
       (1'b1), .z (n_52));
  bmux mux_start_write_54_13(.ctl (n_50), .in_0 (n_52), .in_1 (1'b0),
       .z (UNCONNECTED1215));
  bmux mux_46_21(.ctl (n_50), .in_0 (n_53), .in_1 (1'b0), .z (p1));
  bmux mux_47_21(.ctl (n_50), .in_0 (n_54), .in_1 (1'b0), .z (p2));
  bmux mux_48_21(.ctl (n_50), .in_0 (n_55), .in_1 (1'b0), .z (p3));
  bmux mux_49_21(.ctl (n_50), .in_0 (n_56), .in_1 (1'b0), .z (p4));
  bmux mux_50_21(.ctl (n_50), .in_0 (n_57), .in_1 (1'b0), .z (p5));
  bmux mux_51_21(.ctl (n_50), .in_0 (n_58), .in_1 (1'b0), .z (p6));
  bmux_516 mux_data_ham_in_54_13(.ctl (n_50), .in_0
       ({data_input[31:26], p6, data_input[25:11], p5,
       data_input[10:4], p4, data_input[3:1], p3, data_input[0], p2,
       p1}), .in_1 (38'b00000001000000000000000000000000000000), .z
       ({UNCONNECTED1253, UNCONNECTED1252, UNCONNECTED1251,
       UNCONNECTED1250, UNCONNECTED1249, UNCONNECTED1248,
       UNCONNECTED1247, UNCONNECTED1246, UNCONNECTED1245,
       UNCONNECTED1244, UNCONNECTED1243, UNCONNECTED1242,
       UNCONNECTED1241, UNCONNECTED1240, UNCONNECTED1239,
       UNCONNECTED1238, UNCONNECTED1237, UNCONNECTED1236,
       UNCONNECTED1235, UNCONNECTED1234, UNCONNECTED1233,
       UNCONNECTED1232, UNCONNECTED1231, UNCONNECTED1230,
       UNCONNECTED1229, UNCONNECTED1228, UNCONNECTED1227,
       UNCONNECTED1226, UNCONNECTED1225, UNCONNECTED1224,
       UNCONNECTED1223, UNCONNECTED1222, UNCONNECTED1221,
       UNCONNECTED1220, UNCONNECTED1219, UNCONNECTED1218,
       UNCONNECTED1217, UNCONNECTED1216}));
  and g89 (n_171, write_signal, reset);
  CDN_flop \data_ham_in_reg[0] (.clk (CLK), .d (p1), .sena
       (write_signal), .aclr (1'b0), .apre (1'b0), .srl (n_50), .srd
       (1'b0), .q (data_ham_in[0]));
  CDN_flop \data_ham_in_reg[1] (.clk (CLK), .d (p2), .sena
       (write_signal), .aclr (1'b0), .apre (1'b0), .srl (n_50), .srd
       (1'b0), .q (data_ham_in[1]));
  CDN_flop \data_ham_in_reg[2] (.clk (CLK), .d (data_input[0]), .sena
       (write_signal), .aclr (1'b0), .apre (1'b0), .srl (n_50), .srd
       (1'b0), .q (data_ham_in[2]));
  CDN_flop \data_ham_in_reg[3] (.clk (CLK), .d (p3), .sena
       (write_signal), .aclr (1'b0), .apre (1'b0), .srl (n_50), .srd
       (1'b0), .q (data_ham_in[3]));
  CDN_flop \data_ham_in_reg[4] (.clk (CLK), .d (data_input[1]), .sena
       (write_signal), .aclr (1'b0), .apre (1'b0), .srl (n_50), .srd
       (1'b0), .q (data_ham_in[4]));
  CDN_flop \data_ham_in_reg[5] (.clk (CLK), .d (data_input[2]), .sena
       (write_signal), .aclr (1'b0), .apre (1'b0), .srl (n_50), .srd
       (1'b0), .q (data_ham_in[5]));
  CDN_flop \data_ham_in_reg[6] (.clk (CLK), .d (data_input[3]), .sena
       (write_signal), .aclr (1'b0), .apre (1'b0), .srl (n_50), .srd
       (1'b0), .q (data_ham_in[6]));
  CDN_flop \data_ham_in_reg[7] (.clk (CLK), .d (p4), .sena
       (write_signal), .aclr (1'b0), .apre (1'b0), .srl (n_50), .srd
       (1'b0), .q (data_ham_in[7]));
  CDN_flop \data_ham_in_reg[8] (.clk (CLK), .d (data_input[4]), .sena
       (write_signal), .aclr (1'b0), .apre (1'b0), .srl (n_50), .srd
       (1'b0), .q (data_ham_in[8]));
  CDN_flop \data_ham_in_reg[9] (.clk (CLK), .d (data_input[5]), .sena
       (write_signal), .aclr (1'b0), .apre (1'b0), .srl (n_50), .srd
       (1'b0), .q (data_ham_in[9]));
  CDN_flop \data_ham_in_reg[10] (.clk (CLK), .d (data_input[6]), .sena
       (write_signal), .aclr (1'b0), .apre (1'b0), .srl (n_50), .srd
       (1'b0), .q (data_ham_in[10]));
  CDN_flop \data_ham_in_reg[11] (.clk (CLK), .d (data_input[7]), .sena
       (write_signal), .aclr (1'b0), .apre (1'b0), .srl (n_50), .srd
       (1'b0), .q (data_ham_in[11]));
  CDN_flop \data_ham_in_reg[12] (.clk (CLK), .d (data_input[8]), .sena
       (write_signal), .aclr (1'b0), .apre (1'b0), .srl (n_50), .srd
       (1'b0), .q (data_ham_in[12]));
  CDN_flop \data_ham_in_reg[13] (.clk (CLK), .d (data_input[9]), .sena
       (write_signal), .aclr (1'b0), .apre (1'b0), .srl (n_50), .srd
       (1'b0), .q (data_ham_in[13]));
  CDN_flop \data_ham_in_reg[14] (.clk (CLK), .d (data_input[10]), .sena
       (write_signal), .aclr (1'b0), .apre (1'b0), .srl (n_50), .srd
       (1'b0), .q (data_ham_in[14]));
  CDN_flop \data_ham_in_reg[15] (.clk (CLK), .d (p5), .sena
       (write_signal), .aclr (1'b0), .apre (1'b0), .srl (n_50), .srd
       (1'b0), .q (data_ham_in[15]));
  CDN_flop \data_ham_in_reg[16] (.clk (CLK), .d (data_input[11]), .sena
       (write_signal), .aclr (1'b0), .apre (1'b0), .srl (n_50), .srd
       (1'b0), .q (data_ham_in[16]));
  CDN_flop \data_ham_in_reg[17] (.clk (CLK), .d (data_input[12]), .sena
       (write_signal), .aclr (1'b0), .apre (1'b0), .srl (n_50), .srd
       (1'b0), .q (data_ham_in[17]));
  CDN_flop \data_ham_in_reg[18] (.clk (CLK), .d (data_input[13]), .sena
       (write_signal), .aclr (1'b0), .apre (1'b0), .srl (n_50), .srd
       (1'b0), .q (data_ham_in[18]));
  CDN_flop \data_ham_in_reg[19] (.clk (CLK), .d (data_input[14]), .sena
       (write_signal), .aclr (1'b0), .apre (1'b0), .srl (n_50), .srd
       (1'b0), .q (data_ham_in[19]));
  CDN_flop \data_ham_in_reg[20] (.clk (CLK), .d (data_input[15]), .sena
       (write_signal), .aclr (1'b0), .apre (1'b0), .srl (n_50), .srd
       (1'b0), .q (data_ham_in[20]));
  CDN_flop \data_ham_in_reg[21] (.clk (CLK), .d (data_input[16]), .sena
       (write_signal), .aclr (1'b0), .apre (1'b0), .srl (n_50), .srd
       (1'b0), .q (data_ham_in[21]));
  CDN_flop \data_ham_in_reg[22] (.clk (CLK), .d (data_input[17]), .sena
       (write_signal), .aclr (1'b0), .apre (1'b0), .srl (n_50), .srd
       (1'b0), .q (data_ham_in[22]));
  CDN_flop \data_ham_in_reg[23] (.clk (CLK), .d (data_input[18]), .sena
       (write_signal), .aclr (1'b0), .apre (1'b0), .srl (n_50), .srd
       (1'b0), .q (data_ham_in[23]));
  CDN_flop \data_ham_in_reg[24] (.clk (CLK), .d (data_input[19]), .sena
       (write_signal), .aclr (1'b0), .apre (1'b0), .srl (n_50), .srd
       (1'b0), .q (data_ham_in[24]));
  CDN_flop \data_ham_in_reg[25] (.clk (CLK), .d (data_input[20]), .sena
       (write_signal), .aclr (1'b0), .apre (1'b0), .srl (n_50), .srd
       (1'b0), .q (data_ham_in[25]));
  CDN_flop \data_ham_in_reg[26] (.clk (CLK), .d (data_input[21]), .sena
       (write_signal), .aclr (1'b0), .apre (1'b0), .srl (n_50), .srd
       (1'b0), .q (data_ham_in[26]));
  CDN_flop \data_ham_in_reg[27] (.clk (CLK), .d (data_input[22]), .sena
       (write_signal), .aclr (1'b0), .apre (1'b0), .srl (n_50), .srd
       (1'b0), .q (data_ham_in[27]));
  CDN_flop \data_ham_in_reg[28] (.clk (CLK), .d (data_input[23]), .sena
       (write_signal), .aclr (1'b0), .apre (1'b0), .srl (n_50), .srd
       (1'b0), .q (data_ham_in[28]));
  CDN_flop \data_ham_in_reg[29] (.clk (CLK), .d (data_input[24]), .sena
       (write_signal), .aclr (1'b0), .apre (1'b0), .srl (n_50), .srd
       (1'b0), .q (data_ham_in[29]));
  CDN_flop \data_ham_in_reg[30] (.clk (CLK), .d (data_input[25]), .sena
       (write_signal), .aclr (1'b0), .apre (1'b0), .srl (n_50), .srd
       (1'b1), .q (data_ham_in[30]));
  CDN_flop \data_ham_in_reg[31] (.clk (CLK), .d (p6), .sena
       (write_signal), .aclr (1'b0), .apre (1'b0), .srl (n_50), .srd
       (1'b0), .q (data_ham_in[31]));
  CDN_flop \data_ham_in_reg[32] (.clk (CLK), .d (data_input[26]), .sena
       (write_signal), .aclr (1'b0), .apre (1'b0), .srl (n_50), .srd
       (1'b0), .q (data_ham_in[32]));
  CDN_flop \data_ham_in_reg[33] (.clk (CLK), .d (data_input[27]), .sena
       (write_signal), .aclr (1'b0), .apre (1'b0), .srl (n_50), .srd
       (1'b0), .q (data_ham_in[33]));
  CDN_flop \data_ham_in_reg[34] (.clk (CLK), .d (data_input[28]), .sena
       (write_signal), .aclr (1'b0), .apre (1'b0), .srl (n_50), .srd
       (1'b0), .q (data_ham_in[34]));
  CDN_flop \data_ham_in_reg[35] (.clk (CLK), .d (data_input[29]), .sena
       (write_signal), .aclr (1'b0), .apre (1'b0), .srl (n_50), .srd
       (1'b0), .q (data_ham_in[35]));
  CDN_flop \data_ham_in_reg[36] (.clk (CLK), .d (data_input[30]), .sena
       (write_signal), .aclr (1'b0), .apre (1'b0), .srl (n_50), .srd
       (1'b0), .q (data_ham_in[36]));
  CDN_flop \data_ham_in_reg[37] (.clk (CLK), .d (data_input[31]), .sena
       (write_signal), .aclr (1'b0), .apre (1'b0), .srl (n_50), .srd
       (1'b0), .q (data_ham_in[37]));
  CDN_flop start_write_reg(.clk (CLK), .d (1'b0), .sena (1'b1), .aclr
       (1'b0), .apre (1'b0), .srl (n_330), .srd (reset), .q
       (start_write));
  or g166 (n_330, n_50, n_171);
  not g170 (n_50, reset);
  xor g171 (n_371, data_input[26], data_input[27]);
  xor g172 (n_372, data_input[28], data_input[29]);
  xor g173 (n_373, data_input[30], data_input[31]);
  xor g174 (n_374, n_371, n_372);
  xor g175 (n_58, n_373, n_374);
  xor g176 (n_375, data_input[11], data_input[12]);
  xor g177 (n_376, data_input[13], data_input[14]);
  xor g178 (n_377, data_input[15], data_input[16]);
  xor g179 (n_378, data_input[17], data_input[18]);
  xor g180 (n_379, data_input[19], data_input[20]);
  xor g181 (n_380, data_input[21], data_input[22]);
  xor g182 (n_381, data_input[23], data_input[24]);
  xor g183 (n_382, data_input[25], n_375);
  xor g184 (n_383, n_376, n_377);
  xor g185 (n_384, n_378, n_379);
  xor g186 (n_385, n_380, n_381);
  xor g187 (n_386, n_382, n_383);
  xor g188 (n_387, n_384, n_385);
  xor g189 (n_57, n_386, n_387);
  xor g190 (n_388, data_input[4], data_input[5]);
  xor g191 (n_389, data_input[6], data_input[7]);
  xor g192 (n_390, data_input[8], data_input[9]);
  xor g193 (n_391, data_input[10], data_input[18]);
  xor g197 (n_395, data_input[25], n_388);
  xor g198 (n_396, n_389, n_390);
  xor g199 (n_397, n_391, n_379);
  xor g201 (n_399, n_395, n_396);
  xor g202 (n_400, n_397, n_385);
  xor g203 (n_56, n_399, n_400);
  xor g221 (n_417, data_input[0], data_input[2]);
  xor g222 (n_418, data_input[3], data_input[5]);
  xor g223 (n_419, data_input[6], data_input[9]);
  xor g224 (n_420, data_input[10], data_input[12]);
  xor g225 (n_421, data_input[13], data_input[16]);
  xor g226 (n_422, data_input[17], data_input[20]);
  xor g227 (n_423, data_input[21], data_input[24]);
  xor g228 (n_424, data_input[25], data_input[27]);
  xor g229 (n_425, data_input[28], data_input[31]);
  xor g230 (n_426, n_417, n_418);
  xor g231 (n_427, n_419, n_420);
  xor g232 (n_428, n_421, n_422);
  xor g233 (n_429, n_423, n_424);
  xor g234 (n_430, n_425, n_426);
  xor g235 (n_431, n_427, n_428);
  xor g236 (n_432, n_429, n_430);
  xor g237 (n_54, n_431, n_432);
  xor g238 (n_433, data_input[0], data_input[1]);
  xor g239 (n_434, data_input[3], data_input[4]);
  xor g240 (n_435, data_input[6], data_input[8]);
  xor g241 (n_436, data_input[10], data_input[11]);
  xor g242 (n_437, data_input[13], data_input[15]);
  xor g243 (n_438, data_input[17], data_input[19]);
  xor g244 (n_439, data_input[21], data_input[23]);
  xor g245 (n_440, data_input[25], data_input[26]);
  xor g246 (n_441, data_input[28], data_input[30]);
  xor g247 (n_442, n_433, n_434);
  xor g248 (n_443, n_435, n_436);
  xor g249 (n_444, n_437, n_438);
  xor g250 (n_445, n_439, n_440);
  xor g251 (n_446, n_441, n_442);
  xor g252 (n_447, n_443, n_444);
  xor g253 (n_448, n_445, n_446);
  xor g254 (n_53, n_447, n_448);
  xor g255 (n_449, n_390, data_input[10]);
  xor g256 (n_450, data_input[14], n_377);
  xor g257 (n_451, data_input[17], data_input[22]);
  xor g258 (n_452, n_381, data_input[25]);
  xor g259 (n_453, data_input[29], n_373);
  xor g260 (n_454, data_input[1], data_input[2]);
  xor g261 (n_455, data_input[3], data_input[7]);
  xor g262 (n_456, n_449, n_450);
  xor g263 (n_457, n_451, n_452);
  xor g264 (n_458, n_453, n_454);
  xor g265 (n_459, n_455, n_456);
  xor g266 (n_460, n_457, n_458);
  xor g267 (n_55, n_459, n_460);
endmodule

module add_unsigned_540(A, B, Z);
  input [3:0] A;
  input B;
  output [3:0] Z;
  wire [3:0] A;
  wire B;
  wire [3:0] Z;
  wire n_11, n_18, n_21, n_28, n_30, n_34, n_35, n_37;
  wire n_38;
  xor g1 (Z[0], A[0], B);
  nand g2 (n_11, A[0], B);
  nand g13 (n_21, n_18, A[1]);
  nand g20 (n_30, n_28, A[2]);
  xnor g25 (Z[1], n_18, n_34);
  xnor g27 (Z[2], n_28, n_35);
  xnor g30 (Z[3], n_37, n_38);
  not g35 (n_18, n_11);
  not g36 (n_34, A[1]);
  not g37 (n_35, A[2]);
  not g38 (n_38, A[3]);
  not g39 (n_28, n_21);
  not g40 (n_37, n_30);
endmodule

module bmux_623(ctl, in_0, in_1, in_2, in_3, in_4, in_5, in_6, in_7,
     in_8, in_9, in_10, in_11, in_12, in_13, in_14, in_15, z);
  input [3:0] ctl;
  input [37:0] in_0, in_1, in_2, in_3, in_4, in_5, in_6, in_7, in_8,
       in_9, in_10, in_11, in_12, in_13, in_14, in_15;
  output [37:0] z;
  wire [3:0] ctl;
  wire [37:0] in_0, in_1, in_2, in_3, in_4, in_5, in_6, in_7, in_8,
       in_9, in_10, in_11, in_12, in_13, in_14, in_15;
  wire [37:0] z;
  CDN_bmux16 g1(.sel0 (ctl[0]), .data0 (in_0[37]), .data1 (in_1[37]),
       .sel1 (ctl[1]), .data2 (in_2[37]), .data3 (in_3[37]), .sel2
       (ctl[2]), .data4 (in_4[37]), .data5 (in_5[37]), .data6
       (in_6[37]), .data7 (in_7[37]), .sel3 (ctl[3]), .data8
       (in_8[37]), .data9 (in_9[37]), .data10 (in_10[37]), .data11
       (in_11[37]), .data12 (in_12[37]), .data13 (in_13[37]), .data14
       (in_14[37]), .data15 (in_15[37]), .z (z[37]));
  CDN_bmux16 g2(.sel0 (ctl[0]), .data0 (in_0[36]), .data1 (in_1[36]),
       .sel1 (ctl[1]), .data2 (in_2[36]), .data3 (in_3[36]), .sel2
       (ctl[2]), .data4 (in_4[36]), .data5 (in_5[36]), .data6
       (in_6[36]), .data7 (in_7[36]), .sel3 (ctl[3]), .data8
       (in_8[36]), .data9 (in_9[36]), .data10 (in_10[36]), .data11
       (in_11[36]), .data12 (in_12[36]), .data13 (in_13[36]), .data14
       (in_14[36]), .data15 (in_15[36]), .z (z[36]));
  CDN_bmux16 g3(.sel0 (ctl[0]), .data0 (in_0[35]), .data1 (in_1[35]),
       .sel1 (ctl[1]), .data2 (in_2[35]), .data3 (in_3[35]), .sel2
       (ctl[2]), .data4 (in_4[35]), .data5 (in_5[35]), .data6
       (in_6[35]), .data7 (in_7[35]), .sel3 (ctl[3]), .data8
       (in_8[35]), .data9 (in_9[35]), .data10 (in_10[35]), .data11
       (in_11[35]), .data12 (in_12[35]), .data13 (in_13[35]), .data14
       (in_14[35]), .data15 (in_15[35]), .z (z[35]));
  CDN_bmux16 g4(.sel0 (ctl[0]), .data0 (in_0[34]), .data1 (in_1[34]),
       .sel1 (ctl[1]), .data2 (in_2[34]), .data3 (in_3[34]), .sel2
       (ctl[2]), .data4 (in_4[34]), .data5 (in_5[34]), .data6
       (in_6[34]), .data7 (in_7[34]), .sel3 (ctl[3]), .data8
       (in_8[34]), .data9 (in_9[34]), .data10 (in_10[34]), .data11
       (in_11[34]), .data12 (in_12[34]), .data13 (in_13[34]), .data14
       (in_14[34]), .data15 (in_15[34]), .z (z[34]));
  CDN_bmux16 g5(.sel0 (ctl[0]), .data0 (in_0[33]), .data1 (in_1[33]),
       .sel1 (ctl[1]), .data2 (in_2[33]), .data3 (in_3[33]), .sel2
       (ctl[2]), .data4 (in_4[33]), .data5 (in_5[33]), .data6
       (in_6[33]), .data7 (in_7[33]), .sel3 (ctl[3]), .data8
       (in_8[33]), .data9 (in_9[33]), .data10 (in_10[33]), .data11
       (in_11[33]), .data12 (in_12[33]), .data13 (in_13[33]), .data14
       (in_14[33]), .data15 (in_15[33]), .z (z[33]));
  CDN_bmux16 g6(.sel0 (ctl[0]), .data0 (in_0[32]), .data1 (in_1[32]),
       .sel1 (ctl[1]), .data2 (in_2[32]), .data3 (in_3[32]), .sel2
       (ctl[2]), .data4 (in_4[32]), .data5 (in_5[32]), .data6
       (in_6[32]), .data7 (in_7[32]), .sel3 (ctl[3]), .data8
       (in_8[32]), .data9 (in_9[32]), .data10 (in_10[32]), .data11
       (in_11[32]), .data12 (in_12[32]), .data13 (in_13[32]), .data14
       (in_14[32]), .data15 (in_15[32]), .z (z[32]));
  CDN_bmux16 g7(.sel0 (ctl[0]), .data0 (in_0[31]), .data1 (in_1[31]),
       .sel1 (ctl[1]), .data2 (in_2[31]), .data3 (in_3[31]), .sel2
       (ctl[2]), .data4 (in_4[31]), .data5 (in_5[31]), .data6
       (in_6[31]), .data7 (in_7[31]), .sel3 (ctl[3]), .data8
       (in_8[31]), .data9 (in_9[31]), .data10 (in_10[31]), .data11
       (in_11[31]), .data12 (in_12[31]), .data13 (in_13[31]), .data14
       (in_14[31]), .data15 (in_15[31]), .z (z[31]));
  CDN_bmux16 g8(.sel0 (ctl[0]), .data0 (in_0[30]), .data1 (in_1[30]),
       .sel1 (ctl[1]), .data2 (in_2[30]), .data3 (in_3[30]), .sel2
       (ctl[2]), .data4 (in_4[30]), .data5 (in_5[30]), .data6
       (in_6[30]), .data7 (in_7[30]), .sel3 (ctl[3]), .data8
       (in_8[30]), .data9 (in_9[30]), .data10 (in_10[30]), .data11
       (in_11[30]), .data12 (in_12[30]), .data13 (in_13[30]), .data14
       (in_14[30]), .data15 (in_15[30]), .z (z[30]));
  CDN_bmux16 g9(.sel0 (ctl[0]), .data0 (in_0[29]), .data1 (in_1[29]),
       .sel1 (ctl[1]), .data2 (in_2[29]), .data3 (in_3[29]), .sel2
       (ctl[2]), .data4 (in_4[29]), .data5 (in_5[29]), .data6
       (in_6[29]), .data7 (in_7[29]), .sel3 (ctl[3]), .data8
       (in_8[29]), .data9 (in_9[29]), .data10 (in_10[29]), .data11
       (in_11[29]), .data12 (in_12[29]), .data13 (in_13[29]), .data14
       (in_14[29]), .data15 (in_15[29]), .z (z[29]));
  CDN_bmux16 g10(.sel0 (ctl[0]), .data0 (in_0[28]), .data1 (in_1[28]),
       .sel1 (ctl[1]), .data2 (in_2[28]), .data3 (in_3[28]), .sel2
       (ctl[2]), .data4 (in_4[28]), .data5 (in_5[28]), .data6
       (in_6[28]), .data7 (in_7[28]), .sel3 (ctl[3]), .data8
       (in_8[28]), .data9 (in_9[28]), .data10 (in_10[28]), .data11
       (in_11[28]), .data12 (in_12[28]), .data13 (in_13[28]), .data14
       (in_14[28]), .data15 (in_15[28]), .z (z[28]));
  CDN_bmux16 g11(.sel0 (ctl[0]), .data0 (in_0[27]), .data1 (in_1[27]),
       .sel1 (ctl[1]), .data2 (in_2[27]), .data3 (in_3[27]), .sel2
       (ctl[2]), .data4 (in_4[27]), .data5 (in_5[27]), .data6
       (in_6[27]), .data7 (in_7[27]), .sel3 (ctl[3]), .data8
       (in_8[27]), .data9 (in_9[27]), .data10 (in_10[27]), .data11
       (in_11[27]), .data12 (in_12[27]), .data13 (in_13[27]), .data14
       (in_14[27]), .data15 (in_15[27]), .z (z[27]));
  CDN_bmux16 g12(.sel0 (ctl[0]), .data0 (in_0[26]), .data1 (in_1[26]),
       .sel1 (ctl[1]), .data2 (in_2[26]), .data3 (in_3[26]), .sel2
       (ctl[2]), .data4 (in_4[26]), .data5 (in_5[26]), .data6
       (in_6[26]), .data7 (in_7[26]), .sel3 (ctl[3]), .data8
       (in_8[26]), .data9 (in_9[26]), .data10 (in_10[26]), .data11
       (in_11[26]), .data12 (in_12[26]), .data13 (in_13[26]), .data14
       (in_14[26]), .data15 (in_15[26]), .z (z[26]));
  CDN_bmux16 g13(.sel0 (ctl[0]), .data0 (in_0[25]), .data1 (in_1[25]),
       .sel1 (ctl[1]), .data2 (in_2[25]), .data3 (in_3[25]), .sel2
       (ctl[2]), .data4 (in_4[25]), .data5 (in_5[25]), .data6
       (in_6[25]), .data7 (in_7[25]), .sel3 (ctl[3]), .data8
       (in_8[25]), .data9 (in_9[25]), .data10 (in_10[25]), .data11
       (in_11[25]), .data12 (in_12[25]), .data13 (in_13[25]), .data14
       (in_14[25]), .data15 (in_15[25]), .z (z[25]));
  CDN_bmux16 g14(.sel0 (ctl[0]), .data0 (in_0[24]), .data1 (in_1[24]),
       .sel1 (ctl[1]), .data2 (in_2[24]), .data3 (in_3[24]), .sel2
       (ctl[2]), .data4 (in_4[24]), .data5 (in_5[24]), .data6
       (in_6[24]), .data7 (in_7[24]), .sel3 (ctl[3]), .data8
       (in_8[24]), .data9 (in_9[24]), .data10 (in_10[24]), .data11
       (in_11[24]), .data12 (in_12[24]), .data13 (in_13[24]), .data14
       (in_14[24]), .data15 (in_15[24]), .z (z[24]));
  CDN_bmux16 g15(.sel0 (ctl[0]), .data0 (in_0[23]), .data1 (in_1[23]),
       .sel1 (ctl[1]), .data2 (in_2[23]), .data3 (in_3[23]), .sel2
       (ctl[2]), .data4 (in_4[23]), .data5 (in_5[23]), .data6
       (in_6[23]), .data7 (in_7[23]), .sel3 (ctl[3]), .data8
       (in_8[23]), .data9 (in_9[23]), .data10 (in_10[23]), .data11
       (in_11[23]), .data12 (in_12[23]), .data13 (in_13[23]), .data14
       (in_14[23]), .data15 (in_15[23]), .z (z[23]));
  CDN_bmux16 g16(.sel0 (ctl[0]), .data0 (in_0[22]), .data1 (in_1[22]),
       .sel1 (ctl[1]), .data2 (in_2[22]), .data3 (in_3[22]), .sel2
       (ctl[2]), .data4 (in_4[22]), .data5 (in_5[22]), .data6
       (in_6[22]), .data7 (in_7[22]), .sel3 (ctl[3]), .data8
       (in_8[22]), .data9 (in_9[22]), .data10 (in_10[22]), .data11
       (in_11[22]), .data12 (in_12[22]), .data13 (in_13[22]), .data14
       (in_14[22]), .data15 (in_15[22]), .z (z[22]));
  CDN_bmux16 g17(.sel0 (ctl[0]), .data0 (in_0[21]), .data1 (in_1[21]),
       .sel1 (ctl[1]), .data2 (in_2[21]), .data3 (in_3[21]), .sel2
       (ctl[2]), .data4 (in_4[21]), .data5 (in_5[21]), .data6
       (in_6[21]), .data7 (in_7[21]), .sel3 (ctl[3]), .data8
       (in_8[21]), .data9 (in_9[21]), .data10 (in_10[21]), .data11
       (in_11[21]), .data12 (in_12[21]), .data13 (in_13[21]), .data14
       (in_14[21]), .data15 (in_15[21]), .z (z[21]));
  CDN_bmux16 g18(.sel0 (ctl[0]), .data0 (in_0[20]), .data1 (in_1[20]),
       .sel1 (ctl[1]), .data2 (in_2[20]), .data3 (in_3[20]), .sel2
       (ctl[2]), .data4 (in_4[20]), .data5 (in_5[20]), .data6
       (in_6[20]), .data7 (in_7[20]), .sel3 (ctl[3]), .data8
       (in_8[20]), .data9 (in_9[20]), .data10 (in_10[20]), .data11
       (in_11[20]), .data12 (in_12[20]), .data13 (in_13[20]), .data14
       (in_14[20]), .data15 (in_15[20]), .z (z[20]));
  CDN_bmux16 g19(.sel0 (ctl[0]), .data0 (in_0[19]), .data1 (in_1[19]),
       .sel1 (ctl[1]), .data2 (in_2[19]), .data3 (in_3[19]), .sel2
       (ctl[2]), .data4 (in_4[19]), .data5 (in_5[19]), .data6
       (in_6[19]), .data7 (in_7[19]), .sel3 (ctl[3]), .data8
       (in_8[19]), .data9 (in_9[19]), .data10 (in_10[19]), .data11
       (in_11[19]), .data12 (in_12[19]), .data13 (in_13[19]), .data14
       (in_14[19]), .data15 (in_15[19]), .z (z[19]));
  CDN_bmux16 g20(.sel0 (ctl[0]), .data0 (in_0[18]), .data1 (in_1[18]),
       .sel1 (ctl[1]), .data2 (in_2[18]), .data3 (in_3[18]), .sel2
       (ctl[2]), .data4 (in_4[18]), .data5 (in_5[18]), .data6
       (in_6[18]), .data7 (in_7[18]), .sel3 (ctl[3]), .data8
       (in_8[18]), .data9 (in_9[18]), .data10 (in_10[18]), .data11
       (in_11[18]), .data12 (in_12[18]), .data13 (in_13[18]), .data14
       (in_14[18]), .data15 (in_15[18]), .z (z[18]));
  CDN_bmux16 g21(.sel0 (ctl[0]), .data0 (in_0[17]), .data1 (in_1[17]),
       .sel1 (ctl[1]), .data2 (in_2[17]), .data3 (in_3[17]), .sel2
       (ctl[2]), .data4 (in_4[17]), .data5 (in_5[17]), .data6
       (in_6[17]), .data7 (in_7[17]), .sel3 (ctl[3]), .data8
       (in_8[17]), .data9 (in_9[17]), .data10 (in_10[17]), .data11
       (in_11[17]), .data12 (in_12[17]), .data13 (in_13[17]), .data14
       (in_14[17]), .data15 (in_15[17]), .z (z[17]));
  CDN_bmux16 g22(.sel0 (ctl[0]), .data0 (in_0[16]), .data1 (in_1[16]),
       .sel1 (ctl[1]), .data2 (in_2[16]), .data3 (in_3[16]), .sel2
       (ctl[2]), .data4 (in_4[16]), .data5 (in_5[16]), .data6
       (in_6[16]), .data7 (in_7[16]), .sel3 (ctl[3]), .data8
       (in_8[16]), .data9 (in_9[16]), .data10 (in_10[16]), .data11
       (in_11[16]), .data12 (in_12[16]), .data13 (in_13[16]), .data14
       (in_14[16]), .data15 (in_15[16]), .z (z[16]));
  CDN_bmux16 g23(.sel0 (ctl[0]), .data0 (in_0[15]), .data1 (in_1[15]),
       .sel1 (ctl[1]), .data2 (in_2[15]), .data3 (in_3[15]), .sel2
       (ctl[2]), .data4 (in_4[15]), .data5 (in_5[15]), .data6
       (in_6[15]), .data7 (in_7[15]), .sel3 (ctl[3]), .data8
       (in_8[15]), .data9 (in_9[15]), .data10 (in_10[15]), .data11
       (in_11[15]), .data12 (in_12[15]), .data13 (in_13[15]), .data14
       (in_14[15]), .data15 (in_15[15]), .z (z[15]));
  CDN_bmux16 g24(.sel0 (ctl[0]), .data0 (in_0[14]), .data1 (in_1[14]),
       .sel1 (ctl[1]), .data2 (in_2[14]), .data3 (in_3[14]), .sel2
       (ctl[2]), .data4 (in_4[14]), .data5 (in_5[14]), .data6
       (in_6[14]), .data7 (in_7[14]), .sel3 (ctl[3]), .data8
       (in_8[14]), .data9 (in_9[14]), .data10 (in_10[14]), .data11
       (in_11[14]), .data12 (in_12[14]), .data13 (in_13[14]), .data14
       (in_14[14]), .data15 (in_15[14]), .z (z[14]));
  CDN_bmux16 g25(.sel0 (ctl[0]), .data0 (in_0[13]), .data1 (in_1[13]),
       .sel1 (ctl[1]), .data2 (in_2[13]), .data3 (in_3[13]), .sel2
       (ctl[2]), .data4 (in_4[13]), .data5 (in_5[13]), .data6
       (in_6[13]), .data7 (in_7[13]), .sel3 (ctl[3]), .data8
       (in_8[13]), .data9 (in_9[13]), .data10 (in_10[13]), .data11
       (in_11[13]), .data12 (in_12[13]), .data13 (in_13[13]), .data14
       (in_14[13]), .data15 (in_15[13]), .z (z[13]));
  CDN_bmux16 g26(.sel0 (ctl[0]), .data0 (in_0[12]), .data1 (in_1[12]),
       .sel1 (ctl[1]), .data2 (in_2[12]), .data3 (in_3[12]), .sel2
       (ctl[2]), .data4 (in_4[12]), .data5 (in_5[12]), .data6
       (in_6[12]), .data7 (in_7[12]), .sel3 (ctl[3]), .data8
       (in_8[12]), .data9 (in_9[12]), .data10 (in_10[12]), .data11
       (in_11[12]), .data12 (in_12[12]), .data13 (in_13[12]), .data14
       (in_14[12]), .data15 (in_15[12]), .z (z[12]));
  CDN_bmux16 g27(.sel0 (ctl[0]), .data0 (in_0[11]), .data1 (in_1[11]),
       .sel1 (ctl[1]), .data2 (in_2[11]), .data3 (in_3[11]), .sel2
       (ctl[2]), .data4 (in_4[11]), .data5 (in_5[11]), .data6
       (in_6[11]), .data7 (in_7[11]), .sel3 (ctl[3]), .data8
       (in_8[11]), .data9 (in_9[11]), .data10 (in_10[11]), .data11
       (in_11[11]), .data12 (in_12[11]), .data13 (in_13[11]), .data14
       (in_14[11]), .data15 (in_15[11]), .z (z[11]));
  CDN_bmux16 g28(.sel0 (ctl[0]), .data0 (in_0[10]), .data1 (in_1[10]),
       .sel1 (ctl[1]), .data2 (in_2[10]), .data3 (in_3[10]), .sel2
       (ctl[2]), .data4 (in_4[10]), .data5 (in_5[10]), .data6
       (in_6[10]), .data7 (in_7[10]), .sel3 (ctl[3]), .data8
       (in_8[10]), .data9 (in_9[10]), .data10 (in_10[10]), .data11
       (in_11[10]), .data12 (in_12[10]), .data13 (in_13[10]), .data14
       (in_14[10]), .data15 (in_15[10]), .z (z[10]));
  CDN_bmux16 g29(.sel0 (ctl[0]), .data0 (in_0[9]), .data1 (in_1[9]),
       .sel1 (ctl[1]), .data2 (in_2[9]), .data3 (in_3[9]), .sel2
       (ctl[2]), .data4 (in_4[9]), .data5 (in_5[9]), .data6 (in_6[9]),
       .data7 (in_7[9]), .sel3 (ctl[3]), .data8 (in_8[9]), .data9
       (in_9[9]), .data10 (in_10[9]), .data11 (in_11[9]), .data12
       (in_12[9]), .data13 (in_13[9]), .data14 (in_14[9]), .data15
       (in_15[9]), .z (z[9]));
  CDN_bmux16 g30(.sel0 (ctl[0]), .data0 (in_0[8]), .data1 (in_1[8]),
       .sel1 (ctl[1]), .data2 (in_2[8]), .data3 (in_3[8]), .sel2
       (ctl[2]), .data4 (in_4[8]), .data5 (in_5[8]), .data6 (in_6[8]),
       .data7 (in_7[8]), .sel3 (ctl[3]), .data8 (in_8[8]), .data9
       (in_9[8]), .data10 (in_10[8]), .data11 (in_11[8]), .data12
       (in_12[8]), .data13 (in_13[8]), .data14 (in_14[8]), .data15
       (in_15[8]), .z (z[8]));
  CDN_bmux16 g31(.sel0 (ctl[0]), .data0 (in_0[7]), .data1 (in_1[7]),
       .sel1 (ctl[1]), .data2 (in_2[7]), .data3 (in_3[7]), .sel2
       (ctl[2]), .data4 (in_4[7]), .data5 (in_5[7]), .data6 (in_6[7]),
       .data7 (in_7[7]), .sel3 (ctl[3]), .data8 (in_8[7]), .data9
       (in_9[7]), .data10 (in_10[7]), .data11 (in_11[7]), .data12
       (in_12[7]), .data13 (in_13[7]), .data14 (in_14[7]), .data15
       (in_15[7]), .z (z[7]));
  CDN_bmux16 g32(.sel0 (ctl[0]), .data0 (in_0[6]), .data1 (in_1[6]),
       .sel1 (ctl[1]), .data2 (in_2[6]), .data3 (in_3[6]), .sel2
       (ctl[2]), .data4 (in_4[6]), .data5 (in_5[6]), .data6 (in_6[6]),
       .data7 (in_7[6]), .sel3 (ctl[3]), .data8 (in_8[6]), .data9
       (in_9[6]), .data10 (in_10[6]), .data11 (in_11[6]), .data12
       (in_12[6]), .data13 (in_13[6]), .data14 (in_14[6]), .data15
       (in_15[6]), .z (z[6]));
  CDN_bmux16 g33(.sel0 (ctl[0]), .data0 (in_0[5]), .data1 (in_1[5]),
       .sel1 (ctl[1]), .data2 (in_2[5]), .data3 (in_3[5]), .sel2
       (ctl[2]), .data4 (in_4[5]), .data5 (in_5[5]), .data6 (in_6[5]),
       .data7 (in_7[5]), .sel3 (ctl[3]), .data8 (in_8[5]), .data9
       (in_9[5]), .data10 (in_10[5]), .data11 (in_11[5]), .data12
       (in_12[5]), .data13 (in_13[5]), .data14 (in_14[5]), .data15
       (in_15[5]), .z (z[5]));
  CDN_bmux16 g34(.sel0 (ctl[0]), .data0 (in_0[4]), .data1 (in_1[4]),
       .sel1 (ctl[1]), .data2 (in_2[4]), .data3 (in_3[4]), .sel2
       (ctl[2]), .data4 (in_4[4]), .data5 (in_5[4]), .data6 (in_6[4]),
       .data7 (in_7[4]), .sel3 (ctl[3]), .data8 (in_8[4]), .data9
       (in_9[4]), .data10 (in_10[4]), .data11 (in_11[4]), .data12
       (in_12[4]), .data13 (in_13[4]), .data14 (in_14[4]), .data15
       (in_15[4]), .z (z[4]));
  CDN_bmux16 g35(.sel0 (ctl[0]), .data0 (in_0[3]), .data1 (in_1[3]),
       .sel1 (ctl[1]), .data2 (in_2[3]), .data3 (in_3[3]), .sel2
       (ctl[2]), .data4 (in_4[3]), .data5 (in_5[3]), .data6 (in_6[3]),
       .data7 (in_7[3]), .sel3 (ctl[3]), .data8 (in_8[3]), .data9
       (in_9[3]), .data10 (in_10[3]), .data11 (in_11[3]), .data12
       (in_12[3]), .data13 (in_13[3]), .data14 (in_14[3]), .data15
       (in_15[3]), .z (z[3]));
  CDN_bmux16 g36(.sel0 (ctl[0]), .data0 (in_0[2]), .data1 (in_1[2]),
       .sel1 (ctl[1]), .data2 (in_2[2]), .data3 (in_3[2]), .sel2
       (ctl[2]), .data4 (in_4[2]), .data5 (in_5[2]), .data6 (in_6[2]),
       .data7 (in_7[2]), .sel3 (ctl[3]), .data8 (in_8[2]), .data9
       (in_9[2]), .data10 (in_10[2]), .data11 (in_11[2]), .data12
       (in_12[2]), .data13 (in_13[2]), .data14 (in_14[2]), .data15
       (in_15[2]), .z (z[2]));
  CDN_bmux16 g37(.sel0 (ctl[0]), .data0 (in_0[1]), .data1 (in_1[1]),
       .sel1 (ctl[1]), .data2 (in_2[1]), .data3 (in_3[1]), .sel2
       (ctl[2]), .data4 (in_4[1]), .data5 (in_5[1]), .data6 (in_6[1]),
       .data7 (in_7[1]), .sel3 (ctl[3]), .data8 (in_8[1]), .data9
       (in_9[1]), .data10 (in_10[1]), .data11 (in_11[1]), .data12
       (in_12[1]), .data13 (in_13[1]), .data14 (in_14[1]), .data15
       (in_15[1]), .z (z[1]));
  CDN_bmux16 g38(.sel0 (ctl[0]), .data0 (in_0[0]), .data1 (in_1[0]),
       .sel1 (ctl[1]), .data2 (in_2[0]), .data3 (in_3[0]), .sel2
       (ctl[2]), .data4 (in_4[0]), .data5 (in_5[0]), .data6 (in_6[0]),
       .data7 (in_7[0]), .sel3 (ctl[3]), .data8 (in_8[0]), .data9
       (in_9[0]), .data10 (in_10[0]), .data11 (in_11[0]), .data12
       (in_12[0]), .data13 (in_13[0]), .data14 (in_14[0]), .data15
       (in_15[0]), .z (z[0]));
endmodule

module LDTU_oFIFOTMR_Nbits_ham38(CLK, reset_A, reset_B, reset_C,
     start_write, read_signal, data_input, data_output, empty_signal,
     full_signal, decode_signal, tmrError);
  input CLK, reset_A, reset_B, reset_C, start_write, read_signal;
  input [37:0] data_input;
  output [37:0] data_output;
  output empty_signal, full_signal, decode_signal, tmrError;
  wire CLK, reset_A, reset_B, reset_C, start_write, read_signal;
  wire [37:0] data_input;
  wire [37:0] data_output;
  wire empty_signal, full_signal, decode_signal, tmrError;
  wire [3:0] ptr_write_A;
  wire [3:0] ptr_write_B;
  wire [3:0] ptr_write_C;
  wire [3:0] ptr_write;
  wire [3:0] ptr_read_A;
  wire [3:0] ptr_read_B;
  wire [3:0] ptr_read_C;
  wire [3:0] ptr_read;
  wire [37:0] \memory[0] ;
  wire [37:0] \memory[1] ;
  wire [37:0] \memory[2] ;
  wire [37:0] \memory[3] ;
  wire [37:0] \memory[4] ;
  wire [37:0] \memory[5] ;
  wire [37:0] \memory[6] ;
  wire [37:0] \memory[7] ;
  wire [37:0] \memory[8] ;
  wire [37:0] \memory[9] ;
  wire [37:0] \memory[10] ;
  wire [37:0] \memory[11] ;
  wire [37:0] \memory[12] ;
  wire [37:0] \memory[13] ;
  wire [37:0] \memory[14] ;
  wire [37:0] \memory[15] ;
  wire [37:0] \memory[ptr_read] ;
  wire UNCONNECTED1254, UNCONNECTED1255, UNCONNECTED1256,
       UNCONNECTED1257, UNCONNECTED1258, UNCONNECTED1259,
       UNCONNECTED1260, UNCONNECTED1261;
  wire UNCONNECTED1262, UNCONNECTED1263, UNCONNECTED1264,
       UNCONNECTED1265, UNCONNECTED1266, UNCONNECTED1267,
       UNCONNECTED1268, UNCONNECTED1269;
  wire UNCONNECTED1270, UNCONNECTED1271, UNCONNECTED1272,
       UNCONNECTED1273, UNCONNECTED1274, UNCONNECTED1275,
       UNCONNECTED1276, UNCONNECTED1277;
  wire UNCONNECTED1278, UNCONNECTED1279, UNCONNECTED1280,
       UNCONNECTED1281, UNCONNECTED1282, UNCONNECTED1283,
       UNCONNECTED1284, UNCONNECTED1285;
  wire UNCONNECTED1286, UNCONNECTED1287, UNCONNECTED1288,
       UNCONNECTED1289, UNCONNECTED1290, UNCONNECTED1291,
       UNCONNECTED1292, UNCONNECTED1293;
  wire UNCONNECTED1294, UNCONNECTED1295, UNCONNECTED1296,
       UNCONNECTED1297, UNCONNECTED1298, UNCONNECTED1299,
       UNCONNECTED1300, UNCONNECTED1301;
  wire UNCONNECTED1302, UNCONNECTED1303, UNCONNECTED1304,
       UNCONNECTED1305, UNCONNECTED1306, UNCONNECTED1307,
       UNCONNECTED1308, UNCONNECTED1309;
  wire UNCONNECTED1310, UNCONNECTED1311, UNCONNECTED1312,
       UNCONNECTED1313, UNCONNECTED1314, UNCONNECTED1315,
       UNCONNECTED1316, UNCONNECTED1317;
  wire UNCONNECTED1318, decode_signalTmrError, decode_signal_A,
       decode_signal_B, decode_signal_C, emptyTmrError, empty_signal_A,
       empty_signal_B;
  wire empty_signal_C, fullTmrError, full_signal_A, full_signal_B,
       full_signal_C, n_65, n_67, n_87;
  wire n_89, n_91, n_93, n_95, n_150, n_151, n_152, n_153;
  wire n_154, n_155, n_156, n_157, n_158, n_159, n_160, n_161;
  wire n_162, n_163, n_164, n_165, n_166, n_167, n_168, n_169;
  wire n_170, n_171, n_172, n_173, n_174, n_175, n_176, n_177;
  wire n_178, n_179, n_180, n_181, n_182, n_185, n_186, n_187;
  wire n_188, n_189, n_190, n_191, n_192, n_193, n_194, n_195;
  wire n_196, n_197, n_198, n_199, n_200, n_201, n_202, n_203;
  wire n_204, n_205, n_206, n_207, n_208, n_209, n_210, n_211;
  wire n_214, n_215, n_216, n_217, n_218, n_219, n_220, n_221;
  wire n_222, n_223, n_224, n_225, n_226, n_227, n_228, n_229;
  wire n_230, n_231, n_232, n_233, n_234, n_235, n_236, n_237;
  wire n_238, n_239, n_241, n_280, n_281, n_282, n_283, n_284;
  wire n_285, n_293, n_294, n_297, n_298, n_301, n_302, n_304;
  wire n_309, n_310, n_311, n_312, n_313, n_314, n_315, n_316;
  wire n_317, n_318, n_319, n_320, n_321, n_322, n_323, n_324;
  wire n_325, n_326, n_327, n_328, n_329, n_330, n_331, n_332;
  wire n_333, n_334, n_335, n_336, n_337, n_338, n_339, n_340;
  wire n_341, n_342, n_343, n_344, n_345, n_346, n_347, n_348;
  wire n_349, n_350, n_354, n_355, n_356, n_357, n_358, n_359;
  wire n_360, n_361, n_362, n_363, n_364, n_365, n_366, n_367;
  wire n_368, n_369, n_370, n_371, n_372, n_373, n_374, n_375;
  wire n_376, n_377, n_378, n_379, n_380, n_381, n_382, n_383;
  wire n_384, n_385, n_386, n_387, n_388, n_389, n_390, n_391;
  wire n_392, n_393, n_394, n_395, n_399, n_400, n_401, n_402;
  wire n_403, n_404, n_405, n_406, n_407, n_408, n_409, n_410;
  wire n_411, n_412, n_413, n_414, n_415, n_416, n_417, n_418;
  wire n_419, n_420, n_421, n_422, n_423, n_424, n_425, n_426;
  wire n_427, n_428, n_429, n_430, n_431, n_432, n_433, n_434;
  wire n_435, n_436, n_437, n_438, n_439, n_440, n_444, n_445;
  wire n_446, n_447, n_448, n_449, n_450, n_451, n_452, n_453;
  wire n_454, n_455, n_456, n_457, n_458, n_459, n_460, n_461;
  wire n_462, n_463, n_464, n_465, n_466, n_467, n_468, n_469;
  wire n_470, n_471, n_472, n_473, n_474, n_475, n_476, n_477;
  wire n_478, n_479, n_480, n_481, n_482, n_483, n_484, n_485;
  wire n_489, n_490, n_491, n_492, n_493, n_494, n_495, n_496;
  wire n_497, n_498, n_499, n_500, n_501, n_502, n_503, n_504;
  wire n_505, n_506, n_507, n_508, n_509, n_510, n_511, n_512;
  wire n_513, n_514, n_515, n_516, n_517, n_518, n_519, n_520;
  wire n_521, n_522, n_523, n_524, n_525, n_526, n_527, n_528;
  wire n_529, n_530, n_534, n_535, n_536, n_537, n_538, n_539;
  wire n_540, n_541, n_542, n_543, n_544, n_545, n_546, n_547;
  wire n_548, n_549, n_550, n_551, n_552, n_553, n_554, n_555;
  wire n_556, n_557, n_558, n_559, n_560, n_561, n_562, n_563;
  wire n_564, n_565, n_566, n_567, n_568, n_569, n_570, n_571;
  wire n_572, n_573, n_574, n_575, n_579, n_580, n_581, n_582;
  wire n_583, n_584, n_585, n_586, n_587, n_588, n_589, n_590;
  wire n_591, n_592, n_593, n_594, n_595, n_596, n_597, n_598;
  wire n_599, n_600, n_601, n_602, n_603, n_604, n_605, n_606;
  wire n_607, n_608, n_609, n_610, n_611, n_612, n_613, n_614;
  wire n_615, n_616, n_617, n_618, n_619, n_620, n_624, n_625;
  wire n_626, n_627, n_628, n_629, n_630, n_631, n_632, n_633;
  wire n_634, n_635, n_636, n_637, n_638, n_639, n_640, n_641;
  wire n_642, n_643, n_644, n_645, n_646, n_647, n_648, n_649;
  wire n_650, n_651, n_652, n_653, n_654, n_655, n_656, n_657;
  wire n_658, n_659, n_660, n_661, n_662, n_663, n_664, n_665;
  wire n_669, n_670, n_671, n_672, n_673, n_674, n_675, n_676;
  wire n_677, n_678, n_679, n_680, n_681, n_682, n_683, n_684;
  wire n_685, n_686, n_687, n_688, n_689, n_690, n_691, n_692;
  wire n_693, n_694, n_695, n_696, n_697, n_698, n_699, n_700;
  wire n_701, n_702, n_703, n_704, n_705, n_706, n_707, n_708;
  wire n_709, n_710, n_714, n_715, n_716, n_717, n_718, n_719;
  wire n_720, n_721, n_722, n_723, n_724, n_725, n_726, n_727;
  wire n_728, n_729, n_730, n_731, n_732, n_733, n_734, n_735;
  wire n_736, n_737, n_738, n_739, n_740, n_741, n_742, n_743;
  wire n_744, n_745, n_746, n_747, n_748, n_749, n_750, n_751;
  wire n_752, n_753, n_754, n_755, n_759, n_760, n_761, n_762;
  wire n_763, n_764, n_765, n_766, n_767, n_768, n_769, n_770;
  wire n_771, n_772, n_773, n_774, n_775, n_776, n_777, n_778;
  wire n_779, n_780, n_781, n_782, n_783, n_784, n_785, n_786;
  wire n_787, n_788, n_789, n_790, n_791, n_792, n_793, n_794;
  wire n_795, n_796, n_797, n_798, n_799, n_800, n_804, n_805;
  wire n_806, n_807, n_808, n_809, n_810, n_811, n_812, n_813;
  wire n_814, n_815, n_816, n_817, n_818, n_819, n_820, n_821;
  wire n_822, n_823, n_824, n_825, n_826, n_827, n_828, n_829;
  wire n_830, n_831, n_832, n_833, n_834, n_835, n_836, n_837;
  wire n_838, n_839, n_840, n_841, n_842, n_843, n_844, n_845;
  wire n_849, n_850, n_851, n_852, n_853, n_854, n_855, n_856;
  wire n_857, n_858, n_859, n_860, n_861, n_862, n_863, n_864;
  wire n_865, n_866, n_867, n_868, n_869, n_870, n_871, n_872;
  wire n_873, n_874, n_875, n_876, n_877, n_878, n_879, n_880;
  wire n_881, n_882, n_883, n_884, n_885, n_886, n_887, n_888;
  wire n_889, n_890, n_894, n_895, n_896, n_897, n_898, n_899;
  wire n_900, n_901, n_902, n_903, n_904, n_905, n_906, n_907;
  wire n_908, n_909, n_910, n_911, n_912, n_913, n_914, n_915;
  wire n_916, n_917, n_918, n_919, n_920, n_921, n_922, n_923;
  wire n_924, n_925, n_926, n_927, n_928, n_929, n_930, n_931;
  wire n_932, n_933, n_934, n_935, n_939, n_940, n_941, n_942;
  wire n_943, n_944, n_945, n_946, n_947, n_948, n_949, n_950;
  wire n_951, n_952, n_953, n_954, n_955, n_956, n_957, n_958;
  wire n_959, n_960, n_961, n_962, n_963, n_964, n_965, n_966;
  wire n_967, n_968, n_969, n_970, n_971, n_972, n_973, n_974;
  wire n_975, n_976, n_977, n_978, n_979, n_980, n_984, n_985;
  wire n_986, n_987, n_988, n_989, n_990, n_991, n_992, n_993;
  wire n_994, n_995, n_996, n_997, n_998, n_999, n_1000, n_1001;
  wire n_1002, n_1003, n_1004, n_1005, n_1006, n_1007, n_1008, n_1009;
  wire n_1010, n_1011, n_1012, n_1013, n_1014, n_1015, n_1016, n_1017;
  wire n_1018, n_1019, n_1020, n_1021, n_1022, n_1023, n_1024, n_2482;
  wire n_2483, n_2484, n_2485, n_2487, n_2488, n_2489, n_2490, n_2492;
  wire n_2493, n_2494, n_2495, n_2497, n_2498, n_2499, n_2500, n_2501;
  wire n_2510, n_2511, n_2512, n_2513, n_2514, n_2523, n_2524, n_2525;
  wire n_2526, n_2527, n_2574, n_2575, n_2576, n_2577, n_2578, n_2579;
  wire n_2580, n_2581, n_2582, n_2583, n_2584, n_2585, n_2586, n_2587;
  wire n_2588, n_2589, n_2590, n_2591, n_2592, n_2593, n_2594, n_2595;
  wire n_2596, ptr_readTmrError, ptr_writeTmrError, read_signal_A,
       read_signal_B, read_signal_C, reset, resetTmrError;
  wire start_write_A, start_write_B, start_write_C;
  majorityVoter_WIDTH4 ptr_writeVoter(.inA (ptr_write_A), .inB
       (ptr_write_B), .inC (ptr_write_C), .out (ptr_write), .tmrErr
       (ptr_writeTmrError));
  majorityVoter_WIDTH4 ptr_readVoter(.inA (ptr_read_A), .inB
       (ptr_read_B), .inC (ptr_read_C), .out (ptr_read), .tmrErr
       (ptr_readTmrError));
  majorityVoter decode_signalVoter(.inA (decode_signal_A), .inB
       (decode_signal_B), .inC (decode_signal_C), .out (decode_signal),
       .tmrErr (decode_signalTmrError));
  majorityVoter resetVoter(.inA (reset_A), .inB (reset_B), .inC
       (reset_C), .out (reset), .tmrErr (resetTmrError));
  majorityVoter emptyVoter(.inA (empty_signal_A), .inB
       (empty_signal_B), .inC (empty_signal_C), .out (empty_signal),
       .tmrErr (emptyTmrError));
  majorityVoter fullVoter(.inA (full_signal_A), .inB (full_signal_B),
       .inC (full_signal_C), .out (full_signal), .tmrErr
       (fullTmrError));
  fanout read_signalFanout(.in (read_signal), .outA (read_signal_A),
       .outB (read_signal_B), .outC (read_signal_C));
  fanout start_writeFanout(.in (start_write), .outA (start_write_A),
       .outB (start_write_B), .outC (start_write_C));
  add_unsigned_540 add_131_30(.A (ptr_read_A), .B (1'b1), .Z ({n_173,
       n_172, n_171, n_170}));
  add_unsigned_540 add_151_30(.A (ptr_read_B), .B (1'b1), .Z ({n_202,
       n_201, n_200, n_199}));
  add_unsigned_540 add_171_30(.A (ptr_read_C), .B (1'b1), .Z ({n_231,
       n_230, n_229, n_228}));
  add_unsigned_540 add_88_53(.A (ptr_write_A), .B (1'b1), .Z ({n_160,
       n_159, n_158, n_157}));
  add_unsigned_540 add_90_53(.A (ptr_write_B), .B (1'b1), .Z ({n_189,
       n_188, n_187, n_186}));
  add_unsigned_540 add_92_53(.A (ptr_write_C), .B (1'b1), .Z ({n_218,
       n_217, n_216, n_215}));
  bmux_214 mux_ptr_write_A_98_22(.ctl (n_156), .in_0 (ptr_write_A),
       .in_1 ({n_160, n_159, n_158, n_157}), .z ({n_164, n_163, n_162,
       n_161}));
  bmux_214 mux_ptr_write_A_97_21(.ctl (start_write_A), .in_0
       (ptr_write_A), .in_1 ({n_164, n_163, n_162, n_161}), .z ({n_168,
       n_167, n_166, n_165}));
  bmux_214 mux_ptr_write_A_95_14(.ctl (n_153), .in_0 ({n_168, n_167,
       n_166, n_165}), .in_1 (4'b0000), .z ({UNCONNECTED1257,
       UNCONNECTED1256, UNCONNECTED1255, UNCONNECTED1254}));
  bmux_214 mux_ptr_read_A_130_23(.ctl (n_169), .in_0 (ptr_read_A),
       .in_1 ({n_173, n_172, n_171, n_170}), .z ({n_177, n_176, n_175,
       n_174}));
  bmux_214 mux_ptr_read_A_129_21(.ctl (read_signal_A), .in_0
       (ptr_read_A), .in_1 ({n_177, n_176, n_175, n_174}), .z ({n_181,
       n_180, n_179, n_178}));
  bmux_214 mux_ptr_read_A_125_14(.ctl (n_153), .in_0 ({n_181, n_180,
       n_179, n_178}), .in_1 (4'b0000), .z ({UNCONNECTED1261,
       UNCONNECTED1260, UNCONNECTED1259, UNCONNECTED1258}));
  bmux_214 mux_ptr_write_B_108_22(.ctl (n_185), .in_0 (ptr_write_B),
       .in_1 ({n_189, n_188, n_187, n_186}), .z ({n_193, n_192, n_191,
       n_190}));
  bmux_214 mux_ptr_write_B_107_21(.ctl (start_write_B), .in_0
       (ptr_write_B), .in_1 ({n_193, n_192, n_191, n_190}), .z ({n_197,
       n_196, n_195, n_194}));
  bmux_214 mux_ptr_write_B_105_14(.ctl (n_182), .in_0 ({n_197, n_196,
       n_195, n_194}), .in_1 (4'b0000), .z ({UNCONNECTED1265,
       UNCONNECTED1264, UNCONNECTED1263, UNCONNECTED1262}));
  bmux_214 mux_ptr_read_B_150_23(.ctl (n_198), .in_0 (ptr_read_B),
       .in_1 ({n_202, n_201, n_200, n_199}), .z ({n_206, n_205, n_204,
       n_203}));
  bmux_214 mux_ptr_read_B_149_21(.ctl (read_signal_B), .in_0
       (ptr_read_B), .in_1 ({n_206, n_205, n_204, n_203}), .z ({n_210,
       n_209, n_208, n_207}));
  bmux_214 mux_ptr_read_B_145_14(.ctl (n_182), .in_0 ({n_210, n_209,
       n_208, n_207}), .in_1 (4'b0000), .z ({UNCONNECTED1269,
       UNCONNECTED1268, UNCONNECTED1267, UNCONNECTED1266}));
  bmux_214 mux_ptr_write_C_118_22(.ctl (n_214), .in_0 (ptr_write_C),
       .in_1 ({n_218, n_217, n_216, n_215}), .z ({n_222, n_221, n_220,
       n_219}));
  bmux_214 mux_ptr_write_C_117_21(.ctl (start_write_C), .in_0
       (ptr_write_C), .in_1 ({n_222, n_221, n_220, n_219}), .z ({n_226,
       n_225, n_224, n_223}));
  bmux_214 mux_ptr_write_C_115_14(.ctl (n_211), .in_0 ({n_226, n_225,
       n_224, n_223}), .in_1 (4'b0000), .z ({UNCONNECTED1273,
       UNCONNECTED1272, UNCONNECTED1271, UNCONNECTED1270}));
  bmux_214 mux_ptr_read_C_170_23(.ctl (n_227), .in_0 (ptr_read_C),
       .in_1 ({n_231, n_230, n_229, n_228}), .z ({n_235, n_234, n_233,
       n_232}));
  bmux_214 mux_ptr_read_C_169_21(.ctl (read_signal_C), .in_0
       (ptr_read_C), .in_1 ({n_235, n_234, n_233, n_232}), .z ({n_239,
       n_238, n_237, n_236}));
  bmux_214 mux_ptr_read_C_165_14(.ctl (n_211), .in_0 ({n_239, n_238,
       n_237, n_236}), .in_1 (4'b0000), .z ({UNCONNECTED1277,
       UNCONNECTED1276, UNCONNECTED1275, UNCONNECTED1274}));
  bmux_516 \mux_memory[0]_185_12 (.ctl (n_152), .in_0 (data_input),
       .in_1 (38'b00000000000000000000000000000000000000), .z ({n_349,
       n_348, n_347, n_346, n_345, n_344, n_343, n_342, n_341, n_340,
       n_339, n_338, n_337, n_336, n_335, n_334, n_333, n_332, n_331,
       n_330, n_329, n_328, n_327, n_326, n_325, n_324, n_323, n_322,
       n_321, n_320, n_319, n_318, n_317, n_316, n_315, n_314, n_313,
       n_311}));
  bmux_516 \mux_memory[1]_185_12 (.ctl (n_152), .in_0 (data_input),
       .in_1 (38'b00000000000000000000000000000000000000), .z ({n_394,
       n_393, n_392, n_391, n_390, n_389, n_388, n_387, n_386, n_385,
       n_384, n_383, n_382, n_381, n_380, n_379, n_378, n_377, n_376,
       n_375, n_374, n_373, n_372, n_371, n_370, n_369, n_368, n_367,
       n_366, n_365, n_364, n_363, n_362, n_361, n_360, n_359, n_358,
       n_356}));
  bmux_516 \mux_memory[2]_185_12 (.ctl (n_152), .in_0 (data_input),
       .in_1 (38'b00000000000000000000000000000000000000), .z ({n_439,
       n_438, n_437, n_436, n_435, n_434, n_433, n_432, n_431, n_430,
       n_429, n_428, n_427, n_426, n_425, n_424, n_423, n_422, n_421,
       n_420, n_419, n_418, n_417, n_416, n_415, n_414, n_413, n_412,
       n_411, n_410, n_409, n_408, n_407, n_406, n_405, n_404, n_403,
       n_401}));
  bmux_516 \mux_memory[3]_185_12 (.ctl (n_152), .in_0 (data_input),
       .in_1 (38'b00000000000000000000000000000000000000), .z ({n_484,
       n_483, n_482, n_481, n_480, n_479, n_478, n_477, n_476, n_475,
       n_474, n_473, n_472, n_471, n_470, n_469, n_468, n_467, n_466,
       n_465, n_464, n_463, n_462, n_461, n_460, n_459, n_458, n_457,
       n_456, n_455, n_454, n_453, n_452, n_451, n_450, n_449, n_448,
       n_446}));
  bmux_516 \mux_memory[4]_185_12 (.ctl (n_152), .in_0 (data_input),
       .in_1 (38'b00000000000000000000000000000000000000), .z ({n_529,
       n_528, n_527, n_526, n_525, n_524, n_523, n_522, n_521, n_520,
       n_519, n_518, n_517, n_516, n_515, n_514, n_513, n_512, n_511,
       n_510, n_509, n_508, n_507, n_506, n_505, n_504, n_503, n_502,
       n_501, n_500, n_499, n_498, n_497, n_496, n_495, n_494, n_493,
       n_491}));
  bmux_516 \mux_memory[5]_185_12 (.ctl (n_152), .in_0 (data_input),
       .in_1 (38'b00000000000000000000000000000000000000), .z ({n_574,
       n_573, n_572, n_571, n_570, n_569, n_568, n_567, n_566, n_565,
       n_564, n_563, n_562, n_561, n_560, n_559, n_558, n_557, n_556,
       n_555, n_554, n_553, n_552, n_551, n_550, n_549, n_548, n_547,
       n_546, n_545, n_544, n_543, n_542, n_541, n_540, n_539, n_538,
       n_536}));
  bmux_516 \mux_memory[6]_185_12 (.ctl (n_152), .in_0 (data_input),
       .in_1 (38'b00000000000000000000000000000000000000), .z ({n_619,
       n_618, n_617, n_616, n_615, n_614, n_613, n_612, n_611, n_610,
       n_609, n_608, n_607, n_606, n_605, n_604, n_603, n_602, n_601,
       n_600, n_599, n_598, n_597, n_596, n_595, n_594, n_593, n_592,
       n_591, n_590, n_589, n_588, n_587, n_586, n_585, n_584, n_583,
       n_581}));
  bmux_516 \mux_memory[7]_185_12 (.ctl (n_152), .in_0 (data_input),
       .in_1 (38'b00000000000000000000000000000000000000), .z ({n_664,
       n_663, n_662, n_661, n_660, n_659, n_658, n_657, n_656, n_655,
       n_654, n_653, n_652, n_651, n_650, n_649, n_648, n_647, n_646,
       n_645, n_644, n_643, n_642, n_641, n_640, n_639, n_638, n_637,
       n_636, n_635, n_634, n_633, n_632, n_631, n_630, n_629, n_628,
       n_626}));
  bmux_516 \mux_memory[8]_185_12 (.ctl (n_152), .in_0 (data_input),
       .in_1 (38'b00000000000000000000000000000000000000), .z ({n_709,
       n_708, n_707, n_706, n_705, n_704, n_703, n_702, n_701, n_700,
       n_699, n_698, n_697, n_696, n_695, n_694, n_693, n_692, n_691,
       n_690, n_689, n_688, n_687, n_686, n_685, n_684, n_683, n_682,
       n_681, n_680, n_679, n_678, n_677, n_676, n_675, n_674, n_673,
       n_671}));
  bmux_516 \mux_memory[9]_185_12 (.ctl (n_152), .in_0 (data_input),
       .in_1 (38'b00000000000000000000000000000000000000), .z ({n_754,
       n_753, n_752, n_751, n_750, n_749, n_748, n_747, n_746, n_745,
       n_744, n_743, n_742, n_741, n_740, n_739, n_738, n_737, n_736,
       n_735, n_734, n_733, n_732, n_731, n_730, n_729, n_728, n_727,
       n_726, n_725, n_724, n_723, n_722, n_721, n_720, n_719, n_718,
       n_716}));
  bmux_516 \mux_memory[10]_185_12 (.ctl (n_152), .in_0 (data_input),
       .in_1 (38'b00000000000000000000000000000000000000), .z ({n_799,
       n_798, n_797, n_796, n_795, n_794, n_793, n_792, n_791, n_790,
       n_789, n_788, n_787, n_786, n_785, n_784, n_783, n_782, n_781,
       n_780, n_779, n_778, n_777, n_776, n_775, n_774, n_773, n_772,
       n_771, n_770, n_769, n_768, n_767, n_766, n_765, n_764, n_763,
       n_761}));
  bmux_516 \mux_memory[11]_185_12 (.ctl (n_152), .in_0 (data_input),
       .in_1 (38'b00000000000000000000000000000000000000), .z ({n_844,
       n_843, n_842, n_841, n_840, n_839, n_838, n_837, n_836, n_835,
       n_834, n_833, n_832, n_831, n_830, n_829, n_828, n_827, n_826,
       n_825, n_824, n_823, n_822, n_821, n_820, n_819, n_818, n_817,
       n_816, n_815, n_814, n_813, n_812, n_811, n_810, n_809, n_808,
       n_806}));
  bmux_516 \mux_memory[12]_185_12 (.ctl (n_152), .in_0 (data_input),
       .in_1 (38'b00000000000000000000000000000000000000), .z ({n_889,
       n_888, n_887, n_886, n_885, n_884, n_883, n_882, n_881, n_880,
       n_879, n_878, n_877, n_876, n_875, n_874, n_873, n_872, n_871,
       n_870, n_869, n_868, n_867, n_866, n_865, n_864, n_863, n_862,
       n_861, n_860, n_859, n_858, n_857, n_856, n_855, n_854, n_853,
       n_851}));
  bmux_516 \mux_memory[13]_185_12 (.ctl (n_152), .in_0 (data_input),
       .in_1 (38'b00000000000000000000000000000000000000), .z ({n_934,
       n_933, n_932, n_931, n_930, n_929, n_928, n_927, n_926, n_925,
       n_924, n_923, n_922, n_921, n_920, n_919, n_918, n_917, n_916,
       n_915, n_914, n_913, n_912, n_911, n_910, n_909, n_908, n_907,
       n_906, n_905, n_904, n_903, n_902, n_901, n_900, n_899, n_898,
       n_896}));
  bmux_516 \mux_memory[14]_185_12 (.ctl (n_152), .in_0 (data_input),
       .in_1 (38'b00000000000000000000000000000000000000), .z ({n_979,
       n_978, n_977, n_976, n_975, n_974, n_973, n_972, n_971, n_970,
       n_969, n_968, n_967, n_966, n_965, n_964, n_963, n_962, n_961,
       n_960, n_959, n_958, n_957, n_956, n_955, n_954, n_953, n_952,
       n_951, n_950, n_949, n_948, n_947, n_946, n_945, n_944, n_943,
       n_941}));
  bmux_516 \mux_memory[15]_185_12 (.ctl (n_152), .in_0 (data_input),
       .in_1 (38'b00000000000000000000000000000000000000), .z ({n_1024,
       n_1023, n_1022, n_1021, n_1020, n_1019, n_1018, n_1017, n_1016,
       n_1015, n_1014, n_1013, n_1012, n_1011, n_1010, n_1009, n_1008,
       n_1007, n_1006, n_1005, n_1004, n_1003, n_1002, n_1001, n_1000,
       n_999, n_998, n_997, n_996, n_995, n_994, n_993, n_992, n_991,
       n_990, n_989, n_988, n_986}));
  bmux_623 \mux_memory[ptr_read]_195_22 (.ctl (ptr_read), .in_0
       ({\memory[0] [37], \memory[0] [36], \memory[0] [35],
       \memory[0] [34], \memory[0] [33], \memory[0] [32],
       \memory[0] [31], \memory[0] [30], \memory[0] [29],
       \memory[0] [28], \memory[0] [27], \memory[0] [26],
       \memory[0] [25], \memory[0] [24], \memory[0] [23],
       \memory[0] [22], \memory[0] [21], \memory[0] [20],
       \memory[0] [19], \memory[0] [18], \memory[0] [17],
       \memory[0] [16], \memory[0] [15], \memory[0] [14],
       \memory[0] [13], \memory[0] [12], \memory[0] [11],
       \memory[0] [10], \memory[0] [9], \memory[0] [8], \memory[0] [7],
       \memory[0] [6], \memory[0] [5], \memory[0] [4], \memory[0] [3],
       \memory[0] [2], \memory[0] [1], \memory[0] [0]}), .in_1
       ({\memory[1] [37], \memory[1] [36], \memory[1] [35],
       \memory[1] [34], \memory[1] [33], \memory[1] [32],
       \memory[1] [31], \memory[1] [30], \memory[1] [29],
       \memory[1] [28], \memory[1] [27], \memory[1] [26],
       \memory[1] [25], \memory[1] [24], \memory[1] [23],
       \memory[1] [22], \memory[1] [21], \memory[1] [20],
       \memory[1] [19], \memory[1] [18], \memory[1] [17],
       \memory[1] [16], \memory[1] [15], \memory[1] [14],
       \memory[1] [13], \memory[1] [12], \memory[1] [11],
       \memory[1] [10], \memory[1] [9], \memory[1] [8], \memory[1] [7],
       \memory[1] [6], \memory[1] [5], \memory[1] [4], \memory[1] [3],
       \memory[1] [2], \memory[1] [1], \memory[1] [0]}), .in_2
       ({\memory[2] [37], \memory[2] [36], \memory[2] [35],
       \memory[2] [34], \memory[2] [33], \memory[2] [32],
       \memory[2] [31], \memory[2] [30], \memory[2] [29],
       \memory[2] [28], \memory[2] [27], \memory[2] [26],
       \memory[2] [25], \memory[2] [24], \memory[2] [23],
       \memory[2] [22], \memory[2] [21], \memory[2] [20],
       \memory[2] [19], \memory[2] [18], \memory[2] [17],
       \memory[2] [16], \memory[2] [15], \memory[2] [14],
       \memory[2] [13], \memory[2] [12], \memory[2] [11],
       \memory[2] [10], \memory[2] [9], \memory[2] [8], \memory[2] [7],
       \memory[2] [6], \memory[2] [5], \memory[2] [4], \memory[2] [3],
       \memory[2] [2], \memory[2] [1], \memory[2] [0]}), .in_3
       ({\memory[3] [37], \memory[3] [36], \memory[3] [35],
       \memory[3] [34], \memory[3] [33], \memory[3] [32],
       \memory[3] [31], \memory[3] [30], \memory[3] [29],
       \memory[3] [28], \memory[3] [27], \memory[3] [26],
       \memory[3] [25], \memory[3] [24], \memory[3] [23],
       \memory[3] [22], \memory[3] [21], \memory[3] [20],
       \memory[3] [19], \memory[3] [18], \memory[3] [17],
       \memory[3] [16], \memory[3] [15], \memory[3] [14],
       \memory[3] [13], \memory[3] [12], \memory[3] [11],
       \memory[3] [10], \memory[3] [9], \memory[3] [8], \memory[3] [7],
       \memory[3] [6], \memory[3] [5], \memory[3] [4], \memory[3] [3],
       \memory[3] [2], \memory[3] [1], \memory[3] [0]}), .in_4
       ({\memory[4] [37], \memory[4] [36], \memory[4] [35],
       \memory[4] [34], \memory[4] [33], \memory[4] [32],
       \memory[4] [31], \memory[4] [30], \memory[4] [29],
       \memory[4] [28], \memory[4] [27], \memory[4] [26],
       \memory[4] [25], \memory[4] [24], \memory[4] [23],
       \memory[4] [22], \memory[4] [21], \memory[4] [20],
       \memory[4] [19], \memory[4] [18], \memory[4] [17],
       \memory[4] [16], \memory[4] [15], \memory[4] [14],
       \memory[4] [13], \memory[4] [12], \memory[4] [11],
       \memory[4] [10], \memory[4] [9], \memory[4] [8], \memory[4] [7],
       \memory[4] [6], \memory[4] [5], \memory[4] [4], \memory[4] [3],
       \memory[4] [2], \memory[4] [1], \memory[4] [0]}), .in_5
       ({\memory[5] [37], \memory[5] [36], \memory[5] [35],
       \memory[5] [34], \memory[5] [33], \memory[5] [32],
       \memory[5] [31], \memory[5] [30], \memory[5] [29],
       \memory[5] [28], \memory[5] [27], \memory[5] [26],
       \memory[5] [25], \memory[5] [24], \memory[5] [23],
       \memory[5] [22], \memory[5] [21], \memory[5] [20],
       \memory[5] [19], \memory[5] [18], \memory[5] [17],
       \memory[5] [16], \memory[5] [15], \memory[5] [14],
       \memory[5] [13], \memory[5] [12], \memory[5] [11],
       \memory[5] [10], \memory[5] [9], \memory[5] [8], \memory[5] [7],
       \memory[5] [6], \memory[5] [5], \memory[5] [4], \memory[5] [3],
       \memory[5] [2], \memory[5] [1], \memory[5] [0]}), .in_6
       ({\memory[6] [37], \memory[6] [36], \memory[6] [35],
       \memory[6] [34], \memory[6] [33], \memory[6] [32],
       \memory[6] [31], \memory[6] [30], \memory[6] [29],
       \memory[6] [28], \memory[6] [27], \memory[6] [26],
       \memory[6] [25], \memory[6] [24], \memory[6] [23],
       \memory[6] [22], \memory[6] [21], \memory[6] [20],
       \memory[6] [19], \memory[6] [18], \memory[6] [17],
       \memory[6] [16], \memory[6] [15], \memory[6] [14],
       \memory[6] [13], \memory[6] [12], \memory[6] [11],
       \memory[6] [10], \memory[6] [9], \memory[6] [8], \memory[6] [7],
       \memory[6] [6], \memory[6] [5], \memory[6] [4], \memory[6] [3],
       \memory[6] [2], \memory[6] [1], \memory[6] [0]}), .in_7
       ({\memory[7] [37], \memory[7] [36], \memory[7] [35],
       \memory[7] [34], \memory[7] [33], \memory[7] [32],
       \memory[7] [31], \memory[7] [30], \memory[7] [29],
       \memory[7] [28], \memory[7] [27], \memory[7] [26],
       \memory[7] [25], \memory[7] [24], \memory[7] [23],
       \memory[7] [22], \memory[7] [21], \memory[7] [20],
       \memory[7] [19], \memory[7] [18], \memory[7] [17],
       \memory[7] [16], \memory[7] [15], \memory[7] [14],
       \memory[7] [13], \memory[7] [12], \memory[7] [11],
       \memory[7] [10], \memory[7] [9], \memory[7] [8], \memory[7] [7],
       \memory[7] [6], \memory[7] [5], \memory[7] [4], \memory[7] [3],
       \memory[7] [2], \memory[7] [1], \memory[7] [0]}), .in_8
       ({\memory[8] [37], \memory[8] [36], \memory[8] [35],
       \memory[8] [34], \memory[8] [33], \memory[8] [32],
       \memory[8] [31], \memory[8] [30], \memory[8] [29],
       \memory[8] [28], \memory[8] [27], \memory[8] [26],
       \memory[8] [25], \memory[8] [24], \memory[8] [23],
       \memory[8] [22], \memory[8] [21], \memory[8] [20],
       \memory[8] [19], \memory[8] [18], \memory[8] [17],
       \memory[8] [16], \memory[8] [15], \memory[8] [14],
       \memory[8] [13], \memory[8] [12], \memory[8] [11],
       \memory[8] [10], \memory[8] [9], \memory[8] [8], \memory[8] [7],
       \memory[8] [6], \memory[8] [5], \memory[8] [4], \memory[8] [3],
       \memory[8] [2], \memory[8] [1], \memory[8] [0]}), .in_9
       ({\memory[9] [37], \memory[9] [36], \memory[9] [35],
       \memory[9] [34], \memory[9] [33], \memory[9] [32],
       \memory[9] [31], \memory[9] [30], \memory[9] [29],
       \memory[9] [28], \memory[9] [27], \memory[9] [26],
       \memory[9] [25], \memory[9] [24], \memory[9] [23],
       \memory[9] [22], \memory[9] [21], \memory[9] [20],
       \memory[9] [19], \memory[9] [18], \memory[9] [17],
       \memory[9] [16], \memory[9] [15], \memory[9] [14],
       \memory[9] [13], \memory[9] [12], \memory[9] [11],
       \memory[9] [10], \memory[9] [9], \memory[9] [8], \memory[9] [7],
       \memory[9] [6], \memory[9] [5], \memory[9] [4], \memory[9] [3],
       \memory[9] [2], \memory[9] [1], \memory[9] [0]}), .in_10
       ({\memory[10] [37], \memory[10] [36], \memory[10] [35],
       \memory[10] [34], \memory[10] [33], \memory[10] [32],
       \memory[10] [31], \memory[10] [30], \memory[10] [29],
       \memory[10] [28], \memory[10] [27], \memory[10] [26],
       \memory[10] [25], \memory[10] [24], \memory[10] [23],
       \memory[10] [22], \memory[10] [21], \memory[10] [20],
       \memory[10] [19], \memory[10] [18], \memory[10] [17],
       \memory[10] [16], \memory[10] [15], \memory[10] [14],
       \memory[10] [13], \memory[10] [12], \memory[10] [11],
       \memory[10] [10], \memory[10] [9], \memory[10] [8],
       \memory[10] [7], \memory[10] [6], \memory[10] [5],
       \memory[10] [4], \memory[10] [3], \memory[10] [2],
       \memory[10] [1], \memory[10] [0]}), .in_11 ({\memory[11] [37],
       \memory[11] [36], \memory[11] [35], \memory[11] [34],
       \memory[11] [33], \memory[11] [32], \memory[11] [31],
       \memory[11] [30], \memory[11] [29], \memory[11] [28],
       \memory[11] [27], \memory[11] [26], \memory[11] [25],
       \memory[11] [24], \memory[11] [23], \memory[11] [22],
       \memory[11] [21], \memory[11] [20], \memory[11] [19],
       \memory[11] [18], \memory[11] [17], \memory[11] [16],
       \memory[11] [15], \memory[11] [14], \memory[11] [13],
       \memory[11] [12], \memory[11] [11], \memory[11] [10],
       \memory[11] [9], \memory[11] [8], \memory[11] [7],
       \memory[11] [6], \memory[11] [5], \memory[11] [4],
       \memory[11] [3], \memory[11] [2], \memory[11] [1],
       \memory[11] [0]}), .in_12 ({\memory[12] [37], \memory[12] [36],
       \memory[12] [35], \memory[12] [34], \memory[12] [33],
       \memory[12] [32], \memory[12] [31], \memory[12] [30],
       \memory[12] [29], \memory[12] [28], \memory[12] [27],
       \memory[12] [26], \memory[12] [25], \memory[12] [24],
       \memory[12] [23], \memory[12] [22], \memory[12] [21],
       \memory[12] [20], \memory[12] [19], \memory[12] [18],
       \memory[12] [17], \memory[12] [16], \memory[12] [15],
       \memory[12] [14], \memory[12] [13], \memory[12] [12],
       \memory[12] [11], \memory[12] [10], \memory[12] [9],
       \memory[12] [8], \memory[12] [7], \memory[12] [6],
       \memory[12] [5], \memory[12] [4], \memory[12] [3],
       \memory[12] [2], \memory[12] [1], \memory[12] [0]}), .in_13
       ({\memory[13] [37], \memory[13] [36], \memory[13] [35],
       \memory[13] [34], \memory[13] [33], \memory[13] [32],
       \memory[13] [31], \memory[13] [30], \memory[13] [29],
       \memory[13] [28], \memory[13] [27], \memory[13] [26],
       \memory[13] [25], \memory[13] [24], \memory[13] [23],
       \memory[13] [22], \memory[13] [21], \memory[13] [20],
       \memory[13] [19], \memory[13] [18], \memory[13] [17],
       \memory[13] [16], \memory[13] [15], \memory[13] [14],
       \memory[13] [13], \memory[13] [12], \memory[13] [11],
       \memory[13] [10], \memory[13] [9], \memory[13] [8],
       \memory[13] [7], \memory[13] [6], \memory[13] [5],
       \memory[13] [4], \memory[13] [3], \memory[13] [2],
       \memory[13] [1], \memory[13] [0]}), .in_14 ({\memory[14] [37],
       \memory[14] [36], \memory[14] [35], \memory[14] [34],
       \memory[14] [33], \memory[14] [32], \memory[14] [31],
       \memory[14] [30], \memory[14] [29], \memory[14] [28],
       \memory[14] [27], \memory[14] [26], \memory[14] [25],
       \memory[14] [24], \memory[14] [23], \memory[14] [22],
       \memory[14] [21], \memory[14] [20], \memory[14] [19],
       \memory[14] [18], \memory[14] [17], \memory[14] [16],
       \memory[14] [15], \memory[14] [14], \memory[14] [13],
       \memory[14] [12], \memory[14] [11], \memory[14] [10],
       \memory[14] [9], \memory[14] [8], \memory[14] [7],
       \memory[14] [6], \memory[14] [5], \memory[14] [4],
       \memory[14] [3], \memory[14] [2], \memory[14] [1],
       \memory[14] [0]}), .in_15 ({\memory[15] [37], \memory[15] [36],
       \memory[15] [35], \memory[15] [34], \memory[15] [33],
       \memory[15] [32], \memory[15] [31], \memory[15] [30],
       \memory[15] [29], \memory[15] [28], \memory[15] [27],
       \memory[15] [26], \memory[15] [25], \memory[15] [24],
       \memory[15] [23], \memory[15] [22], \memory[15] [21],
       \memory[15] [20], \memory[15] [19], \memory[15] [18],
       \memory[15] [17], \memory[15] [16], \memory[15] [15],
       \memory[15] [14], \memory[15] [13], \memory[15] [12],
       \memory[15] [11], \memory[15] [10], \memory[15] [9],
       \memory[15] [8], \memory[15] [7], \memory[15] [6],
       \memory[15] [5], \memory[15] [4], \memory[15] [3],
       \memory[15] [2], \memory[15] [1], \memory[15] [0]}), .z
       ({\memory[ptr_read] [37], \memory[ptr_read] [36],
       \memory[ptr_read] [35], \memory[ptr_read] [34],
       \memory[ptr_read] [33], \memory[ptr_read] [32],
       \memory[ptr_read] [31], \memory[ptr_read] [30],
       \memory[ptr_read] [29], \memory[ptr_read] [28],
       \memory[ptr_read] [27], \memory[ptr_read] [26],
       \memory[ptr_read] [25], \memory[ptr_read] [24],
       \memory[ptr_read] [23], \memory[ptr_read] [22],
       \memory[ptr_read] [21], \memory[ptr_read] [20],
       \memory[ptr_read] [19], \memory[ptr_read] [18],
       \memory[ptr_read] [17], \memory[ptr_read] [16],
       \memory[ptr_read] [15], \memory[ptr_read] [14],
       \memory[ptr_read] [13], \memory[ptr_read] [12],
       \memory[ptr_read] [11], \memory[ptr_read] [10],
       \memory[ptr_read] [9], \memory[ptr_read] [8],
       \memory[ptr_read] [7], \memory[ptr_read] [6],
       \memory[ptr_read] [5], \memory[ptr_read] [4],
       \memory[ptr_read] [3], \memory[ptr_read] [2],
       \memory[ptr_read] [1], \memory[ptr_read] [0]}));
  bmux_516 mux_data_output_194_12(.ctl (n_152), .in_0
       ({\memory[ptr_read] [37], \memory[ptr_read] [36],
       \memory[ptr_read] [35], \memory[ptr_read] [34],
       \memory[ptr_read] [33], \memory[ptr_read] [32],
       \memory[ptr_read] [31], \memory[ptr_read] [30],
       \memory[ptr_read] [29], \memory[ptr_read] [28],
       \memory[ptr_read] [27], \memory[ptr_read] [26],
       \memory[ptr_read] [25], \memory[ptr_read] [24],
       \memory[ptr_read] [23], \memory[ptr_read] [22],
       \memory[ptr_read] [21], \memory[ptr_read] [20],
       \memory[ptr_read] [19], \memory[ptr_read] [18],
       \memory[ptr_read] [17], \memory[ptr_read] [16],
       \memory[ptr_read] [15], \memory[ptr_read] [14],
       \memory[ptr_read] [13], \memory[ptr_read] [12],
       \memory[ptr_read] [11], \memory[ptr_read] [10],
       \memory[ptr_read] [9], \memory[ptr_read] [8],
       \memory[ptr_read] [7], \memory[ptr_read] [6],
       \memory[ptr_read] [5], \memory[ptr_read] [4],
       \memory[ptr_read] [3], \memory[ptr_read] [2],
       \memory[ptr_read] [1], \memory[ptr_read] [0]}), .in_1
       (38'b00000001000000000000000000000000000000), .z
       ({UNCONNECTED1315, UNCONNECTED1314, UNCONNECTED1313,
       UNCONNECTED1312, UNCONNECTED1311, UNCONNECTED1310,
       UNCONNECTED1309, UNCONNECTED1308, UNCONNECTED1307,
       UNCONNECTED1306, UNCONNECTED1305, UNCONNECTED1304,
       UNCONNECTED1303, UNCONNECTED1302, UNCONNECTED1301,
       UNCONNECTED1300, UNCONNECTED1299, UNCONNECTED1298,
       UNCONNECTED1297, UNCONNECTED1296, UNCONNECTED1295,
       UNCONNECTED1294, UNCONNECTED1293, UNCONNECTED1292,
       UNCONNECTED1291, UNCONNECTED1290, UNCONNECTED1289,
       UNCONNECTED1288, UNCONNECTED1287, UNCONNECTED1286,
       UNCONNECTED1285, UNCONNECTED1284, UNCONNECTED1283,
       UNCONNECTED1282, UNCONNECTED1281, UNCONNECTED1280,
       UNCONNECTED1279, UNCONNECTED1278}));
  bmux mux_decode_signal_C_170_23(.ctl (n_227), .in_0 (1'b0), .in_1
       (1'b1), .z (n_280));
  bmux mux_decode_signal_C_169_21(.ctl (read_signal_C), .in_0 (1'b0),
       .in_1 (n_280), .z (n_281));
  bmux mux_decode_signal_C_165_14(.ctl (n_211), .in_0 (n_281), .in_1
       (1'b0), .z (UNCONNECTED1316));
  bmux mux_decode_signal_B_150_23(.ctl (n_198), .in_0 (1'b0), .in_1
       (1'b1), .z (n_282));
  bmux mux_decode_signal_B_149_21(.ctl (read_signal_B), .in_0 (1'b0),
       .in_1 (n_282), .z (n_283));
  bmux mux_decode_signal_B_145_14(.ctl (n_182), .in_0 (n_283), .in_1
       (1'b0), .z (UNCONNECTED1317));
  bmux mux_decode_signal_A_130_23(.ctl (n_169), .in_0 (1'b0), .in_1
       (1'b1), .z (n_284));
  bmux mux_decode_signal_A_129_21(.ctl (read_signal_A), .in_0 (1'b0),
       .in_1 (n_284), .z (n_285));
  bmux mux_decode_signal_A_125_14(.ctl (n_153), .in_0 (n_285), .in_1
       (1'b0), .z (UNCONNECTED1318));
  and g56 (n_310, n_304, n_152);
  or g60 (n_312, n_309, n_310);
  and g61 (n_355, n_350, n_152);
  or g65 (n_357, n_354, n_355);
  and g66 (n_400, n_395, n_152);
  or g70 (n_402, n_399, n_400);
  and g71 (n_445, n_440, n_152);
  or g75 (n_447, n_444, n_445);
  and g76 (n_490, n_485, n_152);
  or g80 (n_492, n_489, n_490);
  and g81 (n_535, n_530, n_152);
  or g85 (n_537, n_534, n_535);
  and g86 (n_580, n_575, n_152);
  or g90 (n_582, n_579, n_580);
  and g91 (n_625, n_620, n_152);
  or g95 (n_627, n_624, n_625);
  and g96 (n_670, n_665, n_152);
  or g100 (n_672, n_669, n_670);
  and g101 (n_715, n_710, n_152);
  or g105 (n_717, n_714, n_715);
  and g106 (n_760, n_755, n_152);
  or g110 (n_762, n_759, n_760);
  and g111 (n_805, n_800, n_152);
  or g115 (n_807, n_804, n_805);
  and g116 (n_850, n_845, n_152);
  or g120 (n_852, n_849, n_850);
  and g121 (n_895, n_890, n_152);
  or g125 (n_897, n_894, n_895);
  and g126 (n_940, n_935, n_152);
  or g130 (n_942, n_939, n_940);
  and g131 (n_985, n_980, n_152);
  or g135 (n_987, n_984, n_985);
  or g136 (full_signal_A, n_293, n_294);
  or g138 (full_signal_B, n_297, n_298);
  or g140 (full_signal_C, n_301, n_302);
  CDN_flop \ptr_write_A_reg[0] (.clk (CLK), .d (n_165), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_153), .srd (1'b0), .q
       (ptr_write_A[0]));
  CDN_flop \ptr_write_A_reg[1] (.clk (CLK), .d (n_166), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_153), .srd (1'b0), .q
       (ptr_write_A[1]));
  CDN_flop \ptr_write_A_reg[2] (.clk (CLK), .d (n_167), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_153), .srd (1'b0), .q
       (ptr_write_A[2]));
  CDN_flop \ptr_write_A_reg[3] (.clk (CLK), .d (n_168), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_153), .srd (1'b0), .q
       (ptr_write_A[3]));
  CDN_flop \ptr_write_B_reg[0] (.clk (CLK), .d (n_194), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_182), .srd (1'b0), .q
       (ptr_write_B[0]));
  CDN_flop \ptr_write_B_reg[1] (.clk (CLK), .d (n_195), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_182), .srd (1'b0), .q
       (ptr_write_B[1]));
  CDN_flop \ptr_write_B_reg[2] (.clk (CLK), .d (n_196), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_182), .srd (1'b0), .q
       (ptr_write_B[2]));
  CDN_flop \ptr_write_B_reg[3] (.clk (CLK), .d (n_197), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_182), .srd (1'b0), .q
       (ptr_write_B[3]));
  CDN_flop \ptr_write_C_reg[0] (.clk (CLK), .d (n_223), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_211), .srd (1'b0), .q
       (ptr_write_C[0]));
  CDN_flop \ptr_write_C_reg[1] (.clk (CLK), .d (n_224), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_211), .srd (1'b0), .q
       (ptr_write_C[1]));
  CDN_flop \ptr_write_C_reg[2] (.clk (CLK), .d (n_225), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_211), .srd (1'b0), .q
       (ptr_write_C[2]));
  CDN_flop \ptr_write_C_reg[3] (.clk (CLK), .d (n_226), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_211), .srd (1'b0), .q
       (ptr_write_C[3]));
  CDN_flop decode_signal_A_reg(.clk (CLK), .d (n_285), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_153), .srd (1'b0), .q
       (decode_signal_A));
  CDN_flop \ptr_read_A_reg[0] (.clk (CLK), .d (n_178), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_153), .srd (1'b0), .q
       (ptr_read_A[0]));
  CDN_flop \ptr_read_A_reg[1] (.clk (CLK), .d (n_179), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_153), .srd (1'b0), .q
       (ptr_read_A[1]));
  CDN_flop \ptr_read_A_reg[2] (.clk (CLK), .d (n_180), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_153), .srd (1'b0), .q
       (ptr_read_A[2]));
  CDN_flop \ptr_read_A_reg[3] (.clk (CLK), .d (n_181), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_153), .srd (1'b0), .q
       (ptr_read_A[3]));
  CDN_flop decode_signal_B_reg(.clk (CLK), .d (n_283), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_182), .srd (1'b0), .q
       (decode_signal_B));
  CDN_flop \ptr_read_B_reg[0] (.clk (CLK), .d (n_207), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_182), .srd (1'b0), .q
       (ptr_read_B[0]));
  CDN_flop \ptr_read_B_reg[1] (.clk (CLK), .d (n_208), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_182), .srd (1'b0), .q
       (ptr_read_B[1]));
  CDN_flop \ptr_read_B_reg[2] (.clk (CLK), .d (n_209), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_182), .srd (1'b0), .q
       (ptr_read_B[2]));
  CDN_flop \ptr_read_B_reg[3] (.clk (CLK), .d (n_210), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_182), .srd (1'b0), .q
       (ptr_read_B[3]));
  CDN_flop decode_signal_C_reg(.clk (CLK), .d (n_281), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_211), .srd (1'b0), .q
       (decode_signal_C));
  CDN_flop \ptr_read_C_reg[0] (.clk (CLK), .d (n_236), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_211), .srd (1'b0), .q
       (ptr_read_C[0]));
  CDN_flop \ptr_read_C_reg[1] (.clk (CLK), .d (n_237), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_211), .srd (1'b0), .q
       (ptr_read_C[1]));
  CDN_flop \ptr_read_C_reg[2] (.clk (CLK), .d (n_238), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_211), .srd (1'b0), .q
       (ptr_read_C[2]));
  CDN_flop \ptr_read_C_reg[3] (.clk (CLK), .d (n_239), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_211), .srd (1'b0), .q
       (ptr_read_C[3]));
  CDN_flop \memory_reg[0][0] (.clk (CLK), .d (n_311), .sena (n_312),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[0] [0]));
  CDN_flop \memory_reg[0][1] (.clk (CLK), .d (n_313), .sena (n_312),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[0] [1]));
  CDN_flop \memory_reg[0][2] (.clk (CLK), .d (n_314), .sena (n_312),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[0] [2]));
  CDN_flop \memory_reg[0][3] (.clk (CLK), .d (n_315), .sena (n_312),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[0] [3]));
  CDN_flop \memory_reg[0][4] (.clk (CLK), .d (n_316), .sena (n_312),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[0] [4]));
  CDN_flop \memory_reg[0][5] (.clk (CLK), .d (n_317), .sena (n_312),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[0] [5]));
  CDN_flop \memory_reg[0][6] (.clk (CLK), .d (n_318), .sena (n_312),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[0] [6]));
  CDN_flop \memory_reg[0][7] (.clk (CLK), .d (n_319), .sena (n_312),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[0] [7]));
  CDN_flop \memory_reg[0][8] (.clk (CLK), .d (n_320), .sena (n_312),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[0] [8]));
  CDN_flop \memory_reg[0][9] (.clk (CLK), .d (n_321), .sena (n_312),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[0] [9]));
  CDN_flop \memory_reg[0][10] (.clk (CLK), .d (n_322), .sena (n_312),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[0] [10]));
  CDN_flop \memory_reg[0][11] (.clk (CLK), .d (n_323), .sena (n_312),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[0] [11]));
  CDN_flop \memory_reg[0][12] (.clk (CLK), .d (n_324), .sena (n_312),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[0] [12]));
  CDN_flop \memory_reg[0][13] (.clk (CLK), .d (n_325), .sena (n_312),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[0] [13]));
  CDN_flop \memory_reg[0][14] (.clk (CLK), .d (n_326), .sena (n_312),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[0] [14]));
  CDN_flop \memory_reg[0][15] (.clk (CLK), .d (n_327), .sena (n_312),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[0] [15]));
  CDN_flop \memory_reg[0][16] (.clk (CLK), .d (n_328), .sena (n_312),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[0] [16]));
  CDN_flop \memory_reg[0][17] (.clk (CLK), .d (n_329), .sena (n_312),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[0] [17]));
  CDN_flop \memory_reg[0][18] (.clk (CLK), .d (n_330), .sena (n_312),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[0] [18]));
  CDN_flop \memory_reg[0][19] (.clk (CLK), .d (n_331), .sena (n_312),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[0] [19]));
  CDN_flop \memory_reg[0][20] (.clk (CLK), .d (n_332), .sena (n_312),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[0] [20]));
  CDN_flop \memory_reg[0][21] (.clk (CLK), .d (n_333), .sena (n_312),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[0] [21]));
  CDN_flop \memory_reg[0][22] (.clk (CLK), .d (n_334), .sena (n_312),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[0] [22]));
  CDN_flop \memory_reg[0][23] (.clk (CLK), .d (n_335), .sena (n_312),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[0] [23]));
  CDN_flop \memory_reg[0][24] (.clk (CLK), .d (n_336), .sena (n_312),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[0] [24]));
  CDN_flop \memory_reg[0][25] (.clk (CLK), .d (n_337), .sena (n_312),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[0] [25]));
  CDN_flop \memory_reg[0][26] (.clk (CLK), .d (n_338), .sena (n_312),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[0] [26]));
  CDN_flop \memory_reg[0][27] (.clk (CLK), .d (n_339), .sena (n_312),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[0] [27]));
  CDN_flop \memory_reg[0][28] (.clk (CLK), .d (n_340), .sena (n_312),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[0] [28]));
  CDN_flop \memory_reg[0][29] (.clk (CLK), .d (n_341), .sena (n_312),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[0] [29]));
  CDN_flop \memory_reg[0][30] (.clk (CLK), .d (n_342), .sena (n_312),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[0] [30]));
  CDN_flop \memory_reg[0][31] (.clk (CLK), .d (n_343), .sena (n_312),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[0] [31]));
  CDN_flop \memory_reg[0][32] (.clk (CLK), .d (n_344), .sena (n_312),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[0] [32]));
  CDN_flop \memory_reg[0][33] (.clk (CLK), .d (n_345), .sena (n_312),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[0] [33]));
  CDN_flop \memory_reg[0][34] (.clk (CLK), .d (n_346), .sena (n_312),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[0] [34]));
  CDN_flop \memory_reg[0][35] (.clk (CLK), .d (n_347), .sena (n_312),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[0] [35]));
  CDN_flop \memory_reg[0][36] (.clk (CLK), .d (n_348), .sena (n_312),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[0] [36]));
  CDN_flop \memory_reg[0][37] (.clk (CLK), .d (n_349), .sena (n_312),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[0] [37]));
  CDN_flop \memory_reg[1][0] (.clk (CLK), .d (n_356), .sena (n_357),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[1] [0]));
  CDN_flop \memory_reg[1][1] (.clk (CLK), .d (n_358), .sena (n_357),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[1] [1]));
  CDN_flop \memory_reg[1][2] (.clk (CLK), .d (n_359), .sena (n_357),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[1] [2]));
  CDN_flop \memory_reg[1][3] (.clk (CLK), .d (n_360), .sena (n_357),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[1] [3]));
  CDN_flop \memory_reg[1][4] (.clk (CLK), .d (n_361), .sena (n_357),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[1] [4]));
  CDN_flop \memory_reg[1][5] (.clk (CLK), .d (n_362), .sena (n_357),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[1] [5]));
  CDN_flop \memory_reg[1][6] (.clk (CLK), .d (n_363), .sena (n_357),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[1] [6]));
  CDN_flop \memory_reg[1][7] (.clk (CLK), .d (n_364), .sena (n_357),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[1] [7]));
  CDN_flop \memory_reg[1][8] (.clk (CLK), .d (n_365), .sena (n_357),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[1] [8]));
  CDN_flop \memory_reg[1][9] (.clk (CLK), .d (n_366), .sena (n_357),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[1] [9]));
  CDN_flop \memory_reg[1][10] (.clk (CLK), .d (n_367), .sena (n_357),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[1] [10]));
  CDN_flop \memory_reg[1][11] (.clk (CLK), .d (n_368), .sena (n_357),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[1] [11]));
  CDN_flop \memory_reg[1][12] (.clk (CLK), .d (n_369), .sena (n_357),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[1] [12]));
  CDN_flop \memory_reg[1][13] (.clk (CLK), .d (n_370), .sena (n_357),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[1] [13]));
  CDN_flop \memory_reg[1][14] (.clk (CLK), .d (n_371), .sena (n_357),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[1] [14]));
  CDN_flop \memory_reg[1][15] (.clk (CLK), .d (n_372), .sena (n_357),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[1] [15]));
  CDN_flop \memory_reg[1][16] (.clk (CLK), .d (n_373), .sena (n_357),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[1] [16]));
  CDN_flop \memory_reg[1][17] (.clk (CLK), .d (n_374), .sena (n_357),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[1] [17]));
  CDN_flop \memory_reg[1][18] (.clk (CLK), .d (n_375), .sena (n_357),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[1] [18]));
  CDN_flop \memory_reg[1][19] (.clk (CLK), .d (n_376), .sena (n_357),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[1] [19]));
  CDN_flop \memory_reg[1][20] (.clk (CLK), .d (n_377), .sena (n_357),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[1] [20]));
  CDN_flop \memory_reg[1][21] (.clk (CLK), .d (n_378), .sena (n_357),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[1] [21]));
  CDN_flop \memory_reg[1][22] (.clk (CLK), .d (n_379), .sena (n_357),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[1] [22]));
  CDN_flop \memory_reg[1][23] (.clk (CLK), .d (n_380), .sena (n_357),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[1] [23]));
  CDN_flop \memory_reg[1][24] (.clk (CLK), .d (n_381), .sena (n_357),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[1] [24]));
  CDN_flop \memory_reg[1][25] (.clk (CLK), .d (n_382), .sena (n_357),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[1] [25]));
  CDN_flop \memory_reg[1][26] (.clk (CLK), .d (n_383), .sena (n_357),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[1] [26]));
  CDN_flop \memory_reg[1][27] (.clk (CLK), .d (n_384), .sena (n_357),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[1] [27]));
  CDN_flop \memory_reg[1][28] (.clk (CLK), .d (n_385), .sena (n_357),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[1] [28]));
  CDN_flop \memory_reg[1][29] (.clk (CLK), .d (n_386), .sena (n_357),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[1] [29]));
  CDN_flop \memory_reg[1][30] (.clk (CLK), .d (n_387), .sena (n_357),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[1] [30]));
  CDN_flop \memory_reg[1][31] (.clk (CLK), .d (n_388), .sena (n_357),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[1] [31]));
  CDN_flop \memory_reg[1][32] (.clk (CLK), .d (n_389), .sena (n_357),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[1] [32]));
  CDN_flop \memory_reg[1][33] (.clk (CLK), .d (n_390), .sena (n_357),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[1] [33]));
  CDN_flop \memory_reg[1][34] (.clk (CLK), .d (n_391), .sena (n_357),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[1] [34]));
  CDN_flop \memory_reg[1][35] (.clk (CLK), .d (n_392), .sena (n_357),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[1] [35]));
  CDN_flop \memory_reg[1][36] (.clk (CLK), .d (n_393), .sena (n_357),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[1] [36]));
  CDN_flop \memory_reg[1][37] (.clk (CLK), .d (n_394), .sena (n_357),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[1] [37]));
  CDN_flop \memory_reg[2][0] (.clk (CLK), .d (n_401), .sena (n_402),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[2] [0]));
  CDN_flop \memory_reg[2][1] (.clk (CLK), .d (n_403), .sena (n_402),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[2] [1]));
  CDN_flop \memory_reg[2][2] (.clk (CLK), .d (n_404), .sena (n_402),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[2] [2]));
  CDN_flop \memory_reg[2][3] (.clk (CLK), .d (n_405), .sena (n_402),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[2] [3]));
  CDN_flop \memory_reg[2][4] (.clk (CLK), .d (n_406), .sena (n_402),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[2] [4]));
  CDN_flop \memory_reg[2][5] (.clk (CLK), .d (n_407), .sena (n_402),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[2] [5]));
  CDN_flop \memory_reg[2][6] (.clk (CLK), .d (n_408), .sena (n_402),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[2] [6]));
  CDN_flop \memory_reg[2][7] (.clk (CLK), .d (n_409), .sena (n_402),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[2] [7]));
  CDN_flop \memory_reg[2][8] (.clk (CLK), .d (n_410), .sena (n_402),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[2] [8]));
  CDN_flop \memory_reg[2][9] (.clk (CLK), .d (n_411), .sena (n_402),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[2] [9]));
  CDN_flop \memory_reg[2][10] (.clk (CLK), .d (n_412), .sena (n_402),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[2] [10]));
  CDN_flop \memory_reg[2][11] (.clk (CLK), .d (n_413), .sena (n_402),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[2] [11]));
  CDN_flop \memory_reg[2][12] (.clk (CLK), .d (n_414), .sena (n_402),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[2] [12]));
  CDN_flop \memory_reg[2][13] (.clk (CLK), .d (n_415), .sena (n_402),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[2] [13]));
  CDN_flop \memory_reg[2][14] (.clk (CLK), .d (n_416), .sena (n_402),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[2] [14]));
  CDN_flop \memory_reg[2][15] (.clk (CLK), .d (n_417), .sena (n_402),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[2] [15]));
  CDN_flop \memory_reg[2][16] (.clk (CLK), .d (n_418), .sena (n_402),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[2] [16]));
  CDN_flop \memory_reg[2][17] (.clk (CLK), .d (n_419), .sena (n_402),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[2] [17]));
  CDN_flop \memory_reg[2][18] (.clk (CLK), .d (n_420), .sena (n_402),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[2] [18]));
  CDN_flop \memory_reg[2][19] (.clk (CLK), .d (n_421), .sena (n_402),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[2] [19]));
  CDN_flop \memory_reg[2][20] (.clk (CLK), .d (n_422), .sena (n_402),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[2] [20]));
  CDN_flop \memory_reg[2][21] (.clk (CLK), .d (n_423), .sena (n_402),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[2] [21]));
  CDN_flop \memory_reg[2][22] (.clk (CLK), .d (n_424), .sena (n_402),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[2] [22]));
  CDN_flop \memory_reg[2][23] (.clk (CLK), .d (n_425), .sena (n_402),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[2] [23]));
  CDN_flop \memory_reg[2][24] (.clk (CLK), .d (n_426), .sena (n_402),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[2] [24]));
  CDN_flop \memory_reg[2][25] (.clk (CLK), .d (n_427), .sena (n_402),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[2] [25]));
  CDN_flop \memory_reg[2][26] (.clk (CLK), .d (n_428), .sena (n_402),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[2] [26]));
  CDN_flop \memory_reg[2][27] (.clk (CLK), .d (n_429), .sena (n_402),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[2] [27]));
  CDN_flop \memory_reg[2][28] (.clk (CLK), .d (n_430), .sena (n_402),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[2] [28]));
  CDN_flop \memory_reg[2][29] (.clk (CLK), .d (n_431), .sena (n_402),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[2] [29]));
  CDN_flop \memory_reg[2][30] (.clk (CLK), .d (n_432), .sena (n_402),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[2] [30]));
  CDN_flop \memory_reg[2][31] (.clk (CLK), .d (n_433), .sena (n_402),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[2] [31]));
  CDN_flop \memory_reg[2][32] (.clk (CLK), .d (n_434), .sena (n_402),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[2] [32]));
  CDN_flop \memory_reg[2][33] (.clk (CLK), .d (n_435), .sena (n_402),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[2] [33]));
  CDN_flop \memory_reg[2][34] (.clk (CLK), .d (n_436), .sena (n_402),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[2] [34]));
  CDN_flop \memory_reg[2][35] (.clk (CLK), .d (n_437), .sena (n_402),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[2] [35]));
  CDN_flop \memory_reg[2][36] (.clk (CLK), .d (n_438), .sena (n_402),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[2] [36]));
  CDN_flop \memory_reg[2][37] (.clk (CLK), .d (n_439), .sena (n_402),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[2] [37]));
  CDN_flop \memory_reg[3][0] (.clk (CLK), .d (n_446), .sena (n_447),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[3] [0]));
  CDN_flop \memory_reg[3][1] (.clk (CLK), .d (n_448), .sena (n_447),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[3] [1]));
  CDN_flop \memory_reg[3][2] (.clk (CLK), .d (n_449), .sena (n_447),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[3] [2]));
  CDN_flop \memory_reg[3][3] (.clk (CLK), .d (n_450), .sena (n_447),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[3] [3]));
  CDN_flop \memory_reg[3][4] (.clk (CLK), .d (n_451), .sena (n_447),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[3] [4]));
  CDN_flop \memory_reg[3][5] (.clk (CLK), .d (n_452), .sena (n_447),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[3] [5]));
  CDN_flop \memory_reg[3][6] (.clk (CLK), .d (n_453), .sena (n_447),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[3] [6]));
  CDN_flop \memory_reg[3][7] (.clk (CLK), .d (n_454), .sena (n_447),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[3] [7]));
  CDN_flop \memory_reg[3][8] (.clk (CLK), .d (n_455), .sena (n_447),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[3] [8]));
  CDN_flop \memory_reg[3][9] (.clk (CLK), .d (n_456), .sena (n_447),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[3] [9]));
  CDN_flop \memory_reg[3][10] (.clk (CLK), .d (n_457), .sena (n_447),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[3] [10]));
  CDN_flop \memory_reg[3][11] (.clk (CLK), .d (n_458), .sena (n_447),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[3] [11]));
  CDN_flop \memory_reg[3][12] (.clk (CLK), .d (n_459), .sena (n_447),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[3] [12]));
  CDN_flop \memory_reg[3][13] (.clk (CLK), .d (n_460), .sena (n_447),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[3] [13]));
  CDN_flop \memory_reg[3][14] (.clk (CLK), .d (n_461), .sena (n_447),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[3] [14]));
  CDN_flop \memory_reg[3][15] (.clk (CLK), .d (n_462), .sena (n_447),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[3] [15]));
  CDN_flop \memory_reg[3][16] (.clk (CLK), .d (n_463), .sena (n_447),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[3] [16]));
  CDN_flop \memory_reg[3][17] (.clk (CLK), .d (n_464), .sena (n_447),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[3] [17]));
  CDN_flop \memory_reg[3][18] (.clk (CLK), .d (n_465), .sena (n_447),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[3] [18]));
  CDN_flop \memory_reg[3][19] (.clk (CLK), .d (n_466), .sena (n_447),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[3] [19]));
  CDN_flop \memory_reg[3][20] (.clk (CLK), .d (n_467), .sena (n_447),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[3] [20]));
  CDN_flop \memory_reg[3][21] (.clk (CLK), .d (n_468), .sena (n_447),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[3] [21]));
  CDN_flop \memory_reg[3][22] (.clk (CLK), .d (n_469), .sena (n_447),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[3] [22]));
  CDN_flop \memory_reg[3][23] (.clk (CLK), .d (n_470), .sena (n_447),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[3] [23]));
  CDN_flop \memory_reg[3][24] (.clk (CLK), .d (n_471), .sena (n_447),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[3] [24]));
  CDN_flop \memory_reg[3][25] (.clk (CLK), .d (n_472), .sena (n_447),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[3] [25]));
  CDN_flop \memory_reg[3][26] (.clk (CLK), .d (n_473), .sena (n_447),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[3] [26]));
  CDN_flop \memory_reg[3][27] (.clk (CLK), .d (n_474), .sena (n_447),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[3] [27]));
  CDN_flop \memory_reg[3][28] (.clk (CLK), .d (n_475), .sena (n_447),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[3] [28]));
  CDN_flop \memory_reg[3][29] (.clk (CLK), .d (n_476), .sena (n_447),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[3] [29]));
  CDN_flop \memory_reg[3][30] (.clk (CLK), .d (n_477), .sena (n_447),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[3] [30]));
  CDN_flop \memory_reg[3][31] (.clk (CLK), .d (n_478), .sena (n_447),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[3] [31]));
  CDN_flop \memory_reg[3][32] (.clk (CLK), .d (n_479), .sena (n_447),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[3] [32]));
  CDN_flop \memory_reg[3][33] (.clk (CLK), .d (n_480), .sena (n_447),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[3] [33]));
  CDN_flop \memory_reg[3][34] (.clk (CLK), .d (n_481), .sena (n_447),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[3] [34]));
  CDN_flop \memory_reg[3][35] (.clk (CLK), .d (n_482), .sena (n_447),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[3] [35]));
  CDN_flop \memory_reg[3][36] (.clk (CLK), .d (n_483), .sena (n_447),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[3] [36]));
  CDN_flop \memory_reg[3][37] (.clk (CLK), .d (n_484), .sena (n_447),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[3] [37]));
  CDN_flop \memory_reg[4][0] (.clk (CLK), .d (n_491), .sena (n_492),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[4] [0]));
  CDN_flop \memory_reg[4][1] (.clk (CLK), .d (n_493), .sena (n_492),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[4] [1]));
  CDN_flop \memory_reg[4][2] (.clk (CLK), .d (n_494), .sena (n_492),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[4] [2]));
  CDN_flop \memory_reg[4][3] (.clk (CLK), .d (n_495), .sena (n_492),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[4] [3]));
  CDN_flop \memory_reg[4][4] (.clk (CLK), .d (n_496), .sena (n_492),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[4] [4]));
  CDN_flop \memory_reg[4][5] (.clk (CLK), .d (n_497), .sena (n_492),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[4] [5]));
  CDN_flop \memory_reg[4][6] (.clk (CLK), .d (n_498), .sena (n_492),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[4] [6]));
  CDN_flop \memory_reg[4][7] (.clk (CLK), .d (n_499), .sena (n_492),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[4] [7]));
  CDN_flop \memory_reg[4][8] (.clk (CLK), .d (n_500), .sena (n_492),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[4] [8]));
  CDN_flop \memory_reg[4][9] (.clk (CLK), .d (n_501), .sena (n_492),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[4] [9]));
  CDN_flop \memory_reg[4][10] (.clk (CLK), .d (n_502), .sena (n_492),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[4] [10]));
  CDN_flop \memory_reg[4][11] (.clk (CLK), .d (n_503), .sena (n_492),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[4] [11]));
  CDN_flop \memory_reg[4][12] (.clk (CLK), .d (n_504), .sena (n_492),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[4] [12]));
  CDN_flop \memory_reg[4][13] (.clk (CLK), .d (n_505), .sena (n_492),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[4] [13]));
  CDN_flop \memory_reg[4][14] (.clk (CLK), .d (n_506), .sena (n_492),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[4] [14]));
  CDN_flop \memory_reg[4][15] (.clk (CLK), .d (n_507), .sena (n_492),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[4] [15]));
  CDN_flop \memory_reg[4][16] (.clk (CLK), .d (n_508), .sena (n_492),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[4] [16]));
  CDN_flop \memory_reg[4][17] (.clk (CLK), .d (n_509), .sena (n_492),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[4] [17]));
  CDN_flop \memory_reg[4][18] (.clk (CLK), .d (n_510), .sena (n_492),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[4] [18]));
  CDN_flop \memory_reg[4][19] (.clk (CLK), .d (n_511), .sena (n_492),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[4] [19]));
  CDN_flop \memory_reg[4][20] (.clk (CLK), .d (n_512), .sena (n_492),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[4] [20]));
  CDN_flop \memory_reg[4][21] (.clk (CLK), .d (n_513), .sena (n_492),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[4] [21]));
  CDN_flop \memory_reg[4][22] (.clk (CLK), .d (n_514), .sena (n_492),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[4] [22]));
  CDN_flop \memory_reg[4][23] (.clk (CLK), .d (n_515), .sena (n_492),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[4] [23]));
  CDN_flop \memory_reg[4][24] (.clk (CLK), .d (n_516), .sena (n_492),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[4] [24]));
  CDN_flop \memory_reg[4][25] (.clk (CLK), .d (n_517), .sena (n_492),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[4] [25]));
  CDN_flop \memory_reg[4][26] (.clk (CLK), .d (n_518), .sena (n_492),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[4] [26]));
  CDN_flop \memory_reg[4][27] (.clk (CLK), .d (n_519), .sena (n_492),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[4] [27]));
  CDN_flop \memory_reg[4][28] (.clk (CLK), .d (n_520), .sena (n_492),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[4] [28]));
  CDN_flop \memory_reg[4][29] (.clk (CLK), .d (n_521), .sena (n_492),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[4] [29]));
  CDN_flop \memory_reg[4][30] (.clk (CLK), .d (n_522), .sena (n_492),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[4] [30]));
  CDN_flop \memory_reg[4][31] (.clk (CLK), .d (n_523), .sena (n_492),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[4] [31]));
  CDN_flop \memory_reg[4][32] (.clk (CLK), .d (n_524), .sena (n_492),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[4] [32]));
  CDN_flop \memory_reg[4][33] (.clk (CLK), .d (n_525), .sena (n_492),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[4] [33]));
  CDN_flop \memory_reg[4][34] (.clk (CLK), .d (n_526), .sena (n_492),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[4] [34]));
  CDN_flop \memory_reg[4][35] (.clk (CLK), .d (n_527), .sena (n_492),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[4] [35]));
  CDN_flop \memory_reg[4][36] (.clk (CLK), .d (n_528), .sena (n_492),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[4] [36]));
  CDN_flop \memory_reg[4][37] (.clk (CLK), .d (n_529), .sena (n_492),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[4] [37]));
  CDN_flop \memory_reg[5][0] (.clk (CLK), .d (n_536), .sena (n_537),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[5] [0]));
  CDN_flop \memory_reg[5][1] (.clk (CLK), .d (n_538), .sena (n_537),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[5] [1]));
  CDN_flop \memory_reg[5][2] (.clk (CLK), .d (n_539), .sena (n_537),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[5] [2]));
  CDN_flop \memory_reg[5][3] (.clk (CLK), .d (n_540), .sena (n_537),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[5] [3]));
  CDN_flop \memory_reg[5][4] (.clk (CLK), .d (n_541), .sena (n_537),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[5] [4]));
  CDN_flop \memory_reg[5][5] (.clk (CLK), .d (n_542), .sena (n_537),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[5] [5]));
  CDN_flop \memory_reg[5][6] (.clk (CLK), .d (n_543), .sena (n_537),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[5] [6]));
  CDN_flop \memory_reg[5][7] (.clk (CLK), .d (n_544), .sena (n_537),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[5] [7]));
  CDN_flop \memory_reg[5][8] (.clk (CLK), .d (n_545), .sena (n_537),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[5] [8]));
  CDN_flop \memory_reg[5][9] (.clk (CLK), .d (n_546), .sena (n_537),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[5] [9]));
  CDN_flop \memory_reg[5][10] (.clk (CLK), .d (n_547), .sena (n_537),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[5] [10]));
  CDN_flop \memory_reg[5][11] (.clk (CLK), .d (n_548), .sena (n_537),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[5] [11]));
  CDN_flop \memory_reg[5][12] (.clk (CLK), .d (n_549), .sena (n_537),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[5] [12]));
  CDN_flop \memory_reg[5][13] (.clk (CLK), .d (n_550), .sena (n_537),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[5] [13]));
  CDN_flop \memory_reg[5][14] (.clk (CLK), .d (n_551), .sena (n_537),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[5] [14]));
  CDN_flop \memory_reg[5][15] (.clk (CLK), .d (n_552), .sena (n_537),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[5] [15]));
  CDN_flop \memory_reg[5][16] (.clk (CLK), .d (n_553), .sena (n_537),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[5] [16]));
  CDN_flop \memory_reg[5][17] (.clk (CLK), .d (n_554), .sena (n_537),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[5] [17]));
  CDN_flop \memory_reg[5][18] (.clk (CLK), .d (n_555), .sena (n_537),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[5] [18]));
  CDN_flop \memory_reg[5][19] (.clk (CLK), .d (n_556), .sena (n_537),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[5] [19]));
  CDN_flop \memory_reg[5][20] (.clk (CLK), .d (n_557), .sena (n_537),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[5] [20]));
  CDN_flop \memory_reg[5][21] (.clk (CLK), .d (n_558), .sena (n_537),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[5] [21]));
  CDN_flop \memory_reg[5][22] (.clk (CLK), .d (n_559), .sena (n_537),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[5] [22]));
  CDN_flop \memory_reg[5][23] (.clk (CLK), .d (n_560), .sena (n_537),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[5] [23]));
  CDN_flop \memory_reg[5][24] (.clk (CLK), .d (n_561), .sena (n_537),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[5] [24]));
  CDN_flop \memory_reg[5][25] (.clk (CLK), .d (n_562), .sena (n_537),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[5] [25]));
  CDN_flop \memory_reg[5][26] (.clk (CLK), .d (n_563), .sena (n_537),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[5] [26]));
  CDN_flop \memory_reg[5][27] (.clk (CLK), .d (n_564), .sena (n_537),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[5] [27]));
  CDN_flop \memory_reg[5][28] (.clk (CLK), .d (n_565), .sena (n_537),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[5] [28]));
  CDN_flop \memory_reg[5][29] (.clk (CLK), .d (n_566), .sena (n_537),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[5] [29]));
  CDN_flop \memory_reg[5][30] (.clk (CLK), .d (n_567), .sena (n_537),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[5] [30]));
  CDN_flop \memory_reg[5][31] (.clk (CLK), .d (n_568), .sena (n_537),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[5] [31]));
  CDN_flop \memory_reg[5][32] (.clk (CLK), .d (n_569), .sena (n_537),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[5] [32]));
  CDN_flop \memory_reg[5][33] (.clk (CLK), .d (n_570), .sena (n_537),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[5] [33]));
  CDN_flop \memory_reg[5][34] (.clk (CLK), .d (n_571), .sena (n_537),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[5] [34]));
  CDN_flop \memory_reg[5][35] (.clk (CLK), .d (n_572), .sena (n_537),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[5] [35]));
  CDN_flop \memory_reg[5][36] (.clk (CLK), .d (n_573), .sena (n_537),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[5] [36]));
  CDN_flop \memory_reg[5][37] (.clk (CLK), .d (n_574), .sena (n_537),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[5] [37]));
  CDN_flop \memory_reg[6][0] (.clk (CLK), .d (n_581), .sena (n_582),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[6] [0]));
  CDN_flop \memory_reg[6][1] (.clk (CLK), .d (n_583), .sena (n_582),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[6] [1]));
  CDN_flop \memory_reg[6][2] (.clk (CLK), .d (n_584), .sena (n_582),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[6] [2]));
  CDN_flop \memory_reg[6][3] (.clk (CLK), .d (n_585), .sena (n_582),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[6] [3]));
  CDN_flop \memory_reg[6][4] (.clk (CLK), .d (n_586), .sena (n_582),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[6] [4]));
  CDN_flop \memory_reg[6][5] (.clk (CLK), .d (n_587), .sena (n_582),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[6] [5]));
  CDN_flop \memory_reg[6][6] (.clk (CLK), .d (n_588), .sena (n_582),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[6] [6]));
  CDN_flop \memory_reg[6][7] (.clk (CLK), .d (n_589), .sena (n_582),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[6] [7]));
  CDN_flop \memory_reg[6][8] (.clk (CLK), .d (n_590), .sena (n_582),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[6] [8]));
  CDN_flop \memory_reg[6][9] (.clk (CLK), .d (n_591), .sena (n_582),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[6] [9]));
  CDN_flop \memory_reg[6][10] (.clk (CLK), .d (n_592), .sena (n_582),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[6] [10]));
  CDN_flop \memory_reg[6][11] (.clk (CLK), .d (n_593), .sena (n_582),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[6] [11]));
  CDN_flop \memory_reg[6][12] (.clk (CLK), .d (n_594), .sena (n_582),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[6] [12]));
  CDN_flop \memory_reg[6][13] (.clk (CLK), .d (n_595), .sena (n_582),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[6] [13]));
  CDN_flop \memory_reg[6][14] (.clk (CLK), .d (n_596), .sena (n_582),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[6] [14]));
  CDN_flop \memory_reg[6][15] (.clk (CLK), .d (n_597), .sena (n_582),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[6] [15]));
  CDN_flop \memory_reg[6][16] (.clk (CLK), .d (n_598), .sena (n_582),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[6] [16]));
  CDN_flop \memory_reg[6][17] (.clk (CLK), .d (n_599), .sena (n_582),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[6] [17]));
  CDN_flop \memory_reg[6][18] (.clk (CLK), .d (n_600), .sena (n_582),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[6] [18]));
  CDN_flop \memory_reg[6][19] (.clk (CLK), .d (n_601), .sena (n_582),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[6] [19]));
  CDN_flop \memory_reg[6][20] (.clk (CLK), .d (n_602), .sena (n_582),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[6] [20]));
  CDN_flop \memory_reg[6][21] (.clk (CLK), .d (n_603), .sena (n_582),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[6] [21]));
  CDN_flop \memory_reg[6][22] (.clk (CLK), .d (n_604), .sena (n_582),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[6] [22]));
  CDN_flop \memory_reg[6][23] (.clk (CLK), .d (n_605), .sena (n_582),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[6] [23]));
  CDN_flop \memory_reg[6][24] (.clk (CLK), .d (n_606), .sena (n_582),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[6] [24]));
  CDN_flop \memory_reg[6][25] (.clk (CLK), .d (n_607), .sena (n_582),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[6] [25]));
  CDN_flop \memory_reg[6][26] (.clk (CLK), .d (n_608), .sena (n_582),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[6] [26]));
  CDN_flop \memory_reg[6][27] (.clk (CLK), .d (n_609), .sena (n_582),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[6] [27]));
  CDN_flop \memory_reg[6][28] (.clk (CLK), .d (n_610), .sena (n_582),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[6] [28]));
  CDN_flop \memory_reg[6][29] (.clk (CLK), .d (n_611), .sena (n_582),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[6] [29]));
  CDN_flop \memory_reg[6][30] (.clk (CLK), .d (n_612), .sena (n_582),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[6] [30]));
  CDN_flop \memory_reg[6][31] (.clk (CLK), .d (n_613), .sena (n_582),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[6] [31]));
  CDN_flop \memory_reg[6][32] (.clk (CLK), .d (n_614), .sena (n_582),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[6] [32]));
  CDN_flop \memory_reg[6][33] (.clk (CLK), .d (n_615), .sena (n_582),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[6] [33]));
  CDN_flop \memory_reg[6][34] (.clk (CLK), .d (n_616), .sena (n_582),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[6] [34]));
  CDN_flop \memory_reg[6][35] (.clk (CLK), .d (n_617), .sena (n_582),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[6] [35]));
  CDN_flop \memory_reg[6][36] (.clk (CLK), .d (n_618), .sena (n_582),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[6] [36]));
  CDN_flop \memory_reg[6][37] (.clk (CLK), .d (n_619), .sena (n_582),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[6] [37]));
  CDN_flop \memory_reg[7][0] (.clk (CLK), .d (n_626), .sena (n_627),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[7] [0]));
  CDN_flop \memory_reg[7][1] (.clk (CLK), .d (n_628), .sena (n_627),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[7] [1]));
  CDN_flop \memory_reg[7][2] (.clk (CLK), .d (n_629), .sena (n_627),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[7] [2]));
  CDN_flop \memory_reg[7][3] (.clk (CLK), .d (n_630), .sena (n_627),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[7] [3]));
  CDN_flop \memory_reg[7][4] (.clk (CLK), .d (n_631), .sena (n_627),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[7] [4]));
  CDN_flop \memory_reg[7][5] (.clk (CLK), .d (n_632), .sena (n_627),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[7] [5]));
  CDN_flop \memory_reg[7][6] (.clk (CLK), .d (n_633), .sena (n_627),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[7] [6]));
  CDN_flop \memory_reg[7][7] (.clk (CLK), .d (n_634), .sena (n_627),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[7] [7]));
  CDN_flop \memory_reg[7][8] (.clk (CLK), .d (n_635), .sena (n_627),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[7] [8]));
  CDN_flop \memory_reg[7][9] (.clk (CLK), .d (n_636), .sena (n_627),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[7] [9]));
  CDN_flop \memory_reg[7][10] (.clk (CLK), .d (n_637), .sena (n_627),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[7] [10]));
  CDN_flop \memory_reg[7][11] (.clk (CLK), .d (n_638), .sena (n_627),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[7] [11]));
  CDN_flop \memory_reg[7][12] (.clk (CLK), .d (n_639), .sena (n_627),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[7] [12]));
  CDN_flop \memory_reg[7][13] (.clk (CLK), .d (n_640), .sena (n_627),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[7] [13]));
  CDN_flop \memory_reg[7][14] (.clk (CLK), .d (n_641), .sena (n_627),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[7] [14]));
  CDN_flop \memory_reg[7][15] (.clk (CLK), .d (n_642), .sena (n_627),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[7] [15]));
  CDN_flop \memory_reg[7][16] (.clk (CLK), .d (n_643), .sena (n_627),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[7] [16]));
  CDN_flop \memory_reg[7][17] (.clk (CLK), .d (n_644), .sena (n_627),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[7] [17]));
  CDN_flop \memory_reg[7][18] (.clk (CLK), .d (n_645), .sena (n_627),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[7] [18]));
  CDN_flop \memory_reg[7][19] (.clk (CLK), .d (n_646), .sena (n_627),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[7] [19]));
  CDN_flop \memory_reg[7][20] (.clk (CLK), .d (n_647), .sena (n_627),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[7] [20]));
  CDN_flop \memory_reg[7][21] (.clk (CLK), .d (n_648), .sena (n_627),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[7] [21]));
  CDN_flop \memory_reg[7][22] (.clk (CLK), .d (n_649), .sena (n_627),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[7] [22]));
  CDN_flop \memory_reg[7][23] (.clk (CLK), .d (n_650), .sena (n_627),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[7] [23]));
  CDN_flop \memory_reg[7][24] (.clk (CLK), .d (n_651), .sena (n_627),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[7] [24]));
  CDN_flop \memory_reg[7][25] (.clk (CLK), .d (n_652), .sena (n_627),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[7] [25]));
  CDN_flop \memory_reg[7][26] (.clk (CLK), .d (n_653), .sena (n_627),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[7] [26]));
  CDN_flop \memory_reg[7][27] (.clk (CLK), .d (n_654), .sena (n_627),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[7] [27]));
  CDN_flop \memory_reg[7][28] (.clk (CLK), .d (n_655), .sena (n_627),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[7] [28]));
  CDN_flop \memory_reg[7][29] (.clk (CLK), .d (n_656), .sena (n_627),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[7] [29]));
  CDN_flop \memory_reg[7][30] (.clk (CLK), .d (n_657), .sena (n_627),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[7] [30]));
  CDN_flop \memory_reg[7][31] (.clk (CLK), .d (n_658), .sena (n_627),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[7] [31]));
  CDN_flop \memory_reg[7][32] (.clk (CLK), .d (n_659), .sena (n_627),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[7] [32]));
  CDN_flop \memory_reg[7][33] (.clk (CLK), .d (n_660), .sena (n_627),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[7] [33]));
  CDN_flop \memory_reg[7][34] (.clk (CLK), .d (n_661), .sena (n_627),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[7] [34]));
  CDN_flop \memory_reg[7][35] (.clk (CLK), .d (n_662), .sena (n_627),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[7] [35]));
  CDN_flop \memory_reg[7][36] (.clk (CLK), .d (n_663), .sena (n_627),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[7] [36]));
  CDN_flop \memory_reg[7][37] (.clk (CLK), .d (n_664), .sena (n_627),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[7] [37]));
  CDN_flop \memory_reg[8][0] (.clk (CLK), .d (n_671), .sena (n_672),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[8] [0]));
  CDN_flop \memory_reg[8][1] (.clk (CLK), .d (n_673), .sena (n_672),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[8] [1]));
  CDN_flop \memory_reg[8][2] (.clk (CLK), .d (n_674), .sena (n_672),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[8] [2]));
  CDN_flop \memory_reg[8][3] (.clk (CLK), .d (n_675), .sena (n_672),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[8] [3]));
  CDN_flop \memory_reg[8][4] (.clk (CLK), .d (n_676), .sena (n_672),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[8] [4]));
  CDN_flop \memory_reg[8][5] (.clk (CLK), .d (n_677), .sena (n_672),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[8] [5]));
  CDN_flop \memory_reg[8][6] (.clk (CLK), .d (n_678), .sena (n_672),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[8] [6]));
  CDN_flop \memory_reg[8][7] (.clk (CLK), .d (n_679), .sena (n_672),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[8] [7]));
  CDN_flop \memory_reg[8][8] (.clk (CLK), .d (n_680), .sena (n_672),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[8] [8]));
  CDN_flop \memory_reg[8][9] (.clk (CLK), .d (n_681), .sena (n_672),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[8] [9]));
  CDN_flop \memory_reg[8][10] (.clk (CLK), .d (n_682), .sena (n_672),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[8] [10]));
  CDN_flop \memory_reg[8][11] (.clk (CLK), .d (n_683), .sena (n_672),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[8] [11]));
  CDN_flop \memory_reg[8][12] (.clk (CLK), .d (n_684), .sena (n_672),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[8] [12]));
  CDN_flop \memory_reg[8][13] (.clk (CLK), .d (n_685), .sena (n_672),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[8] [13]));
  CDN_flop \memory_reg[8][14] (.clk (CLK), .d (n_686), .sena (n_672),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[8] [14]));
  CDN_flop \memory_reg[8][15] (.clk (CLK), .d (n_687), .sena (n_672),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[8] [15]));
  CDN_flop \memory_reg[8][16] (.clk (CLK), .d (n_688), .sena (n_672),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[8] [16]));
  CDN_flop \memory_reg[8][17] (.clk (CLK), .d (n_689), .sena (n_672),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[8] [17]));
  CDN_flop \memory_reg[8][18] (.clk (CLK), .d (n_690), .sena (n_672),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[8] [18]));
  CDN_flop \memory_reg[8][19] (.clk (CLK), .d (n_691), .sena (n_672),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[8] [19]));
  CDN_flop \memory_reg[8][20] (.clk (CLK), .d (n_692), .sena (n_672),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[8] [20]));
  CDN_flop \memory_reg[8][21] (.clk (CLK), .d (n_693), .sena (n_672),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[8] [21]));
  CDN_flop \memory_reg[8][22] (.clk (CLK), .d (n_694), .sena (n_672),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[8] [22]));
  CDN_flop \memory_reg[8][23] (.clk (CLK), .d (n_695), .sena (n_672),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[8] [23]));
  CDN_flop \memory_reg[8][24] (.clk (CLK), .d (n_696), .sena (n_672),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[8] [24]));
  CDN_flop \memory_reg[8][25] (.clk (CLK), .d (n_697), .sena (n_672),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[8] [25]));
  CDN_flop \memory_reg[8][26] (.clk (CLK), .d (n_698), .sena (n_672),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[8] [26]));
  CDN_flop \memory_reg[8][27] (.clk (CLK), .d (n_699), .sena (n_672),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[8] [27]));
  CDN_flop \memory_reg[8][28] (.clk (CLK), .d (n_700), .sena (n_672),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[8] [28]));
  CDN_flop \memory_reg[8][29] (.clk (CLK), .d (n_701), .sena (n_672),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[8] [29]));
  CDN_flop \memory_reg[8][30] (.clk (CLK), .d (n_702), .sena (n_672),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[8] [30]));
  CDN_flop \memory_reg[8][31] (.clk (CLK), .d (n_703), .sena (n_672),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[8] [31]));
  CDN_flop \memory_reg[8][32] (.clk (CLK), .d (n_704), .sena (n_672),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[8] [32]));
  CDN_flop \memory_reg[8][33] (.clk (CLK), .d (n_705), .sena (n_672),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[8] [33]));
  CDN_flop \memory_reg[8][34] (.clk (CLK), .d (n_706), .sena (n_672),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[8] [34]));
  CDN_flop \memory_reg[8][35] (.clk (CLK), .d (n_707), .sena (n_672),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[8] [35]));
  CDN_flop \memory_reg[8][36] (.clk (CLK), .d (n_708), .sena (n_672),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[8] [36]));
  CDN_flop \memory_reg[8][37] (.clk (CLK), .d (n_709), .sena (n_672),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[8] [37]));
  CDN_flop \memory_reg[9][0] (.clk (CLK), .d (n_716), .sena (n_717),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[9] [0]));
  CDN_flop \memory_reg[9][1] (.clk (CLK), .d (n_718), .sena (n_717),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[9] [1]));
  CDN_flop \memory_reg[9][2] (.clk (CLK), .d (n_719), .sena (n_717),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[9] [2]));
  CDN_flop \memory_reg[9][3] (.clk (CLK), .d (n_720), .sena (n_717),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[9] [3]));
  CDN_flop \memory_reg[9][4] (.clk (CLK), .d (n_721), .sena (n_717),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[9] [4]));
  CDN_flop \memory_reg[9][5] (.clk (CLK), .d (n_722), .sena (n_717),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[9] [5]));
  CDN_flop \memory_reg[9][6] (.clk (CLK), .d (n_723), .sena (n_717),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[9] [6]));
  CDN_flop \memory_reg[9][7] (.clk (CLK), .d (n_724), .sena (n_717),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[9] [7]));
  CDN_flop \memory_reg[9][8] (.clk (CLK), .d (n_725), .sena (n_717),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[9] [8]));
  CDN_flop \memory_reg[9][9] (.clk (CLK), .d (n_726), .sena (n_717),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[9] [9]));
  CDN_flop \memory_reg[9][10] (.clk (CLK), .d (n_727), .sena (n_717),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[9] [10]));
  CDN_flop \memory_reg[9][11] (.clk (CLK), .d (n_728), .sena (n_717),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[9] [11]));
  CDN_flop \memory_reg[9][12] (.clk (CLK), .d (n_729), .sena (n_717),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[9] [12]));
  CDN_flop \memory_reg[9][13] (.clk (CLK), .d (n_730), .sena (n_717),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[9] [13]));
  CDN_flop \memory_reg[9][14] (.clk (CLK), .d (n_731), .sena (n_717),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[9] [14]));
  CDN_flop \memory_reg[9][15] (.clk (CLK), .d (n_732), .sena (n_717),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[9] [15]));
  CDN_flop \memory_reg[9][16] (.clk (CLK), .d (n_733), .sena (n_717),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[9] [16]));
  CDN_flop \memory_reg[9][17] (.clk (CLK), .d (n_734), .sena (n_717),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[9] [17]));
  CDN_flop \memory_reg[9][18] (.clk (CLK), .d (n_735), .sena (n_717),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[9] [18]));
  CDN_flop \memory_reg[9][19] (.clk (CLK), .d (n_736), .sena (n_717),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[9] [19]));
  CDN_flop \memory_reg[9][20] (.clk (CLK), .d (n_737), .sena (n_717),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[9] [20]));
  CDN_flop \memory_reg[9][21] (.clk (CLK), .d (n_738), .sena (n_717),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[9] [21]));
  CDN_flop \memory_reg[9][22] (.clk (CLK), .d (n_739), .sena (n_717),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[9] [22]));
  CDN_flop \memory_reg[9][23] (.clk (CLK), .d (n_740), .sena (n_717),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[9] [23]));
  CDN_flop \memory_reg[9][24] (.clk (CLK), .d (n_741), .sena (n_717),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[9] [24]));
  CDN_flop \memory_reg[9][25] (.clk (CLK), .d (n_742), .sena (n_717),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[9] [25]));
  CDN_flop \memory_reg[9][26] (.clk (CLK), .d (n_743), .sena (n_717),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[9] [26]));
  CDN_flop \memory_reg[9][27] (.clk (CLK), .d (n_744), .sena (n_717),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[9] [27]));
  CDN_flop \memory_reg[9][28] (.clk (CLK), .d (n_745), .sena (n_717),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[9] [28]));
  CDN_flop \memory_reg[9][29] (.clk (CLK), .d (n_746), .sena (n_717),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[9] [29]));
  CDN_flop \memory_reg[9][30] (.clk (CLK), .d (n_747), .sena (n_717),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[9] [30]));
  CDN_flop \memory_reg[9][31] (.clk (CLK), .d (n_748), .sena (n_717),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[9] [31]));
  CDN_flop \memory_reg[9][32] (.clk (CLK), .d (n_749), .sena (n_717),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[9] [32]));
  CDN_flop \memory_reg[9][33] (.clk (CLK), .d (n_750), .sena (n_717),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[9] [33]));
  CDN_flop \memory_reg[9][34] (.clk (CLK), .d (n_751), .sena (n_717),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[9] [34]));
  CDN_flop \memory_reg[9][35] (.clk (CLK), .d (n_752), .sena (n_717),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[9] [35]));
  CDN_flop \memory_reg[9][36] (.clk (CLK), .d (n_753), .sena (n_717),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[9] [36]));
  CDN_flop \memory_reg[9][37] (.clk (CLK), .d (n_754), .sena (n_717),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[9] [37]));
  CDN_flop \memory_reg[10][0] (.clk (CLK), .d (n_761), .sena (n_762),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[10] [0]));
  CDN_flop \memory_reg[10][1] (.clk (CLK), .d (n_763), .sena (n_762),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[10] [1]));
  CDN_flop \memory_reg[10][2] (.clk (CLK), .d (n_764), .sena (n_762),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[10] [2]));
  CDN_flop \memory_reg[10][3] (.clk (CLK), .d (n_765), .sena (n_762),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[10] [3]));
  CDN_flop \memory_reg[10][4] (.clk (CLK), .d (n_766), .sena (n_762),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[10] [4]));
  CDN_flop \memory_reg[10][5] (.clk (CLK), .d (n_767), .sena (n_762),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[10] [5]));
  CDN_flop \memory_reg[10][6] (.clk (CLK), .d (n_768), .sena (n_762),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[10] [6]));
  CDN_flop \memory_reg[10][7] (.clk (CLK), .d (n_769), .sena (n_762),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[10] [7]));
  CDN_flop \memory_reg[10][8] (.clk (CLK), .d (n_770), .sena (n_762),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[10] [8]));
  CDN_flop \memory_reg[10][9] (.clk (CLK), .d (n_771), .sena (n_762),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[10] [9]));
  CDN_flop \memory_reg[10][10] (.clk (CLK), .d (n_772), .sena (n_762),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[10] [10]));
  CDN_flop \memory_reg[10][11] (.clk (CLK), .d (n_773), .sena (n_762),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[10] [11]));
  CDN_flop \memory_reg[10][12] (.clk (CLK), .d (n_774), .sena (n_762),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[10] [12]));
  CDN_flop \memory_reg[10][13] (.clk (CLK), .d (n_775), .sena (n_762),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[10] [13]));
  CDN_flop \memory_reg[10][14] (.clk (CLK), .d (n_776), .sena (n_762),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[10] [14]));
  CDN_flop \memory_reg[10][15] (.clk (CLK), .d (n_777), .sena (n_762),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[10] [15]));
  CDN_flop \memory_reg[10][16] (.clk (CLK), .d (n_778), .sena (n_762),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[10] [16]));
  CDN_flop \memory_reg[10][17] (.clk (CLK), .d (n_779), .sena (n_762),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[10] [17]));
  CDN_flop \memory_reg[10][18] (.clk (CLK), .d (n_780), .sena (n_762),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[10] [18]));
  CDN_flop \memory_reg[10][19] (.clk (CLK), .d (n_781), .sena (n_762),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[10] [19]));
  CDN_flop \memory_reg[10][20] (.clk (CLK), .d (n_782), .sena (n_762),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[10] [20]));
  CDN_flop \memory_reg[10][21] (.clk (CLK), .d (n_783), .sena (n_762),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[10] [21]));
  CDN_flop \memory_reg[10][22] (.clk (CLK), .d (n_784), .sena (n_762),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[10] [22]));
  CDN_flop \memory_reg[10][23] (.clk (CLK), .d (n_785), .sena (n_762),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[10] [23]));
  CDN_flop \memory_reg[10][24] (.clk (CLK), .d (n_786), .sena (n_762),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[10] [24]));
  CDN_flop \memory_reg[10][25] (.clk (CLK), .d (n_787), .sena (n_762),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[10] [25]));
  CDN_flop \memory_reg[10][26] (.clk (CLK), .d (n_788), .sena (n_762),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[10] [26]));
  CDN_flop \memory_reg[10][27] (.clk (CLK), .d (n_789), .sena (n_762),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[10] [27]));
  CDN_flop \memory_reg[10][28] (.clk (CLK), .d (n_790), .sena (n_762),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[10] [28]));
  CDN_flop \memory_reg[10][29] (.clk (CLK), .d (n_791), .sena (n_762),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[10] [29]));
  CDN_flop \memory_reg[10][30] (.clk (CLK), .d (n_792), .sena (n_762),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[10] [30]));
  CDN_flop \memory_reg[10][31] (.clk (CLK), .d (n_793), .sena (n_762),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[10] [31]));
  CDN_flop \memory_reg[10][32] (.clk (CLK), .d (n_794), .sena (n_762),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[10] [32]));
  CDN_flop \memory_reg[10][33] (.clk (CLK), .d (n_795), .sena (n_762),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[10] [33]));
  CDN_flop \memory_reg[10][34] (.clk (CLK), .d (n_796), .sena (n_762),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[10] [34]));
  CDN_flop \memory_reg[10][35] (.clk (CLK), .d (n_797), .sena (n_762),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[10] [35]));
  CDN_flop \memory_reg[10][36] (.clk (CLK), .d (n_798), .sena (n_762),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[10] [36]));
  CDN_flop \memory_reg[10][37] (.clk (CLK), .d (n_799), .sena (n_762),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[10] [37]));
  CDN_flop \memory_reg[11][0] (.clk (CLK), .d (n_806), .sena (n_807),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[11] [0]));
  CDN_flop \memory_reg[11][1] (.clk (CLK), .d (n_808), .sena (n_807),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[11] [1]));
  CDN_flop \memory_reg[11][2] (.clk (CLK), .d (n_809), .sena (n_807),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[11] [2]));
  CDN_flop \memory_reg[11][3] (.clk (CLK), .d (n_810), .sena (n_807),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[11] [3]));
  CDN_flop \memory_reg[11][4] (.clk (CLK), .d (n_811), .sena (n_807),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[11] [4]));
  CDN_flop \memory_reg[11][5] (.clk (CLK), .d (n_812), .sena (n_807),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[11] [5]));
  CDN_flop \memory_reg[11][6] (.clk (CLK), .d (n_813), .sena (n_807),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[11] [6]));
  CDN_flop \memory_reg[11][7] (.clk (CLK), .d (n_814), .sena (n_807),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[11] [7]));
  CDN_flop \memory_reg[11][8] (.clk (CLK), .d (n_815), .sena (n_807),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[11] [8]));
  CDN_flop \memory_reg[11][9] (.clk (CLK), .d (n_816), .sena (n_807),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[11] [9]));
  CDN_flop \memory_reg[11][10] (.clk (CLK), .d (n_817), .sena (n_807),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[11] [10]));
  CDN_flop \memory_reg[11][11] (.clk (CLK), .d (n_818), .sena (n_807),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[11] [11]));
  CDN_flop \memory_reg[11][12] (.clk (CLK), .d (n_819), .sena (n_807),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[11] [12]));
  CDN_flop \memory_reg[11][13] (.clk (CLK), .d (n_820), .sena (n_807),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[11] [13]));
  CDN_flop \memory_reg[11][14] (.clk (CLK), .d (n_821), .sena (n_807),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[11] [14]));
  CDN_flop \memory_reg[11][15] (.clk (CLK), .d (n_822), .sena (n_807),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[11] [15]));
  CDN_flop \memory_reg[11][16] (.clk (CLK), .d (n_823), .sena (n_807),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[11] [16]));
  CDN_flop \memory_reg[11][17] (.clk (CLK), .d (n_824), .sena (n_807),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[11] [17]));
  CDN_flop \memory_reg[11][18] (.clk (CLK), .d (n_825), .sena (n_807),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[11] [18]));
  CDN_flop \memory_reg[11][19] (.clk (CLK), .d (n_826), .sena (n_807),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[11] [19]));
  CDN_flop \memory_reg[11][20] (.clk (CLK), .d (n_827), .sena (n_807),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[11] [20]));
  CDN_flop \memory_reg[11][21] (.clk (CLK), .d (n_828), .sena (n_807),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[11] [21]));
  CDN_flop \memory_reg[11][22] (.clk (CLK), .d (n_829), .sena (n_807),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[11] [22]));
  CDN_flop \memory_reg[11][23] (.clk (CLK), .d (n_830), .sena (n_807),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[11] [23]));
  CDN_flop \memory_reg[11][24] (.clk (CLK), .d (n_831), .sena (n_807),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[11] [24]));
  CDN_flop \memory_reg[11][25] (.clk (CLK), .d (n_832), .sena (n_807),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[11] [25]));
  CDN_flop \memory_reg[11][26] (.clk (CLK), .d (n_833), .sena (n_807),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[11] [26]));
  CDN_flop \memory_reg[11][27] (.clk (CLK), .d (n_834), .sena (n_807),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[11] [27]));
  CDN_flop \memory_reg[11][28] (.clk (CLK), .d (n_835), .sena (n_807),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[11] [28]));
  CDN_flop \memory_reg[11][29] (.clk (CLK), .d (n_836), .sena (n_807),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[11] [29]));
  CDN_flop \memory_reg[11][30] (.clk (CLK), .d (n_837), .sena (n_807),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[11] [30]));
  CDN_flop \memory_reg[11][31] (.clk (CLK), .d (n_838), .sena (n_807),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[11] [31]));
  CDN_flop \memory_reg[11][32] (.clk (CLK), .d (n_839), .sena (n_807),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[11] [32]));
  CDN_flop \memory_reg[11][33] (.clk (CLK), .d (n_840), .sena (n_807),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[11] [33]));
  CDN_flop \memory_reg[11][34] (.clk (CLK), .d (n_841), .sena (n_807),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[11] [34]));
  CDN_flop \memory_reg[11][35] (.clk (CLK), .d (n_842), .sena (n_807),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[11] [35]));
  CDN_flop \memory_reg[11][36] (.clk (CLK), .d (n_843), .sena (n_807),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[11] [36]));
  CDN_flop \memory_reg[11][37] (.clk (CLK), .d (n_844), .sena (n_807),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[11] [37]));
  CDN_flop \memory_reg[12][0] (.clk (CLK), .d (n_851), .sena (n_852),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[12] [0]));
  CDN_flop \memory_reg[12][1] (.clk (CLK), .d (n_853), .sena (n_852),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[12] [1]));
  CDN_flop \memory_reg[12][2] (.clk (CLK), .d (n_854), .sena (n_852),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[12] [2]));
  CDN_flop \memory_reg[12][3] (.clk (CLK), .d (n_855), .sena (n_852),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[12] [3]));
  CDN_flop \memory_reg[12][4] (.clk (CLK), .d (n_856), .sena (n_852),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[12] [4]));
  CDN_flop \memory_reg[12][5] (.clk (CLK), .d (n_857), .sena (n_852),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[12] [5]));
  CDN_flop \memory_reg[12][6] (.clk (CLK), .d (n_858), .sena (n_852),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[12] [6]));
  CDN_flop \memory_reg[12][7] (.clk (CLK), .d (n_859), .sena (n_852),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[12] [7]));
  CDN_flop \memory_reg[12][8] (.clk (CLK), .d (n_860), .sena (n_852),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[12] [8]));
  CDN_flop \memory_reg[12][9] (.clk (CLK), .d (n_861), .sena (n_852),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[12] [9]));
  CDN_flop \memory_reg[12][10] (.clk (CLK), .d (n_862), .sena (n_852),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[12] [10]));
  CDN_flop \memory_reg[12][11] (.clk (CLK), .d (n_863), .sena (n_852),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[12] [11]));
  CDN_flop \memory_reg[12][12] (.clk (CLK), .d (n_864), .sena (n_852),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[12] [12]));
  CDN_flop \memory_reg[12][13] (.clk (CLK), .d (n_865), .sena (n_852),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[12] [13]));
  CDN_flop \memory_reg[12][14] (.clk (CLK), .d (n_866), .sena (n_852),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[12] [14]));
  CDN_flop \memory_reg[12][15] (.clk (CLK), .d (n_867), .sena (n_852),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[12] [15]));
  CDN_flop \memory_reg[12][16] (.clk (CLK), .d (n_868), .sena (n_852),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[12] [16]));
  CDN_flop \memory_reg[12][17] (.clk (CLK), .d (n_869), .sena (n_852),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[12] [17]));
  CDN_flop \memory_reg[12][18] (.clk (CLK), .d (n_870), .sena (n_852),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[12] [18]));
  CDN_flop \memory_reg[12][19] (.clk (CLK), .d (n_871), .sena (n_852),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[12] [19]));
  CDN_flop \memory_reg[12][20] (.clk (CLK), .d (n_872), .sena (n_852),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[12] [20]));
  CDN_flop \memory_reg[12][21] (.clk (CLK), .d (n_873), .sena (n_852),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[12] [21]));
  CDN_flop \memory_reg[12][22] (.clk (CLK), .d (n_874), .sena (n_852),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[12] [22]));
  CDN_flop \memory_reg[12][23] (.clk (CLK), .d (n_875), .sena (n_852),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[12] [23]));
  CDN_flop \memory_reg[12][24] (.clk (CLK), .d (n_876), .sena (n_852),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[12] [24]));
  CDN_flop \memory_reg[12][25] (.clk (CLK), .d (n_877), .sena (n_852),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[12] [25]));
  CDN_flop \memory_reg[12][26] (.clk (CLK), .d (n_878), .sena (n_852),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[12] [26]));
  CDN_flop \memory_reg[12][27] (.clk (CLK), .d (n_879), .sena (n_852),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[12] [27]));
  CDN_flop \memory_reg[12][28] (.clk (CLK), .d (n_880), .sena (n_852),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[12] [28]));
  CDN_flop \memory_reg[12][29] (.clk (CLK), .d (n_881), .sena (n_852),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[12] [29]));
  CDN_flop \memory_reg[12][30] (.clk (CLK), .d (n_882), .sena (n_852),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[12] [30]));
  CDN_flop \memory_reg[12][31] (.clk (CLK), .d (n_883), .sena (n_852),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[12] [31]));
  CDN_flop \memory_reg[12][32] (.clk (CLK), .d (n_884), .sena (n_852),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[12] [32]));
  CDN_flop \memory_reg[12][33] (.clk (CLK), .d (n_885), .sena (n_852),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[12] [33]));
  CDN_flop \memory_reg[12][34] (.clk (CLK), .d (n_886), .sena (n_852),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[12] [34]));
  CDN_flop \memory_reg[12][35] (.clk (CLK), .d (n_887), .sena (n_852),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[12] [35]));
  CDN_flop \memory_reg[12][36] (.clk (CLK), .d (n_888), .sena (n_852),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[12] [36]));
  CDN_flop \memory_reg[12][37] (.clk (CLK), .d (n_889), .sena (n_852),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[12] [37]));
  CDN_flop \memory_reg[13][0] (.clk (CLK), .d (n_896), .sena (n_897),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[13] [0]));
  CDN_flop \memory_reg[13][1] (.clk (CLK), .d (n_898), .sena (n_897),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[13] [1]));
  CDN_flop \memory_reg[13][2] (.clk (CLK), .d (n_899), .sena (n_897),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[13] [2]));
  CDN_flop \memory_reg[13][3] (.clk (CLK), .d (n_900), .sena (n_897),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[13] [3]));
  CDN_flop \memory_reg[13][4] (.clk (CLK), .d (n_901), .sena (n_897),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[13] [4]));
  CDN_flop \memory_reg[13][5] (.clk (CLK), .d (n_902), .sena (n_897),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[13] [5]));
  CDN_flop \memory_reg[13][6] (.clk (CLK), .d (n_903), .sena (n_897),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[13] [6]));
  CDN_flop \memory_reg[13][7] (.clk (CLK), .d (n_904), .sena (n_897),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[13] [7]));
  CDN_flop \memory_reg[13][8] (.clk (CLK), .d (n_905), .sena (n_897),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[13] [8]));
  CDN_flop \memory_reg[13][9] (.clk (CLK), .d (n_906), .sena (n_897),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[13] [9]));
  CDN_flop \memory_reg[13][10] (.clk (CLK), .d (n_907), .sena (n_897),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[13] [10]));
  CDN_flop \memory_reg[13][11] (.clk (CLK), .d (n_908), .sena (n_897),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[13] [11]));
  CDN_flop \memory_reg[13][12] (.clk (CLK), .d (n_909), .sena (n_897),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[13] [12]));
  CDN_flop \memory_reg[13][13] (.clk (CLK), .d (n_910), .sena (n_897),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[13] [13]));
  CDN_flop \memory_reg[13][14] (.clk (CLK), .d (n_911), .sena (n_897),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[13] [14]));
  CDN_flop \memory_reg[13][15] (.clk (CLK), .d (n_912), .sena (n_897),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[13] [15]));
  CDN_flop \memory_reg[13][16] (.clk (CLK), .d (n_913), .sena (n_897),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[13] [16]));
  CDN_flop \memory_reg[13][17] (.clk (CLK), .d (n_914), .sena (n_897),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[13] [17]));
  CDN_flop \memory_reg[13][18] (.clk (CLK), .d (n_915), .sena (n_897),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[13] [18]));
  CDN_flop \memory_reg[13][19] (.clk (CLK), .d (n_916), .sena (n_897),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[13] [19]));
  CDN_flop \memory_reg[13][20] (.clk (CLK), .d (n_917), .sena (n_897),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[13] [20]));
  CDN_flop \memory_reg[13][21] (.clk (CLK), .d (n_918), .sena (n_897),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[13] [21]));
  CDN_flop \memory_reg[13][22] (.clk (CLK), .d (n_919), .sena (n_897),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[13] [22]));
  CDN_flop \memory_reg[13][23] (.clk (CLK), .d (n_920), .sena (n_897),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[13] [23]));
  CDN_flop \memory_reg[13][24] (.clk (CLK), .d (n_921), .sena (n_897),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[13] [24]));
  CDN_flop \memory_reg[13][25] (.clk (CLK), .d (n_922), .sena (n_897),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[13] [25]));
  CDN_flop \memory_reg[13][26] (.clk (CLK), .d (n_923), .sena (n_897),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[13] [26]));
  CDN_flop \memory_reg[13][27] (.clk (CLK), .d (n_924), .sena (n_897),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[13] [27]));
  CDN_flop \memory_reg[13][28] (.clk (CLK), .d (n_925), .sena (n_897),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[13] [28]));
  CDN_flop \memory_reg[13][29] (.clk (CLK), .d (n_926), .sena (n_897),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[13] [29]));
  CDN_flop \memory_reg[13][30] (.clk (CLK), .d (n_927), .sena (n_897),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[13] [30]));
  CDN_flop \memory_reg[13][31] (.clk (CLK), .d (n_928), .sena (n_897),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[13] [31]));
  CDN_flop \memory_reg[13][32] (.clk (CLK), .d (n_929), .sena (n_897),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[13] [32]));
  CDN_flop \memory_reg[13][33] (.clk (CLK), .d (n_930), .sena (n_897),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[13] [33]));
  CDN_flop \memory_reg[13][34] (.clk (CLK), .d (n_931), .sena (n_897),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[13] [34]));
  CDN_flop \memory_reg[13][35] (.clk (CLK), .d (n_932), .sena (n_897),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[13] [35]));
  CDN_flop \memory_reg[13][36] (.clk (CLK), .d (n_933), .sena (n_897),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[13] [36]));
  CDN_flop \memory_reg[13][37] (.clk (CLK), .d (n_934), .sena (n_897),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[13] [37]));
  CDN_flop \memory_reg[14][0] (.clk (CLK), .d (n_941), .sena (n_942),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[14] [0]));
  CDN_flop \memory_reg[14][1] (.clk (CLK), .d (n_943), .sena (n_942),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[14] [1]));
  CDN_flop \memory_reg[14][2] (.clk (CLK), .d (n_944), .sena (n_942),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[14] [2]));
  CDN_flop \memory_reg[14][3] (.clk (CLK), .d (n_945), .sena (n_942),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[14] [3]));
  CDN_flop \memory_reg[14][4] (.clk (CLK), .d (n_946), .sena (n_942),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[14] [4]));
  CDN_flop \memory_reg[14][5] (.clk (CLK), .d (n_947), .sena (n_942),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[14] [5]));
  CDN_flop \memory_reg[14][6] (.clk (CLK), .d (n_948), .sena (n_942),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[14] [6]));
  CDN_flop \memory_reg[14][7] (.clk (CLK), .d (n_949), .sena (n_942),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[14] [7]));
  CDN_flop \memory_reg[14][8] (.clk (CLK), .d (n_950), .sena (n_942),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[14] [8]));
  CDN_flop \memory_reg[14][9] (.clk (CLK), .d (n_951), .sena (n_942),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[14] [9]));
  CDN_flop \memory_reg[14][10] (.clk (CLK), .d (n_952), .sena (n_942),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[14] [10]));
  CDN_flop \memory_reg[14][11] (.clk (CLK), .d (n_953), .sena (n_942),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[14] [11]));
  CDN_flop \memory_reg[14][12] (.clk (CLK), .d (n_954), .sena (n_942),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[14] [12]));
  CDN_flop \memory_reg[14][13] (.clk (CLK), .d (n_955), .sena (n_942),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[14] [13]));
  CDN_flop \memory_reg[14][14] (.clk (CLK), .d (n_956), .sena (n_942),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[14] [14]));
  CDN_flop \memory_reg[14][15] (.clk (CLK), .d (n_957), .sena (n_942),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[14] [15]));
  CDN_flop \memory_reg[14][16] (.clk (CLK), .d (n_958), .sena (n_942),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[14] [16]));
  CDN_flop \memory_reg[14][17] (.clk (CLK), .d (n_959), .sena (n_942),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[14] [17]));
  CDN_flop \memory_reg[14][18] (.clk (CLK), .d (n_960), .sena (n_942),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[14] [18]));
  CDN_flop \memory_reg[14][19] (.clk (CLK), .d (n_961), .sena (n_942),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[14] [19]));
  CDN_flop \memory_reg[14][20] (.clk (CLK), .d (n_962), .sena (n_942),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[14] [20]));
  CDN_flop \memory_reg[14][21] (.clk (CLK), .d (n_963), .sena (n_942),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[14] [21]));
  CDN_flop \memory_reg[14][22] (.clk (CLK), .d (n_964), .sena (n_942),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[14] [22]));
  CDN_flop \memory_reg[14][23] (.clk (CLK), .d (n_965), .sena (n_942),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[14] [23]));
  CDN_flop \memory_reg[14][24] (.clk (CLK), .d (n_966), .sena (n_942),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[14] [24]));
  CDN_flop \memory_reg[14][25] (.clk (CLK), .d (n_967), .sena (n_942),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[14] [25]));
  CDN_flop \memory_reg[14][26] (.clk (CLK), .d (n_968), .sena (n_942),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[14] [26]));
  CDN_flop \memory_reg[14][27] (.clk (CLK), .d (n_969), .sena (n_942),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[14] [27]));
  CDN_flop \memory_reg[14][28] (.clk (CLK), .d (n_970), .sena (n_942),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[14] [28]));
  CDN_flop \memory_reg[14][29] (.clk (CLK), .d (n_971), .sena (n_942),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[14] [29]));
  CDN_flop \memory_reg[14][30] (.clk (CLK), .d (n_972), .sena (n_942),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[14] [30]));
  CDN_flop \memory_reg[14][31] (.clk (CLK), .d (n_973), .sena (n_942),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[14] [31]));
  CDN_flop \memory_reg[14][32] (.clk (CLK), .d (n_974), .sena (n_942),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[14] [32]));
  CDN_flop \memory_reg[14][33] (.clk (CLK), .d (n_975), .sena (n_942),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[14] [33]));
  CDN_flop \memory_reg[14][34] (.clk (CLK), .d (n_976), .sena (n_942),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[14] [34]));
  CDN_flop \memory_reg[14][35] (.clk (CLK), .d (n_977), .sena (n_942),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[14] [35]));
  CDN_flop \memory_reg[14][36] (.clk (CLK), .d (n_978), .sena (n_942),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[14] [36]));
  CDN_flop \memory_reg[14][37] (.clk (CLK), .d (n_979), .sena (n_942),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[14] [37]));
  CDN_flop \memory_reg[15][0] (.clk (CLK), .d (n_986), .sena (n_987),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[15] [0]));
  CDN_flop \memory_reg[15][1] (.clk (CLK), .d (n_988), .sena (n_987),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[15] [1]));
  CDN_flop \memory_reg[15][2] (.clk (CLK), .d (n_989), .sena (n_987),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[15] [2]));
  CDN_flop \memory_reg[15][3] (.clk (CLK), .d (n_990), .sena (n_987),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[15] [3]));
  CDN_flop \memory_reg[15][4] (.clk (CLK), .d (n_991), .sena (n_987),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[15] [4]));
  CDN_flop \memory_reg[15][5] (.clk (CLK), .d (n_992), .sena (n_987),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[15] [5]));
  CDN_flop \memory_reg[15][6] (.clk (CLK), .d (n_993), .sena (n_987),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[15] [6]));
  CDN_flop \memory_reg[15][7] (.clk (CLK), .d (n_994), .sena (n_987),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[15] [7]));
  CDN_flop \memory_reg[15][8] (.clk (CLK), .d (n_995), .sena (n_987),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[15] [8]));
  CDN_flop \memory_reg[15][9] (.clk (CLK), .d (n_996), .sena (n_987),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[15] [9]));
  CDN_flop \memory_reg[15][10] (.clk (CLK), .d (n_997), .sena (n_987),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[15] [10]));
  CDN_flop \memory_reg[15][11] (.clk (CLK), .d (n_998), .sena (n_987),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[15] [11]));
  CDN_flop \memory_reg[15][12] (.clk (CLK), .d (n_999), .sena (n_987),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[15] [12]));
  CDN_flop \memory_reg[15][13] (.clk (CLK), .d (n_1000), .sena (n_987),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[15] [13]));
  CDN_flop \memory_reg[15][14] (.clk (CLK), .d (n_1001), .sena (n_987),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[15] [14]));
  CDN_flop \memory_reg[15][15] (.clk (CLK), .d (n_1002), .sena (n_987),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[15] [15]));
  CDN_flop \memory_reg[15][16] (.clk (CLK), .d (n_1003), .sena (n_987),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[15] [16]));
  CDN_flop \memory_reg[15][17] (.clk (CLK), .d (n_1004), .sena (n_987),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[15] [17]));
  CDN_flop \memory_reg[15][18] (.clk (CLK), .d (n_1005), .sena (n_987),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[15] [18]));
  CDN_flop \memory_reg[15][19] (.clk (CLK), .d (n_1006), .sena (n_987),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[15] [19]));
  CDN_flop \memory_reg[15][20] (.clk (CLK), .d (n_1007), .sena (n_987),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[15] [20]));
  CDN_flop \memory_reg[15][21] (.clk (CLK), .d (n_1008), .sena (n_987),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[15] [21]));
  CDN_flop \memory_reg[15][22] (.clk (CLK), .d (n_1009), .sena (n_987),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[15] [22]));
  CDN_flop \memory_reg[15][23] (.clk (CLK), .d (n_1010), .sena (n_987),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[15] [23]));
  CDN_flop \memory_reg[15][24] (.clk (CLK), .d (n_1011), .sena (n_987),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[15] [24]));
  CDN_flop \memory_reg[15][25] (.clk (CLK), .d (n_1012), .sena (n_987),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[15] [25]));
  CDN_flop \memory_reg[15][26] (.clk (CLK), .d (n_1013), .sena (n_987),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[15] [26]));
  CDN_flop \memory_reg[15][27] (.clk (CLK), .d (n_1014), .sena (n_987),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[15] [27]));
  CDN_flop \memory_reg[15][28] (.clk (CLK), .d (n_1015), .sena (n_987),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[15] [28]));
  CDN_flop \memory_reg[15][29] (.clk (CLK), .d (n_1016), .sena (n_987),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[15] [29]));
  CDN_flop \memory_reg[15][30] (.clk (CLK), .d (n_1017), .sena (n_987),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[15] [30]));
  CDN_flop \memory_reg[15][31] (.clk (CLK), .d (n_1018), .sena (n_987),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[15] [31]));
  CDN_flop \memory_reg[15][32] (.clk (CLK), .d (n_1019), .sena (n_987),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[15] [32]));
  CDN_flop \memory_reg[15][33] (.clk (CLK), .d (n_1020), .sena (n_987),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[15] [33]));
  CDN_flop \memory_reg[15][34] (.clk (CLK), .d (n_1021), .sena (n_987),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[15] [34]));
  CDN_flop \memory_reg[15][35] (.clk (CLK), .d (n_1022), .sena (n_987),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[15] [35]));
  CDN_flop \memory_reg[15][36] (.clk (CLK), .d (n_1023), .sena (n_987),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[15] [36]));
  CDN_flop \memory_reg[15][37] (.clk (CLK), .d (n_1024), .sena (n_987),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memory[15] [37]));
  CDN_flop \data_output_reg[0] (.clk (CLK), .d (\memory[ptr_read] [0]),
       .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_152), .srd
       (1'b0), .q (data_output[0]));
  CDN_flop \data_output_reg[1] (.clk (CLK), .d (\memory[ptr_read] [1]),
       .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_152), .srd
       (1'b0), .q (data_output[1]));
  CDN_flop \data_output_reg[2] (.clk (CLK), .d (\memory[ptr_read] [2]),
       .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_152), .srd
       (1'b0), .q (data_output[2]));
  CDN_flop \data_output_reg[3] (.clk (CLK), .d (\memory[ptr_read] [3]),
       .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_152), .srd
       (1'b0), .q (data_output[3]));
  CDN_flop \data_output_reg[4] (.clk (CLK), .d (\memory[ptr_read] [4]),
       .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_152), .srd
       (1'b0), .q (data_output[4]));
  CDN_flop \data_output_reg[5] (.clk (CLK), .d (\memory[ptr_read] [5]),
       .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_152), .srd
       (1'b0), .q (data_output[5]));
  CDN_flop \data_output_reg[6] (.clk (CLK), .d (\memory[ptr_read] [6]),
       .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_152), .srd
       (1'b0), .q (data_output[6]));
  CDN_flop \data_output_reg[7] (.clk (CLK), .d (\memory[ptr_read] [7]),
       .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_152), .srd
       (1'b0), .q (data_output[7]));
  CDN_flop \data_output_reg[8] (.clk (CLK), .d (\memory[ptr_read] [8]),
       .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_152), .srd
       (1'b0), .q (data_output[8]));
  CDN_flop \data_output_reg[9] (.clk (CLK), .d (\memory[ptr_read] [9]),
       .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_152), .srd
       (1'b0), .q (data_output[9]));
  CDN_flop \data_output_reg[10] (.clk (CLK), .d (\memory[ptr_read]
       [10]), .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_152),
       .srd (1'b0), .q (data_output[10]));
  CDN_flop \data_output_reg[11] (.clk (CLK), .d (\memory[ptr_read]
       [11]), .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_152),
       .srd (1'b0), .q (data_output[11]));
  CDN_flop \data_output_reg[12] (.clk (CLK), .d (\memory[ptr_read]
       [12]), .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_152),
       .srd (1'b0), .q (data_output[12]));
  CDN_flop \data_output_reg[13] (.clk (CLK), .d (\memory[ptr_read]
       [13]), .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_152),
       .srd (1'b0), .q (data_output[13]));
  CDN_flop \data_output_reg[14] (.clk (CLK), .d (\memory[ptr_read]
       [14]), .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_152),
       .srd (1'b0), .q (data_output[14]));
  CDN_flop \data_output_reg[15] (.clk (CLK), .d (\memory[ptr_read]
       [15]), .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_152),
       .srd (1'b0), .q (data_output[15]));
  CDN_flop \data_output_reg[16] (.clk (CLK), .d (\memory[ptr_read]
       [16]), .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_152),
       .srd (1'b0), .q (data_output[16]));
  CDN_flop \data_output_reg[17] (.clk (CLK), .d (\memory[ptr_read]
       [17]), .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_152),
       .srd (1'b0), .q (data_output[17]));
  CDN_flop \data_output_reg[18] (.clk (CLK), .d (\memory[ptr_read]
       [18]), .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_152),
       .srd (1'b0), .q (data_output[18]));
  CDN_flop \data_output_reg[19] (.clk (CLK), .d (\memory[ptr_read]
       [19]), .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_152),
       .srd (1'b0), .q (data_output[19]));
  CDN_flop \data_output_reg[20] (.clk (CLK), .d (\memory[ptr_read]
       [20]), .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_152),
       .srd (1'b0), .q (data_output[20]));
  CDN_flop \data_output_reg[21] (.clk (CLK), .d (\memory[ptr_read]
       [21]), .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_152),
       .srd (1'b0), .q (data_output[21]));
  CDN_flop \data_output_reg[22] (.clk (CLK), .d (\memory[ptr_read]
       [22]), .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_152),
       .srd (1'b0), .q (data_output[22]));
  CDN_flop \data_output_reg[23] (.clk (CLK), .d (\memory[ptr_read]
       [23]), .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_152),
       .srd (1'b0), .q (data_output[23]));
  CDN_flop \data_output_reg[24] (.clk (CLK), .d (\memory[ptr_read]
       [24]), .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_152),
       .srd (1'b0), .q (data_output[24]));
  CDN_flop \data_output_reg[25] (.clk (CLK), .d (\memory[ptr_read]
       [25]), .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_152),
       .srd (1'b0), .q (data_output[25]));
  CDN_flop \data_output_reg[26] (.clk (CLK), .d (\memory[ptr_read]
       [26]), .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_152),
       .srd (1'b0), .q (data_output[26]));
  CDN_flop \data_output_reg[27] (.clk (CLK), .d (\memory[ptr_read]
       [27]), .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_152),
       .srd (1'b0), .q (data_output[27]));
  CDN_flop \data_output_reg[28] (.clk (CLK), .d (\memory[ptr_read]
       [28]), .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_152),
       .srd (1'b0), .q (data_output[28]));
  CDN_flop \data_output_reg[29] (.clk (CLK), .d (\memory[ptr_read]
       [29]), .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_152),
       .srd (1'b0), .q (data_output[29]));
  CDN_flop \data_output_reg[30] (.clk (CLK), .d (\memory[ptr_read]
       [30]), .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_152),
       .srd (1'b1), .q (data_output[30]));
  CDN_flop \data_output_reg[31] (.clk (CLK), .d (\memory[ptr_read]
       [31]), .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_152),
       .srd (1'b0), .q (data_output[31]));
  CDN_flop \data_output_reg[32] (.clk (CLK), .d (\memory[ptr_read]
       [32]), .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_152),
       .srd (1'b0), .q (data_output[32]));
  CDN_flop \data_output_reg[33] (.clk (CLK), .d (\memory[ptr_read]
       [33]), .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_152),
       .srd (1'b0), .q (data_output[33]));
  CDN_flop \data_output_reg[34] (.clk (CLK), .d (\memory[ptr_read]
       [34]), .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_152),
       .srd (1'b0), .q (data_output[34]));
  CDN_flop \data_output_reg[35] (.clk (CLK), .d (\memory[ptr_read]
       [35]), .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_152),
       .srd (1'b0), .q (data_output[35]));
  CDN_flop \data_output_reg[36] (.clk (CLK), .d (\memory[ptr_read]
       [36]), .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_152),
       .srd (1'b0), .q (data_output[36]));
  CDN_flop \data_output_reg[37] (.clk (CLK), .d (\memory[ptr_read]
       [37]), .sena (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_152),
       .srd (1'b0), .q (data_output[37]));
  xnor g737 (n_2482, ptr_read_A[0], ptr_write_A[0]);
  xnor g738 (n_2483, ptr_read_A[1], ptr_write_A[1]);
  xnor g739 (n_2484, ptr_read_A[2], ptr_write_A[2]);
  xnor g740 (n_2485, ptr_read_A[3], ptr_write_A[3]);
  nand g741 (n_169, n_2482, n_2483, n_2484, n_2485);
  not g742 (empty_signal_A, n_169);
  xnor g743 (n_2487, ptr_read_B[0], ptr_write_B[0]);
  xnor g744 (n_2488, ptr_read_B[1], ptr_write_B[1]);
  xnor g745 (n_2489, ptr_read_B[2], ptr_write_B[2]);
  xnor g746 (n_2490, ptr_read_B[3], ptr_write_B[3]);
  nand g747 (n_198, n_2487, n_2488, n_2489, n_2490);
  not g748 (empty_signal_B, n_198);
  xnor g749 (n_2492, ptr_read_C[0], ptr_write_C[0]);
  xnor g750 (n_2493, ptr_read_C[1], ptr_write_C[1]);
  xnor g751 (n_2494, ptr_read_C[2], ptr_write_C[2]);
  xnor g752 (n_2495, ptr_read_C[3], ptr_write_C[3]);
  nand g753 (n_227, n_2492, n_2493, n_2494, n_2495);
  not g754 (empty_signal_C, n_227);
  xnor g755 (n_2497, ptr_read_A[0], n_157);
  xnor g756 (n_2498, ptr_read_A[1], n_158);
  xnor g757 (n_2499, ptr_read_A[2], n_159);
  xnor g758 (n_2500, ptr_read_A[3], n_160);
  nand g759 (n_2501, n_2497, n_2498, n_2499, n_2500);
  not g760 (n_293, n_2501);
  xnor g771 (n_2510, ptr_read_B[0], n_186);
  xnor g772 (n_2511, ptr_read_B[1], n_187);
  xnor g773 (n_2512, ptr_read_B[2], n_188);
  xnor g774 (n_2513, ptr_read_B[3], n_189);
  nand g775 (n_2514, n_2510, n_2511, n_2512, n_2513);
  not g776 (n_297, n_2514);
  xnor g787 (n_2523, ptr_read_C[0], n_215);
  xnor g788 (n_2524, ptr_read_C[1], n_216);
  xnor g789 (n_2525, ptr_read_C[2], n_217);
  xnor g790 (n_2526, ptr_read_C[3], n_218);
  nand g791 (n_2527, n_2523, n_2524, n_2525, n_2526);
  not g792 (n_301, n_2527);
  not g803 (n_152, reset);
  not g804 (n_153, reset_A);
  not g806 (n_182, reset_B);
  not g808 (n_211, reset_C);
  not g810 (n_241, full_signal);
  not g811 (n_156, full_signal_A);
  not g812 (n_185, full_signal_B);
  not g813 (n_214, full_signal_C);
  and g814 (n_309, n_304, n_241, start_write, reset);
  and g815 (n_354, n_350, n_241, start_write, reset);
  and g816 (n_399, n_395, n_241, start_write, reset);
  and g817 (n_444, n_440, n_241, start_write, reset);
  and g818 (n_489, n_485, n_241, start_write, reset);
  and g819 (n_534, n_530, n_241, start_write, reset);
  and g820 (n_579, n_575, n_241, start_write, reset);
  and g821 (n_624, n_620, n_241, start_write, reset);
  and g822 (n_669, n_665, n_241, start_write, reset);
  and g823 (n_714, n_710, n_241, start_write, reset);
  and g824 (n_759, n_755, n_241, start_write, reset);
  and g825 (n_804, n_800, n_241, start_write, reset);
  and g826 (n_849, n_845, n_241, start_write, reset);
  and g827 (n_894, n_890, n_241, start_write, reset);
  and g828 (n_939, n_935, n_241, start_write, reset);
  and g829 (n_984, n_980, n_241, start_write, reset);
  nor g830 (n_2574, ptr_read_A[3], ptr_read_A[2]);
  nor g831 (n_2575, ptr_read_A[1], ptr_read_A[0]);
  and g832 (n_2576, ptr_write_A[0], ptr_write_A[1]);
  and g833 (n_2577, ptr_write_A[2], ptr_write_A[3]);
  and g834 (n_294, n_2574, n_2575, n_2576, n_2577);
  nor g835 (n_2578, ptr_read_B[3], ptr_read_B[2]);
  nor g836 (n_2579, ptr_read_B[1], ptr_read_B[0]);
  and g837 (n_2580, ptr_write_B[0], ptr_write_B[1]);
  and g838 (n_2581, ptr_write_B[2], ptr_write_B[3]);
  and g839 (n_298, n_2578, n_2579, n_2580, n_2581);
  nor g840 (n_2582, ptr_read_C[3], ptr_read_C[2]);
  nor g841 (n_2583, ptr_read_C[1], ptr_read_C[0]);
  and g842 (n_2584, ptr_write_C[0], ptr_write_C[1]);
  and g843 (n_2585, ptr_write_C[2], ptr_write_C[3]);
  and g844 (n_302, n_2582, n_2583, n_2584, n_2585);
  or g845 (n_2586, ptr_readTmrError, ptr_writeTmrError);
  or g846 (n_2587, resetTmrError, decode_signalTmrError);
  or g847 (tmrError, emptyTmrError, fullTmrError, n_2586, n_2587);
  nand g1 (n_65, n_150, n_151, n_2588, n_2589);
  nand g2 (n_67, n_150, n_151, n_2588, ptr_write[0]);
  nand g3 (n_154, n_150, n_151, ptr_write[1], n_2589);
  nand g4 (n_155, n_150, n_151, ptr_write[1], ptr_write[0]);
  nand g5 (n_2590, n_150, ptr_write[2], n_2588, n_2589);
  nand g6 (n_2591, n_150, ptr_write[2], n_2588, ptr_write[0]);
  nand g7 (n_2592, n_150, ptr_write[2], ptr_write[1], n_2589);
  nand g8 (n_2593, n_150, ptr_write[2], ptr_write[1], ptr_write[0]);
  nand g9 (n_2594, ptr_write[3], n_151, n_2588, n_2589);
  nand g10 (n_2595, ptr_write[3], n_151, n_2588, ptr_write[0]);
  nand g11 (n_2596, ptr_write[3], n_151, ptr_write[1], n_2589);
  nand g12 (n_87, ptr_write[3], n_151, ptr_write[1], ptr_write[0]);
  nand g13 (n_89, ptr_write[3], ptr_write[2], n_2588, n_2589);
  nand g14 (n_91, ptr_write[3], ptr_write[2], n_2588, ptr_write[0]);
  nand g15 (n_93, ptr_write[3], ptr_write[2], ptr_write[1], n_2589);
  nand g16 (n_95, ptr_write[3], ptr_write[2], ptr_write[1],
       ptr_write[0]);
  not g17 (n_304, n_65);
  not g18 (n_350, n_67);
  not g19 (n_395, n_154);
  not g20 (n_440, n_155);
  not g21 (n_485, n_2590);
  not g22 (n_530, n_2591);
  not g23 (n_575, n_2592);
  not g24 (n_620, n_2593);
  not g25 (n_665, n_2594);
  not g26 (n_710, n_2595);
  not g27 (n_755, n_2596);
  not g28 (n_800, n_87);
  not g29 (n_845, n_89);
  not g30 (n_890, n_91);
  not g31 (n_935, n_93);
  not g32 (n_980, n_95);
  not g39 (n_150, ptr_write[3]);
  not g40 (n_151, ptr_write[2]);
  not g41 (n_2588, ptr_write[1]);
  not g42 (n_2589, ptr_write[0]);
endmodule

module bmux_634(ctl, in_0, in_1, in_2, in_3, in_4, in_5, in_6, in_7,
     in_8, in_9, in_10, in_11, in_12, in_13, in_14, in_15, in_16,
     in_17, in_18, in_19, in_20, in_21, in_22, in_23, in_24, in_25,
     in_26, in_27, in_28, in_29, in_30, in_31, in_32, in_33, in_34,
     in_35, in_36, in_37, z);
  input [5:0] ctl;
  input in_0, in_1, in_2, in_3, in_4, in_5, in_6, in_7, in_8, in_9,
       in_10, in_11, in_12, in_13, in_14, in_15, in_16, in_17, in_18,
       in_19, in_20, in_21, in_22, in_23, in_24, in_25, in_26, in_27,
       in_28, in_29, in_30, in_31, in_32, in_33, in_34, in_35, in_36,
       in_37;
  output z;
  wire [5:0] ctl;
  wire in_0, in_1, in_2, in_3, in_4, in_5, in_6, in_7, in_8, in_9,
       in_10, in_11, in_12, in_13, in_14, in_15, in_16, in_17, in_18,
       in_19, in_20, in_21, in_22, in_23, in_24, in_25, in_26, in_27,
       in_28, in_29, in_30, in_31, in_32, in_33, in_34, in_35, in_36,
       in_37;
  wire z;
  CDN_bmux38 g1(.sel0 (ctl[0]), .data0 (in_0), .data1 (in_1), .sel1
       (ctl[1]), .data2 (in_2), .data3 (in_3), .sel2 (ctl[2]), .data4
       (in_4), .data5 (in_5), .data6 (in_6), .data7 (in_7), .sel3
       (ctl[3]), .data8 (in_8), .data9 (in_9), .data10 (in_10), .data11
       (in_11), .data12 (in_12), .data13 (in_13), .data14 (in_14),
       .data15 (in_15), .sel4 (ctl[4]), .data16 (in_16), .data17
       (in_17), .data18 (in_18), .data19 (in_19), .data20 (in_20),
       .data21 (in_21), .data22 (in_22), .data23 (in_23), .data24
       (in_24), .data25 (in_25), .data26 (in_26), .data27 (in_27),
       .data28 (in_28), .data29 (in_29), .data30 (in_30), .data31
       (in_31), .sel5 (ctl[5]), .data32 (in_32), .data33 (in_33),
       .data34 (in_34), .data35 (in_35), .data36 (in_36), .data37
       (in_37), .z (z));
endmodule

module sub_unsigned_680(A, B, Z);
  input [5:0] A;
  input B;
  output [5:0] Z;
  wire [5:0] A;
  wire B;
  wire [5:0] Z;
  wire n_26, n_29, n_32, n_34, n_35, n_36, n_42, n_48;
  wire n_50, n_52, n_54, n_56, n_63, n_67, n_69;
  not g7 (n_26, B);
  xor g9 (n_69, A[0], n_26);
  nand g12 (n_32, n_29, B);
  nand g25 (n_48, n_34, n_35);
  nor g28 (n_52, A[2], A[3]);
  nand g36 (n_63, n_36, n_50);
  nand g38 (n_54, n_52, n_50);
  nand g41 (n_67, n_42, n_56);
  xnor g45 (Z[1], n_32, A[1]);
  xnor g47 (Z[2], n_48, A[2]);
  xnor g50 (Z[3], n_63, A[3]);
  xnor g52 (Z[4], n_54, A[4]);
  xnor g55 (Z[5], n_67, A[5]);
  not g57 (n_42, A[4]);
  not g59 (n_36, A[2]);
  not g61 (n_34, A[1]);
  not g62 (n_29, A[0]);
  not g63 (Z[0], n_69);
  not g64 (n_35, n_32);
  not g65 (n_50, n_48);
  not g66 (n_56, n_54);
endmodule

module Hamm_RX_Nbits_3232_Nbits_ham38(CLK, reset, decode_signal,
     data_ham_out, data_output, HammError);
  input CLK, reset, decode_signal;
  input [37:0] data_ham_out;
  output [31:0] data_output;
  output HammError;
  wire CLK, reset, decode_signal;
  wire [37:0] data_ham_out;
  wire [31:0] data_output;
  wire HammError;
  wire [37:0] data_ham_corrected;
  wire UNCONNECTED1319, UNCONNECTED1320, UNCONNECTED1321,
       UNCONNECTED1322, UNCONNECTED1323, UNCONNECTED1324,
       UNCONNECTED1325, UNCONNECTED1326;
  wire UNCONNECTED1327, UNCONNECTED1328, UNCONNECTED1329,
       UNCONNECTED1330, UNCONNECTED1331, UNCONNECTED1332,
       UNCONNECTED1333, UNCONNECTED1334;
  wire UNCONNECTED1335, UNCONNECTED1336, UNCONNECTED1337,
       UNCONNECTED1338, UNCONNECTED1339, UNCONNECTED1340,
       UNCONNECTED1341, UNCONNECTED1342;
  wire UNCONNECTED1343, UNCONNECTED1344, UNCONNECTED1345,
       UNCONNECTED1346, UNCONNECTED1347, UNCONNECTED1348,
       UNCONNECTED1349, UNCONNECTED1350;
  wire UNCONNECTED1351, e0, e1, e2, e3, e4, e5, n_42;
  wire n_43, n_44, n_45, n_46, n_47, n_48, n_49, n_50;
  wire n_51, n_52, n_53, n_54, n_55, n_56, n_57, n_58;
  wire n_59, n_60, n_61, n_62, n_63, n_64, n_65, n_66;
  wire n_67, n_68, n_69, n_70, n_71, n_72, n_73, n_74;
  wire n_75, n_76, n_77, n_78, n_79, n_80, n_85, n_87;
  wire n_88, n_89, n_90, n_91, n_92, n_93, n_94, n_96;
  wire n_98, n_100, n_102, n_104, n_106, n_108, n_110, n_112;
  wire n_114, n_116, n_118, n_120, n_122, n_124, n_126, n_128;
  wire n_130, n_132, n_134, n_136, n_138, n_140, n_142, n_144;
  wire n_146, n_148, n_150, n_152, n_154, n_156, n_158, n_160;
  wire n_162, n_164, n_166, n_168, n_170, n_255, n_256, n_257;
  wire n_258, n_259, n_260, n_261, n_298, n_299, n_300, n_301;
  wire n_302, n_303, n_304, n_305, n_306, n_307, n_308, n_309;
  wire n_310, n_311, n_312, n_313, n_314, n_315, n_316, n_317;
  wire n_318, n_418, n_419, n_420, n_421, n_456, n_457, n_458;
  wire n_459, n_460, n_461, n_462, n_463, n_472, n_473, n_474;
  wire n_475, n_476, n_477, n_478, n_479, n_480, n_481, n_482;
  wire n_483, n_484, n_485, n_486, n_487, n_488, n_489, n_491;
  wire n_492, n_493, n_496, n_498, n_500, n_504, n_505, n_507;
  wire n_510, n_539, n_540, n_541, n_542, n_543, n_544, n_545;
  wire n_546, n_547, n_548, n_549, n_550, n_551, n_552, n_553;
  wire n_554, n_555, n_556, n_557, n_558, n_559, n_560, n_561;
  wire n_562, n_563, n_564;
  bmux_634 mux_data_ham_out_72_50(.ctl ({n_260, n_259, n_258, n_257,
       n_256, n_255}), .in_0 (data_ham_out[0]), .in_1
       (data_ham_out[1]), .in_2 (data_ham_out[2]), .in_3
       (data_ham_out[3]), .in_4 (data_ham_out[4]), .in_5
       (data_ham_out[5]), .in_6 (data_ham_out[6]), .in_7
       (data_ham_out[7]), .in_8 (data_ham_out[8]), .in_9
       (data_ham_out[9]), .in_10 (data_ham_out[10]), .in_11
       (data_ham_out[11]), .in_12 (data_ham_out[12]), .in_13
       (data_ham_out[13]), .in_14 (data_ham_out[14]), .in_15
       (data_ham_out[15]), .in_16 (data_ham_out[16]), .in_17
       (data_ham_out[17]), .in_18 (data_ham_out[18]), .in_19
       (data_ham_out[19]), .in_20 (data_ham_out[20]), .in_21
       (data_ham_out[21]), .in_22 (data_ham_out[22]), .in_23
       (data_ham_out[23]), .in_24 (data_ham_out[24]), .in_25
       (data_ham_out[25]), .in_26 (data_ham_out[26]), .in_27
       (data_ham_out[27]), .in_28 (data_ham_out[28]), .in_29
       (data_ham_out[29]), .in_30 (data_ham_out[30]), .in_31
       (data_ham_out[31]), .in_32 (data_ham_out[32]), .in_33
       (data_ham_out[33]), .in_34 (data_ham_out[34]), .in_35
       (data_ham_out[35]), .in_36 (data_ham_out[36]), .in_37
       (data_ham_out[37]), .z (n_261));
  bmux mux_data_ham_corrected_72_6(.ctl (n_42), .in_0
       (data_ham_out[0]), .in_1 (n_44), .z (n_96));
  bmux mux_data_ham_corrected_72_92(.ctl (n_43), .in_0
       (data_ham_out[1]), .in_1 (n_44), .z (n_98));
  bmux mux_data_ham_corrected_72_93(.ctl (n_45), .in_0
       (data_ham_out[2]), .in_1 (n_44), .z (n_100));
  bmux mux_data_ham_corrected_72_94(.ctl (n_46), .in_0
       (data_ham_out[3]), .in_1 (n_44), .z (n_102));
  bmux mux_data_ham_corrected_72_95(.ctl (n_47), .in_0
       (data_ham_out[4]), .in_1 (n_44), .z (n_104));
  bmux mux_data_ham_corrected_72_96(.ctl (n_48), .in_0
       (data_ham_out[5]), .in_1 (n_44), .z (n_106));
  bmux mux_data_ham_corrected_72_97(.ctl (n_49), .in_0
       (data_ham_out[6]), .in_1 (n_44), .z (n_108));
  bmux mux_data_ham_corrected_72_98(.ctl (n_50), .in_0
       (data_ham_out[7]), .in_1 (n_44), .z (n_110));
  bmux mux_data_ham_corrected_72_99(.ctl (n_51), .in_0
       (data_ham_out[8]), .in_1 (n_44), .z (n_112));
  bmux mux_data_ham_corrected_72_100(.ctl (n_52), .in_0
       (data_ham_out[9]), .in_1 (n_44), .z (n_114));
  bmux mux_data_ham_corrected_72_101(.ctl (n_53), .in_0
       (data_ham_out[10]), .in_1 (n_44), .z (n_116));
  bmux mux_data_ham_corrected_72_102(.ctl (n_54), .in_0
       (data_ham_out[11]), .in_1 (n_44), .z (n_118));
  bmux mux_data_ham_corrected_72_103(.ctl (n_55), .in_0
       (data_ham_out[12]), .in_1 (n_44), .z (n_120));
  bmux mux_data_ham_corrected_72_104(.ctl (n_56), .in_0
       (data_ham_out[13]), .in_1 (n_44), .z (n_122));
  bmux mux_data_ham_corrected_72_105(.ctl (n_57), .in_0
       (data_ham_out[14]), .in_1 (n_44), .z (n_124));
  bmux mux_data_ham_corrected_72_106(.ctl (n_58), .in_0
       (data_ham_out[15]), .in_1 (n_44), .z (n_126));
  bmux mux_data_ham_corrected_72_107(.ctl (n_59), .in_0
       (data_ham_out[16]), .in_1 (n_44), .z (n_128));
  bmux mux_data_ham_corrected_72_108(.ctl (n_60), .in_0
       (data_ham_out[17]), .in_1 (n_44), .z (n_130));
  bmux mux_data_ham_corrected_72_109(.ctl (n_61), .in_0
       (data_ham_out[18]), .in_1 (n_44), .z (n_132));
  bmux mux_data_ham_corrected_72_110(.ctl (n_62), .in_0
       (data_ham_out[19]), .in_1 (n_44), .z (n_134));
  bmux mux_data_ham_corrected_72_111(.ctl (n_63), .in_0
       (data_ham_out[20]), .in_1 (n_44), .z (n_136));
  bmux mux_data_ham_corrected_72_112(.ctl (n_64), .in_0
       (data_ham_out[21]), .in_1 (n_44), .z (n_138));
  bmux mux_data_ham_corrected_72_113(.ctl (n_65), .in_0
       (data_ham_out[22]), .in_1 (n_44), .z (n_140));
  bmux mux_data_ham_corrected_72_114(.ctl (n_66), .in_0
       (data_ham_out[23]), .in_1 (n_44), .z (n_142));
  bmux mux_data_ham_corrected_72_115(.ctl (n_67), .in_0
       (data_ham_out[24]), .in_1 (n_44), .z (n_144));
  bmux mux_data_ham_corrected_72_116(.ctl (n_68), .in_0
       (data_ham_out[25]), .in_1 (n_44), .z (n_146));
  bmux mux_data_ham_corrected_72_117(.ctl (n_69), .in_0
       (data_ham_out[26]), .in_1 (n_44), .z (n_148));
  bmux mux_data_ham_corrected_72_118(.ctl (n_70), .in_0
       (data_ham_out[27]), .in_1 (n_44), .z (n_150));
  bmux mux_data_ham_corrected_72_119(.ctl (n_71), .in_0
       (data_ham_out[28]), .in_1 (n_44), .z (n_152));
  bmux mux_data_ham_corrected_72_120(.ctl (n_72), .in_0
       (data_ham_out[29]), .in_1 (n_44), .z (n_154));
  bmux mux_data_ham_corrected_72_121(.ctl (n_73), .in_0
       (data_ham_out[30]), .in_1 (n_44), .z (n_156));
  bmux mux_data_ham_corrected_72_122(.ctl (n_74), .in_0
       (data_ham_out[31]), .in_1 (n_44), .z (n_158));
  bmux mux_data_ham_corrected_72_123(.ctl (n_75), .in_0
       (data_ham_out[32]), .in_1 (n_44), .z (n_160));
  bmux mux_data_ham_corrected_72_124(.ctl (n_76), .in_0
       (data_ham_out[33]), .in_1 (n_44), .z (n_162));
  bmux mux_data_ham_corrected_72_125(.ctl (n_77), .in_0
       (data_ham_out[34]), .in_1 (n_44), .z (n_164));
  bmux mux_data_ham_corrected_72_126(.ctl (n_78), .in_0
       (data_ham_out[35]), .in_1 (n_44), .z (n_166));
  bmux mux_data_ham_corrected_72_127(.ctl (n_79), .in_0
       (data_ham_out[36]), .in_1 (n_44), .z (n_168));
  bmux mux_data_ham_corrected_72_128(.ctl (n_80), .in_0
       (data_ham_out[37]), .in_1 (n_44), .z (n_170));
  sub_unsigned_680 sub_72_39(.A ({e5, e4, e3, e2, e1, e0}), .B (1'b1),
       .Z ({n_260, n_259, n_258, n_257, n_256, n_255}));
  bmux mux_51_20(.ctl (n_85), .in_0 (n_87), .in_1 (1'b0), .z (e0));
  bmux mux_52_20(.ctl (n_85), .in_0 (n_88), .in_1 (1'b0), .z (e1));
  bmux mux_53_20(.ctl (n_85), .in_0 (n_89), .in_1 (1'b0), .z (e2));
  bmux mux_54_20(.ctl (n_85), .in_0 (n_90), .in_1 (1'b0), .z (e3));
  bmux mux_55_20(.ctl (n_85), .in_0 (n_91), .in_1 (1'b0), .z (e4));
  bmux mux_56_20(.ctl (n_85), .in_0 (n_92), .in_1 (1'b0), .z (e5));
  bmux mux_HammError_68_24(.ctl (n_93), .in_0 (1'b1), .in_1 (1'b0), .z
       (n_94));
  bmux mux_HammError_62_13(.ctl (n_85), .in_0 (n_94), .in_1 (1'b0), .z
       (UNCONNECTED1319));
  bmux_516 mux_data_ham_corrected_68_24(.ctl (n_93), .in_0 ({n_170,
       n_168, n_166, n_164, n_162, n_160, n_158, n_156, n_154, n_152,
       n_150, n_148, n_146, n_144, n_142, n_140, n_138, n_136, n_134,
       n_132, n_130, n_128, n_126, n_124, n_122, n_120, n_118, n_116,
       n_114, n_112, n_110, n_108, n_106, n_104, n_102, n_100, n_98,
       n_96}), .in_1 (data_ham_out), .z (data_ham_corrected));
  bmux_279 mux_data_output_62_13(.ctl (n_85), .in_0
       ({data_ham_corrected[37:32], data_ham_corrected[30:16],
       data_ham_corrected[14:8], data_ham_corrected[6:4],
       data_ham_corrected[2]}), .in_1
       (32'b11101010101010101010101010101010), .z ({UNCONNECTED1351,
       UNCONNECTED1350, UNCONNECTED1349, UNCONNECTED1348,
       UNCONNECTED1347, UNCONNECTED1346, UNCONNECTED1345,
       UNCONNECTED1344, UNCONNECTED1343, UNCONNECTED1342,
       UNCONNECTED1341, UNCONNECTED1340, UNCONNECTED1339,
       UNCONNECTED1338, UNCONNECTED1337, UNCONNECTED1336,
       UNCONNECTED1335, UNCONNECTED1334, UNCONNECTED1333,
       UNCONNECTED1332, UNCONNECTED1331, UNCONNECTED1330,
       UNCONNECTED1329, UNCONNECTED1328, UNCONNECTED1327,
       UNCONNECTED1326, UNCONNECTED1325, UNCONNECTED1324,
       UNCONNECTED1323, UNCONNECTED1322, UNCONNECTED1321,
       UNCONNECTED1320}));
  not g91 (n_44, n_261);
  nor g134 (n_80, n_298, n_299);
  nor g135 (n_79, n_299, n_300);
  nor g136 (n_78, n_298, n_301);
  nor g137 (n_77, n_300, n_301);
  nor g138 (n_76, n_298, n_302);
  nor g139 (n_75, n_300, n_302);
  nor g140 (n_74, n_303, n_304);
  nor g141 (n_73, n_304, n_305);
  nor g142 (n_72, n_303, n_306);
  nor g143 (n_71, n_305, n_306);
  nor g144 (n_70, n_303, n_307);
  nor g145 (n_69, n_305, n_307);
  nor g146 (n_68, n_303, n_308);
  nor g147 (n_67, n_305, n_308);
  nor g148 (n_66, n_304, n_309);
  nor g149 (n_65, n_304, n_310);
  nor g150 (n_64, n_309, n_306);
  nor g151 (n_63, n_310, n_306);
  nor g152 (n_62, n_309, n_307);
  nor g153 (n_61, n_310, n_307);
  nor g154 (n_60, n_309, n_308);
  nor g155 (n_59, n_310, n_308);
  nor g156 (n_58, n_304, n_311);
  nor g157 (n_57, n_304, n_312);
  nor g158 (n_56, n_311, n_306);
  nor g159 (n_55, n_312, n_306);
  nor g160 (n_54, n_311, n_307);
  nor g161 (n_53, n_312, n_307);
  nor g162 (n_52, n_311, n_308);
  nor g163 (n_51, n_312, n_308);
  nor g164 (n_50, n_298, n_304);
  nor g165 (n_49, n_300, n_304);
  nor g166 (n_48, n_298, n_306);
  nor g167 (n_47, n_300, n_306);
  nor g168 (n_46, n_298, n_307);
  nor g169 (n_45, n_300, n_307);
  nor g170 (n_43, n_298, n_308);
  nor g171 (n_42, n_300, n_308);
  nand g92 (n_303, n_255, n_259, n_258);
  not g97 (n_313, n_260);
  not g98 (n_314, n_257);
  not g99 (n_315, n_256);
  not g100 (n_316, n_255);
  not g101 (n_317, n_258);
  not g102 (n_318, n_259);
  nand g103 (n_298, n_318, n_317, n_255);
  nand g104 (n_299, n_260, n_257, n_315);
  nand g105 (n_300, n_316, n_318, n_317);
  nand g106 (n_301, n_260, n_314, n_256);
  nand g107 (n_302, n_260, n_314, n_315);
  nand g108 (n_304, n_313, n_257, n_256);
  nand g109 (n_305, n_259, n_258, n_316);
  nand g110 (n_306, n_313, n_257, n_315);
  nand g111 (n_307, n_313, n_314, n_256);
  nand g112 (n_308, n_315, n_314, n_313);
  nand g113 (n_309, n_259, n_317, n_255);
  nand g114 (n_310, n_259, n_317, n_316);
  nand g115 (n_311, n_318, n_258, n_255);
  nand g116 (n_312, n_318, n_258, n_316);
  CDN_flop \data_output_reg[0] (.clk (CLK), .d (data_ham_corrected[2]),
       .sena (decode_signal), .aclr (1'b0), .apre (1'b0), .srl (n_85),
       .srd (1'b0), .q (data_output[0]));
  CDN_flop \data_output_reg[1] (.clk (CLK), .d (data_ham_corrected[4]),
       .sena (decode_signal), .aclr (1'b0), .apre (1'b0), .srl (n_85),
       .srd (1'b1), .q (data_output[1]));
  CDN_flop \data_output_reg[2] (.clk (CLK), .d (data_ham_corrected[5]),
       .sena (decode_signal), .aclr (1'b0), .apre (1'b0), .srl (n_85),
       .srd (1'b0), .q (data_output[2]));
  CDN_flop \data_output_reg[3] (.clk (CLK), .d (data_ham_corrected[6]),
       .sena (decode_signal), .aclr (1'b0), .apre (1'b0), .srl (n_85),
       .srd (1'b1), .q (data_output[3]));
  CDN_flop \data_output_reg[4] (.clk (CLK), .d (data_ham_corrected[8]),
       .sena (decode_signal), .aclr (1'b0), .apre (1'b0), .srl (n_85),
       .srd (1'b0), .q (data_output[4]));
  CDN_flop \data_output_reg[5] (.clk (CLK), .d (data_ham_corrected[9]),
       .sena (decode_signal), .aclr (1'b0), .apre (1'b0), .srl (n_85),
       .srd (1'b1), .q (data_output[5]));
  CDN_flop \data_output_reg[6] (.clk (CLK), .d
       (data_ham_corrected[10]), .sena (decode_signal), .aclr (1'b0),
       .apre (1'b0), .srl (n_85), .srd (1'b0), .q (data_output[6]));
  CDN_flop \data_output_reg[7] (.clk (CLK), .d
       (data_ham_corrected[11]), .sena (decode_signal), .aclr (1'b0),
       .apre (1'b0), .srl (n_85), .srd (1'b1), .q (data_output[7]));
  CDN_flop \data_output_reg[8] (.clk (CLK), .d
       (data_ham_corrected[12]), .sena (decode_signal), .aclr (1'b0),
       .apre (1'b0), .srl (n_85), .srd (1'b0), .q (data_output[8]));
  CDN_flop \data_output_reg[9] (.clk (CLK), .d
       (data_ham_corrected[13]), .sena (decode_signal), .aclr (1'b0),
       .apre (1'b0), .srl (n_85), .srd (1'b1), .q (data_output[9]));
  CDN_flop \data_output_reg[10] (.clk (CLK), .d
       (data_ham_corrected[14]), .sena (decode_signal), .aclr (1'b0),
       .apre (1'b0), .srl (n_85), .srd (1'b0), .q (data_output[10]));
  CDN_flop \data_output_reg[11] (.clk (CLK), .d
       (data_ham_corrected[16]), .sena (decode_signal), .aclr (1'b0),
       .apre (1'b0), .srl (n_85), .srd (1'b1), .q (data_output[11]));
  CDN_flop \data_output_reg[12] (.clk (CLK), .d
       (data_ham_corrected[17]), .sena (decode_signal), .aclr (1'b0),
       .apre (1'b0), .srl (n_85), .srd (1'b0), .q (data_output[12]));
  CDN_flop \data_output_reg[13] (.clk (CLK), .d
       (data_ham_corrected[18]), .sena (decode_signal), .aclr (1'b0),
       .apre (1'b0), .srl (n_85), .srd (1'b1), .q (data_output[13]));
  CDN_flop \data_output_reg[14] (.clk (CLK), .d
       (data_ham_corrected[19]), .sena (decode_signal), .aclr (1'b0),
       .apre (1'b0), .srl (n_85), .srd (1'b0), .q (data_output[14]));
  CDN_flop \data_output_reg[15] (.clk (CLK), .d
       (data_ham_corrected[20]), .sena (decode_signal), .aclr (1'b0),
       .apre (1'b0), .srl (n_85), .srd (1'b1), .q (data_output[15]));
  CDN_flop \data_output_reg[16] (.clk (CLK), .d
       (data_ham_corrected[21]), .sena (decode_signal), .aclr (1'b0),
       .apre (1'b0), .srl (n_85), .srd (1'b0), .q (data_output[16]));
  CDN_flop \data_output_reg[17] (.clk (CLK), .d
       (data_ham_corrected[22]), .sena (decode_signal), .aclr (1'b0),
       .apre (1'b0), .srl (n_85), .srd (1'b1), .q (data_output[17]));
  CDN_flop \data_output_reg[18] (.clk (CLK), .d
       (data_ham_corrected[23]), .sena (decode_signal), .aclr (1'b0),
       .apre (1'b0), .srl (n_85), .srd (1'b0), .q (data_output[18]));
  CDN_flop \data_output_reg[19] (.clk (CLK), .d
       (data_ham_corrected[24]), .sena (decode_signal), .aclr (1'b0),
       .apre (1'b0), .srl (n_85), .srd (1'b1), .q (data_output[19]));
  CDN_flop \data_output_reg[20] (.clk (CLK), .d
       (data_ham_corrected[25]), .sena (decode_signal), .aclr (1'b0),
       .apre (1'b0), .srl (n_85), .srd (1'b0), .q (data_output[20]));
  CDN_flop \data_output_reg[21] (.clk (CLK), .d
       (data_ham_corrected[26]), .sena (decode_signal), .aclr (1'b0),
       .apre (1'b0), .srl (n_85), .srd (1'b1), .q (data_output[21]));
  CDN_flop \data_output_reg[22] (.clk (CLK), .d
       (data_ham_corrected[27]), .sena (decode_signal), .aclr (1'b0),
       .apre (1'b0), .srl (n_85), .srd (1'b0), .q (data_output[22]));
  CDN_flop \data_output_reg[23] (.clk (CLK), .d
       (data_ham_corrected[28]), .sena (decode_signal), .aclr (1'b0),
       .apre (1'b0), .srl (n_85), .srd (1'b1), .q (data_output[23]));
  CDN_flop \data_output_reg[24] (.clk (CLK), .d
       (data_ham_corrected[29]), .sena (decode_signal), .aclr (1'b0),
       .apre (1'b0), .srl (n_85), .srd (1'b0), .q (data_output[24]));
  CDN_flop \data_output_reg[25] (.clk (CLK), .d
       (data_ham_corrected[30]), .sena (decode_signal), .aclr (1'b0),
       .apre (1'b0), .srl (n_85), .srd (1'b1), .q (data_output[25]));
  CDN_flop \data_output_reg[26] (.clk (CLK), .d
       (data_ham_corrected[32]), .sena (decode_signal), .aclr (1'b0),
       .apre (1'b0), .srl (n_85), .srd (1'b0), .q (data_output[26]));
  CDN_flop \data_output_reg[27] (.clk (CLK), .d
       (data_ham_corrected[33]), .sena (decode_signal), .aclr (1'b0),
       .apre (1'b0), .srl (n_85), .srd (1'b1), .q (data_output[27]));
  CDN_flop \data_output_reg[28] (.clk (CLK), .d
       (data_ham_corrected[34]), .sena (decode_signal), .aclr (1'b0),
       .apre (1'b0), .srl (n_85), .srd (1'b0), .q (data_output[28]));
  CDN_flop \data_output_reg[29] (.clk (CLK), .d
       (data_ham_corrected[35]), .sena (decode_signal), .aclr (1'b0),
       .apre (1'b0), .srl (n_85), .srd (1'b1), .q (data_output[29]));
  CDN_flop \data_output_reg[30] (.clk (CLK), .d
       (data_ham_corrected[36]), .sena (decode_signal), .aclr (1'b0),
       .apre (1'b0), .srl (n_85), .srd (1'b1), .q (data_output[30]));
  CDN_flop \data_output_reg[31] (.clk (CLK), .d
       (data_ham_corrected[37]), .sena (decode_signal), .aclr (1'b0),
       .apre (1'b0), .srl (n_85), .srd (1'b1), .q (data_output[31]));
  CDN_flop HammError_reg(.clk (CLK), .d (n_94), .sena (decode_signal),
       .aclr (1'b0), .apre (1'b0), .srl (n_85), .srd (1'b0), .q
       (HammError));
  nor g241 (n_420, e5, e4, e3, e2);
  not g242 (n_418, e1);
  nand g243 (n_421, n_418, n_419, n_420);
  not g244 (n_93, n_421);
  not g245 (n_85, reset);
  not g246 (n_419, e0);
  xor g248 (n_456, data_ham_out[5], data_ham_out[6]);
  xor g249 (n_457, data_ham_out[9], data_ham_out[10]);
  xor g250 (n_458, data_ham_out[13], data_ham_out[14]);
  xor g251 (n_459, data_ham_out[17], data_ham_out[18]);
  xor g252 (n_460, data_ham_out[21], data_ham_out[22]);
  xor g253 (n_461, data_ham_out[25], data_ham_out[26]);
  xor g254 (n_462, data_ham_out[29], data_ham_out[30]);
  xor g255 (n_463, data_ham_out[33], data_ham_out[34]);
  xor g265 (n_472, data_ham_out[0], data_ham_out[2]);
  xor g266 (n_473, data_ham_out[4], data_ham_out[6]);
  xor g267 (n_474, data_ham_out[8], data_ham_out[10]);
  xor g268 (n_475, data_ham_out[12], data_ham_out[14]);
  xor g269 (n_476, data_ham_out[16], data_ham_out[18]);
  xor g270 (n_477, data_ham_out[20], data_ham_out[22]);
  xor g271 (n_478, data_ham_out[24], data_ham_out[26]);
  xor g272 (n_479, data_ham_out[28], data_ham_out[30]);
  xor g273 (n_480, data_ham_out[32], data_ham_out[34]);
  xor g274 (n_481, data_ham_out[36], n_472);
  xor g275 (n_482, n_473, n_474);
  xor g276 (n_483, n_475, n_476);
  xor g277 (n_484, n_477, n_478);
  xor g278 (n_485, n_479, n_480);
  xor g279 (n_486, n_481, n_482);
  xor g280 (n_487, n_483, n_484);
  xor g281 (n_488, n_485, n_486);
  xor g282 (n_87, n_487, n_488);
  xor g283 (n_489, data_ham_out[31], data_ham_out[32]);
  xor g285 (n_491, data_ham_out[35], data_ham_out[36]);
  xor g286 (n_492, data_ham_out[37], n_489);
  xor g287 (n_493, n_463, n_491);
  xor g288 (n_92, n_492, n_493);
  xor g291 (n_496, data_ham_out[19], data_ham_out[20]);
  xor g293 (n_498, data_ham_out[23], data_ham_out[24]);
  xor g295 (n_500, data_ham_out[27], data_ham_out[28]);
  xor g299 (n_504, n_498, n_461);
  xor g300 (n_505, n_500, n_462);
  xor g302 (n_507, n_504, n_505);
  xor g306 (n_510, data_ham_out[11], data_ham_out[12]);
  xor g337 (n_539, n_458, n_459);
  xor g338 (n_540, n_460, n_461);
  xor g339 (n_541, n_462, n_463);
  xor g340 (n_542, data_ham_out[37], data_ham_out[1]);
  xor g341 (n_543, data_ham_out[2], n_456);
  xor g342 (n_544, n_457, n_539);
  xor g343 (n_545, n_540, n_541);
  xor g344 (n_546, n_542, n_543);
  xor g345 (n_547, n_544, n_545);
  xor g346 (n_88, n_546, n_547);
  xor g347 (n_548, data_ham_out[15], data_ham_out[16]);
  xor g348 (n_549, n_459, n_496);
  xor g349 (n_550, n_460, n_507);
  xor g350 (n_551, n_548, n_549);
  xor g351 (n_91, n_550, n_551);
  xor g352 (n_552, data_ham_out[7], data_ham_out[8]);
  xor g353 (n_553, n_457, n_510);
  xor g354 (n_554, n_458, n_507);
  xor g355 (n_555, n_552, n_553);
  xor g356 (n_90, n_554, n_555);
  xor g357 (n_556, n_458, n_496);
  xor g358 (n_557, n_460, n_500);
  xor g359 (n_558, n_462, n_491);
  xor g360 (n_559, data_ham_out[37], data_ham_out[3]);
  xor g361 (n_560, data_ham_out[4], n_456);
  xor g362 (n_561, n_510, n_556);
  xor g363 (n_562, n_557, n_558);
  xor g364 (n_563, n_559, n_560);
  xor g365 (n_564, n_561, n_562);
  xor g366 (n_89, n_563, n_564);
endmodule

module LDTU_oFIFO_top_Nbits_3232_FifoDepth_buff16_bits_ptr4(CLK_A,
     CLK_B, CLK_C, reset_A, reset_B, reset_C, write_signal,
     read_signal, data_in_32, DATA32_DTU, full_signal, decode_signal,
     tmrError);
  input CLK_A, CLK_B, CLK_C, reset_A, reset_B, reset_C, write_signal,
       read_signal;
  input [31:0] data_in_32;
  output [31:0] DATA32_DTU;
  output full_signal, decode_signal, tmrError;
  wire CLK_A, CLK_B, CLK_C, reset_A, reset_B, reset_C, write_signal,
       read_signal;
  wire [31:0] data_in_32;
  wire [31:0] DATA32_DTU;
  wire full_signal, decode_signal, tmrError;
  wire [37:0] data_in_38;
  wire [37:0] data_out_38;
  wire [31:0] data_out_32;
  wire [31:0] DATA32_DTU_A;
  wire [31:0] DATA32_DTU_B;
  wire [31:0] DATA32_DTU_C;
  wire CLK, CLK_TmrError, DATA32_DTUTmrError, HammError,
       UNCONNECTED1352, UNCONNECTED1353, UNCONNECTED1354,
       UNCONNECTED1355;
  wire UNCONNECTED1356, UNCONNECTED1357, UNCONNECTED1358,
       UNCONNECTED1359, UNCONNECTED1360, UNCONNECTED1361,
       UNCONNECTED1362, UNCONNECTED1363;
  wire UNCONNECTED1364, UNCONNECTED1365, UNCONNECTED1366,
       UNCONNECTED1367, UNCONNECTED1368, UNCONNECTED1369,
       UNCONNECTED1370, UNCONNECTED1371;
  wire UNCONNECTED1372, UNCONNECTED1373, UNCONNECTED1374,
       UNCONNECTED1375, UNCONNECTED1376, UNCONNECTED1377,
       UNCONNECTED1378, UNCONNECTED1379;
  wire UNCONNECTED1380, UNCONNECTED1381, UNCONNECTED1382,
       UNCONNECTED1383, UNCONNECTED1384, UNCONNECTED1385,
       UNCONNECTED1386, UNCONNECTED1387;
  wire UNCONNECTED1388, UNCONNECTED1389, UNCONNECTED1390,
       UNCONNECTED1391, UNCONNECTED1392, UNCONNECTED1393,
       UNCONNECTED1394, UNCONNECTED1395;
  wire UNCONNECTED1396, UNCONNECTED1397, UNCONNECTED1398,
       UNCONNECTED1399, UNCONNECTED1400, UNCONNECTED1401,
       UNCONNECTED1402, UNCONNECTED1403;
  wire UNCONNECTED1404, UNCONNECTED1405, UNCONNECTED1406,
       UNCONNECTED1407, UNCONNECTED1408, UNCONNECTED1409,
       UNCONNECTED1410, UNCONNECTED1411;
  wire UNCONNECTED1412, UNCONNECTED1413, UNCONNECTED1414,
       UNCONNECTED1415, UNCONNECTED1416, UNCONNECTED1417,
       UNCONNECTED1418, UNCONNECTED1419;
  wire UNCONNECTED1420, UNCONNECTED1421, UNCONNECTED1422,
       UNCONNECTED1423, UNCONNECTED1424, UNCONNECTED1425,
       UNCONNECTED1426, UNCONNECTED1427;
  wire UNCONNECTED1428, UNCONNECTED1429, UNCONNECTED1430,
       UNCONNECTED1431, UNCONNECTED1432, UNCONNECTED1433,
       UNCONNECTED1434, UNCONNECTED1435;
  wire UNCONNECTED1436, UNCONNECTED1437, UNCONNECTED1438,
       UNCONNECTED1439, UNCONNECTED1440, UNCONNECTED1441,
       UNCONNECTED1442, UNCONNECTED1443;
  wire UNCONNECTED1444, UNCONNECTED1445, UNCONNECTED1446,
       UNCONNECTED1447, empty_signal, empty_signal_A, empty_signal_B,
       empty_signal_C;
  wire n_202, n_205, n_206, n_207, n_208, n_209, n_210, n_211;
  wire n_212, n_213, n_214, n_215, n_216, n_217, n_218, n_219;
  wire n_220, n_221, n_222, n_223, n_224, n_225, n_226, n_227;
  wire n_228, n_229, n_230, n_231, n_232, n_233, n_234, n_235;
  wire n_236, n_237, n_240, n_241, n_242, n_243, n_244, n_245;
  wire n_246, n_247, n_248, n_249, n_250, n_251, n_252, n_253;
  wire n_254, n_255, n_256, n_257, n_258, n_259, n_260, n_261;
  wire n_262, n_263, n_264, n_265, n_266, n_267, n_268, n_269;
  wire n_270, n_271, n_272, n_275, n_276, n_277, n_278, n_279;
  wire n_280, n_281, n_282, n_283, n_284, n_285, n_286, n_287;
  wire n_288, n_289, n_290, n_291, n_292, n_293, n_294, n_295;
  wire n_296, n_297, n_298, n_299, n_300, n_301, n_302, n_303;
  wire n_304, n_305, n_306, n_673, read_signal_A, read_signal_B,
       read_signal_C, reset;
  wire resetTmrError, start_write, tmrError_oFIFO;
  Hamm_TRX_Nbits_3232_Nbits_ham38 Hamming_32_38(.CLK (CLK), .reset
       (reset), .data_input (data_in_32), .data_ham_in (data_in_38),
       .write_signal (write_signal), .start_write (start_write));
  LDTU_oFIFOTMR_Nbits_ham38 FIFO(.CLK (CLK), .reset_A (reset_A),
       .reset_B (reset_B), .reset_C (reset_C), .start_write
       (start_write), .read_signal (read_signal), .data_input
       (data_in_38), .data_output (data_out_38), .empty_signal
       (empty_signal), .full_signal (full_signal), .decode_signal
       (decode_signal), .tmrError (tmrError_oFIFO));
  Hamm_RX_Nbits_3232_Nbits_ham38 Hamming_38_32(.CLK (CLK), .reset
       (reset), .decode_signal (decode_signal), .data_ham_out
       (data_out_38), .data_output (data_out_32), .HammError
       (HammError));
  majorityVoter resetVoter(.inA (reset_A), .inB (reset_B), .inC
       (reset_C), .out (reset), .tmrErr (resetTmrError));
  majorityVoter CLK_Voter(.inA (CLK_A), .inB (CLK_B), .inC (CLK_C),
       .out (CLK), .tmrErr (CLK_TmrError));
  majorityVoter_WIDTH32 DATA32_DTUVoter(.inA (DATA32_DTU_A), .inB
       (DATA32_DTU_B), .inC (DATA32_DTU_C), .out (DATA32_DTU), .tmrErr
       (DATA32_DTUTmrError));
  fanout read_signalFanout(.in (read_signal), .outA (read_signal_A),
       .outB (read_signal_B), .outC (read_signal_C));
  fanout empty_signalFanout(.in (empty_signal), .outA (empty_signal_A),
       .outB (empty_signal_B), .outC (empty_signal_C));
  bmux_279 mux_DATA32_DTU_C_138_23(.ctl (empty_signal_C), .in_0
       (data_out_32), .in_1 (32'b11101010101010101010101010101010), .z
       ({n_236, n_235, n_234, n_233, n_232, n_231, n_230, n_229, n_228,
       n_227, n_226, n_225, n_224, n_223, n_222, n_221, n_220, n_219,
       n_218, n_217, n_216, n_215, n_214, n_213, n_212, n_211, n_210,
       n_209, n_208, n_207, n_206, n_205}));
  bmux_279 mux_DATA32_DTU_C_134_15(.ctl (n_202), .in_0 ({n_236, n_235,
       n_234, n_233, n_232, n_231, n_230, n_229, n_228, n_227, n_226,
       n_225, n_224, n_223, n_222, n_221, n_220, n_219, n_218, n_217,
       n_216, n_215, n_214, n_213, n_212, n_211, n_210, n_209, n_208,
       n_207, n_206, n_205}), .in_1
       (32'b11101010101010101010101010101010), .z ({UNCONNECTED1383,
       UNCONNECTED1382, UNCONNECTED1381, UNCONNECTED1380,
       UNCONNECTED1379, UNCONNECTED1378, UNCONNECTED1377,
       UNCONNECTED1376, UNCONNECTED1375, UNCONNECTED1374,
       UNCONNECTED1373, UNCONNECTED1372, UNCONNECTED1371,
       UNCONNECTED1370, UNCONNECTED1369, UNCONNECTED1368,
       UNCONNECTED1367, UNCONNECTED1366, UNCONNECTED1365,
       UNCONNECTED1364, UNCONNECTED1363, UNCONNECTED1362,
       UNCONNECTED1361, UNCONNECTED1360, UNCONNECTED1359,
       UNCONNECTED1358, UNCONNECTED1357, UNCONNECTED1356,
       UNCONNECTED1355, UNCONNECTED1354, UNCONNECTED1353,
       UNCONNECTED1352}));
  bmux_279 mux_DATA32_DTU_B_124_23(.ctl (empty_signal_B), .in_0
       (data_out_32), .in_1 (32'b11101010101010101010101010101010), .z
       ({n_271, n_270, n_269, n_268, n_267, n_266, n_265, n_264, n_263,
       n_262, n_261, n_260, n_259, n_258, n_257, n_256, n_255, n_254,
       n_253, n_252, n_251, n_250, n_249, n_248, n_247, n_246, n_245,
       n_244, n_243, n_242, n_241, n_240}));
  bmux_279 mux_DATA32_DTU_B_120_15(.ctl (n_237), .in_0 ({n_271, n_270,
       n_269, n_268, n_267, n_266, n_265, n_264, n_263, n_262, n_261,
       n_260, n_259, n_258, n_257, n_256, n_255, n_254, n_253, n_252,
       n_251, n_250, n_249, n_248, n_247, n_246, n_245, n_244, n_243,
       n_242, n_241, n_240}), .in_1
       (32'b11101010101010101010101010101010), .z ({UNCONNECTED1415,
       UNCONNECTED1414, UNCONNECTED1413, UNCONNECTED1412,
       UNCONNECTED1411, UNCONNECTED1410, UNCONNECTED1409,
       UNCONNECTED1408, UNCONNECTED1407, UNCONNECTED1406,
       UNCONNECTED1405, UNCONNECTED1404, UNCONNECTED1403,
       UNCONNECTED1402, UNCONNECTED1401, UNCONNECTED1400,
       UNCONNECTED1399, UNCONNECTED1398, UNCONNECTED1397,
       UNCONNECTED1396, UNCONNECTED1395, UNCONNECTED1394,
       UNCONNECTED1393, UNCONNECTED1392, UNCONNECTED1391,
       UNCONNECTED1390, UNCONNECTED1389, UNCONNECTED1388,
       UNCONNECTED1387, UNCONNECTED1386, UNCONNECTED1385,
       UNCONNECTED1384}));
  bmux_279 mux_DATA32_DTU_A_108_23(.ctl (empty_signal_A), .in_0
       (data_out_32), .in_1 (32'b11101010101010101010101010101010), .z
       ({n_306, n_305, n_304, n_303, n_302, n_301, n_300, n_299, n_298,
       n_297, n_296, n_295, n_294, n_293, n_292, n_291, n_290, n_289,
       n_288, n_287, n_286, n_285, n_284, n_283, n_282, n_281, n_280,
       n_279, n_278, n_277, n_276, n_275}));
  bmux_279 mux_DATA32_DTU_A_103_15(.ctl (n_272), .in_0 ({n_306, n_305,
       n_304, n_303, n_302, n_301, n_300, n_299, n_298, n_297, n_296,
       n_295, n_294, n_293, n_292, n_291, n_290, n_289, n_288, n_287,
       n_286, n_285, n_284, n_283, n_282, n_281, n_280, n_279, n_278,
       n_277, n_276, n_275}), .in_1
       (32'b11101010101010101010101010101010), .z ({UNCONNECTED1447,
       UNCONNECTED1446, UNCONNECTED1445, UNCONNECTED1444,
       UNCONNECTED1443, UNCONNECTED1442, UNCONNECTED1441,
       UNCONNECTED1440, UNCONNECTED1439, UNCONNECTED1438,
       UNCONNECTED1437, UNCONNECTED1436, UNCONNECTED1435,
       UNCONNECTED1434, UNCONNECTED1433, UNCONNECTED1432,
       UNCONNECTED1431, UNCONNECTED1430, UNCONNECTED1429,
       UNCONNECTED1428, UNCONNECTED1427, UNCONNECTED1426,
       UNCONNECTED1425, UNCONNECTED1424, UNCONNECTED1423,
       UNCONNECTED1422, UNCONNECTED1421, UNCONNECTED1420,
       UNCONNECTED1419, UNCONNECTED1418, UNCONNECTED1417,
       UNCONNECTED1416}));
  CDN_flop \DATA32_DTU_A_reg[0] (.clk (CLK_A), .d (n_275), .sena
       (read_signal_A), .aclr (1'b0), .apre (1'b0), .srl (n_272), .srd
       (1'b0), .q (DATA32_DTU_A[0]));
  CDN_flop \DATA32_DTU_A_reg[1] (.clk (CLK_A), .d (n_276), .sena
       (read_signal_A), .aclr (1'b0), .apre (1'b0), .srl (n_272), .srd
       (1'b1), .q (DATA32_DTU_A[1]));
  CDN_flop \DATA32_DTU_A_reg[2] (.clk (CLK_A), .d (n_277), .sena
       (read_signal_A), .aclr (1'b0), .apre (1'b0), .srl (n_272), .srd
       (1'b0), .q (DATA32_DTU_A[2]));
  CDN_flop \DATA32_DTU_A_reg[3] (.clk (CLK_A), .d (n_278), .sena
       (read_signal_A), .aclr (1'b0), .apre (1'b0), .srl (n_272), .srd
       (1'b1), .q (DATA32_DTU_A[3]));
  CDN_flop \DATA32_DTU_A_reg[4] (.clk (CLK_A), .d (n_279), .sena
       (read_signal_A), .aclr (1'b0), .apre (1'b0), .srl (n_272), .srd
       (1'b0), .q (DATA32_DTU_A[4]));
  CDN_flop \DATA32_DTU_A_reg[5] (.clk (CLK_A), .d (n_280), .sena
       (read_signal_A), .aclr (1'b0), .apre (1'b0), .srl (n_272), .srd
       (1'b1), .q (DATA32_DTU_A[5]));
  CDN_flop \DATA32_DTU_A_reg[6] (.clk (CLK_A), .d (n_281), .sena
       (read_signal_A), .aclr (1'b0), .apre (1'b0), .srl (n_272), .srd
       (1'b0), .q (DATA32_DTU_A[6]));
  CDN_flop \DATA32_DTU_A_reg[7] (.clk (CLK_A), .d (n_282), .sena
       (read_signal_A), .aclr (1'b0), .apre (1'b0), .srl (n_272), .srd
       (1'b1), .q (DATA32_DTU_A[7]));
  CDN_flop \DATA32_DTU_A_reg[8] (.clk (CLK_A), .d (n_283), .sena
       (read_signal_A), .aclr (1'b0), .apre (1'b0), .srl (n_272), .srd
       (1'b0), .q (DATA32_DTU_A[8]));
  CDN_flop \DATA32_DTU_A_reg[9] (.clk (CLK_A), .d (n_284), .sena
       (read_signal_A), .aclr (1'b0), .apre (1'b0), .srl (n_272), .srd
       (1'b1), .q (DATA32_DTU_A[9]));
  CDN_flop \DATA32_DTU_A_reg[10] (.clk (CLK_A), .d (n_285), .sena
       (read_signal_A), .aclr (1'b0), .apre (1'b0), .srl (n_272), .srd
       (1'b0), .q (DATA32_DTU_A[10]));
  CDN_flop \DATA32_DTU_A_reg[11] (.clk (CLK_A), .d (n_286), .sena
       (read_signal_A), .aclr (1'b0), .apre (1'b0), .srl (n_272), .srd
       (1'b1), .q (DATA32_DTU_A[11]));
  CDN_flop \DATA32_DTU_A_reg[12] (.clk (CLK_A), .d (n_287), .sena
       (read_signal_A), .aclr (1'b0), .apre (1'b0), .srl (n_272), .srd
       (1'b0), .q (DATA32_DTU_A[12]));
  CDN_flop \DATA32_DTU_A_reg[13] (.clk (CLK_A), .d (n_288), .sena
       (read_signal_A), .aclr (1'b0), .apre (1'b0), .srl (n_272), .srd
       (1'b1), .q (DATA32_DTU_A[13]));
  CDN_flop \DATA32_DTU_A_reg[14] (.clk (CLK_A), .d (n_289), .sena
       (read_signal_A), .aclr (1'b0), .apre (1'b0), .srl (n_272), .srd
       (1'b0), .q (DATA32_DTU_A[14]));
  CDN_flop \DATA32_DTU_A_reg[15] (.clk (CLK_A), .d (n_290), .sena
       (read_signal_A), .aclr (1'b0), .apre (1'b0), .srl (n_272), .srd
       (1'b1), .q (DATA32_DTU_A[15]));
  CDN_flop \DATA32_DTU_A_reg[16] (.clk (CLK_A), .d (n_291), .sena
       (read_signal_A), .aclr (1'b0), .apre (1'b0), .srl (n_272), .srd
       (1'b0), .q (DATA32_DTU_A[16]));
  CDN_flop \DATA32_DTU_A_reg[17] (.clk (CLK_A), .d (n_292), .sena
       (read_signal_A), .aclr (1'b0), .apre (1'b0), .srl (n_272), .srd
       (1'b1), .q (DATA32_DTU_A[17]));
  CDN_flop \DATA32_DTU_A_reg[18] (.clk (CLK_A), .d (n_293), .sena
       (read_signal_A), .aclr (1'b0), .apre (1'b0), .srl (n_272), .srd
       (1'b0), .q (DATA32_DTU_A[18]));
  CDN_flop \DATA32_DTU_A_reg[19] (.clk (CLK_A), .d (n_294), .sena
       (read_signal_A), .aclr (1'b0), .apre (1'b0), .srl (n_272), .srd
       (1'b1), .q (DATA32_DTU_A[19]));
  CDN_flop \DATA32_DTU_A_reg[20] (.clk (CLK_A), .d (n_295), .sena
       (read_signal_A), .aclr (1'b0), .apre (1'b0), .srl (n_272), .srd
       (1'b0), .q (DATA32_DTU_A[20]));
  CDN_flop \DATA32_DTU_A_reg[21] (.clk (CLK_A), .d (n_296), .sena
       (read_signal_A), .aclr (1'b0), .apre (1'b0), .srl (n_272), .srd
       (1'b1), .q (DATA32_DTU_A[21]));
  CDN_flop \DATA32_DTU_A_reg[22] (.clk (CLK_A), .d (n_297), .sena
       (read_signal_A), .aclr (1'b0), .apre (1'b0), .srl (n_272), .srd
       (1'b0), .q (DATA32_DTU_A[22]));
  CDN_flop \DATA32_DTU_A_reg[23] (.clk (CLK_A), .d (n_298), .sena
       (read_signal_A), .aclr (1'b0), .apre (1'b0), .srl (n_272), .srd
       (1'b1), .q (DATA32_DTU_A[23]));
  CDN_flop \DATA32_DTU_A_reg[24] (.clk (CLK_A), .d (n_299), .sena
       (read_signal_A), .aclr (1'b0), .apre (1'b0), .srl (n_272), .srd
       (1'b0), .q (DATA32_DTU_A[24]));
  CDN_flop \DATA32_DTU_A_reg[25] (.clk (CLK_A), .d (n_300), .sena
       (read_signal_A), .aclr (1'b0), .apre (1'b0), .srl (n_272), .srd
       (1'b1), .q (DATA32_DTU_A[25]));
  CDN_flop \DATA32_DTU_A_reg[26] (.clk (CLK_A), .d (n_301), .sena
       (read_signal_A), .aclr (1'b0), .apre (1'b0), .srl (n_272), .srd
       (1'b0), .q (DATA32_DTU_A[26]));
  CDN_flop \DATA32_DTU_A_reg[27] (.clk (CLK_A), .d (n_302), .sena
       (read_signal_A), .aclr (1'b0), .apre (1'b0), .srl (n_272), .srd
       (1'b1), .q (DATA32_DTU_A[27]));
  CDN_flop \DATA32_DTU_A_reg[28] (.clk (CLK_A), .d (n_303), .sena
       (read_signal_A), .aclr (1'b0), .apre (1'b0), .srl (n_272), .srd
       (1'b0), .q (DATA32_DTU_A[28]));
  CDN_flop \DATA32_DTU_A_reg[29] (.clk (CLK_A), .d (n_304), .sena
       (read_signal_A), .aclr (1'b0), .apre (1'b0), .srl (n_272), .srd
       (1'b1), .q (DATA32_DTU_A[29]));
  CDN_flop \DATA32_DTU_A_reg[30] (.clk (CLK_A), .d (n_305), .sena
       (read_signal_A), .aclr (1'b0), .apre (1'b0), .srl (n_272), .srd
       (1'b1), .q (DATA32_DTU_A[30]));
  CDN_flop \DATA32_DTU_A_reg[31] (.clk (CLK_A), .d (n_306), .sena
       (read_signal_A), .aclr (1'b0), .apre (1'b0), .srl (n_272), .srd
       (1'b1), .q (DATA32_DTU_A[31]));
  CDN_flop \DATA32_DTU_B_reg[0] (.clk (CLK_B), .d (n_240), .sena
       (read_signal_B), .aclr (1'b0), .apre (1'b0), .srl (n_237), .srd
       (1'b0), .q (DATA32_DTU_B[0]));
  CDN_flop \DATA32_DTU_B_reg[1] (.clk (CLK_B), .d (n_241), .sena
       (read_signal_B), .aclr (1'b0), .apre (1'b0), .srl (n_237), .srd
       (1'b1), .q (DATA32_DTU_B[1]));
  CDN_flop \DATA32_DTU_B_reg[2] (.clk (CLK_B), .d (n_242), .sena
       (read_signal_B), .aclr (1'b0), .apre (1'b0), .srl (n_237), .srd
       (1'b0), .q (DATA32_DTU_B[2]));
  CDN_flop \DATA32_DTU_B_reg[3] (.clk (CLK_B), .d (n_243), .sena
       (read_signal_B), .aclr (1'b0), .apre (1'b0), .srl (n_237), .srd
       (1'b1), .q (DATA32_DTU_B[3]));
  CDN_flop \DATA32_DTU_B_reg[4] (.clk (CLK_B), .d (n_244), .sena
       (read_signal_B), .aclr (1'b0), .apre (1'b0), .srl (n_237), .srd
       (1'b0), .q (DATA32_DTU_B[4]));
  CDN_flop \DATA32_DTU_B_reg[5] (.clk (CLK_B), .d (n_245), .sena
       (read_signal_B), .aclr (1'b0), .apre (1'b0), .srl (n_237), .srd
       (1'b1), .q (DATA32_DTU_B[5]));
  CDN_flop \DATA32_DTU_B_reg[6] (.clk (CLK_B), .d (n_246), .sena
       (read_signal_B), .aclr (1'b0), .apre (1'b0), .srl (n_237), .srd
       (1'b0), .q (DATA32_DTU_B[6]));
  CDN_flop \DATA32_DTU_B_reg[7] (.clk (CLK_B), .d (n_247), .sena
       (read_signal_B), .aclr (1'b0), .apre (1'b0), .srl (n_237), .srd
       (1'b1), .q (DATA32_DTU_B[7]));
  CDN_flop \DATA32_DTU_B_reg[8] (.clk (CLK_B), .d (n_248), .sena
       (read_signal_B), .aclr (1'b0), .apre (1'b0), .srl (n_237), .srd
       (1'b0), .q (DATA32_DTU_B[8]));
  CDN_flop \DATA32_DTU_B_reg[9] (.clk (CLK_B), .d (n_249), .sena
       (read_signal_B), .aclr (1'b0), .apre (1'b0), .srl (n_237), .srd
       (1'b1), .q (DATA32_DTU_B[9]));
  CDN_flop \DATA32_DTU_B_reg[10] (.clk (CLK_B), .d (n_250), .sena
       (read_signal_B), .aclr (1'b0), .apre (1'b0), .srl (n_237), .srd
       (1'b0), .q (DATA32_DTU_B[10]));
  CDN_flop \DATA32_DTU_B_reg[11] (.clk (CLK_B), .d (n_251), .sena
       (read_signal_B), .aclr (1'b0), .apre (1'b0), .srl (n_237), .srd
       (1'b1), .q (DATA32_DTU_B[11]));
  CDN_flop \DATA32_DTU_B_reg[12] (.clk (CLK_B), .d (n_252), .sena
       (read_signal_B), .aclr (1'b0), .apre (1'b0), .srl (n_237), .srd
       (1'b0), .q (DATA32_DTU_B[12]));
  CDN_flop \DATA32_DTU_B_reg[13] (.clk (CLK_B), .d (n_253), .sena
       (read_signal_B), .aclr (1'b0), .apre (1'b0), .srl (n_237), .srd
       (1'b1), .q (DATA32_DTU_B[13]));
  CDN_flop \DATA32_DTU_B_reg[14] (.clk (CLK_B), .d (n_254), .sena
       (read_signal_B), .aclr (1'b0), .apre (1'b0), .srl (n_237), .srd
       (1'b0), .q (DATA32_DTU_B[14]));
  CDN_flop \DATA32_DTU_B_reg[15] (.clk (CLK_B), .d (n_255), .sena
       (read_signal_B), .aclr (1'b0), .apre (1'b0), .srl (n_237), .srd
       (1'b1), .q (DATA32_DTU_B[15]));
  CDN_flop \DATA32_DTU_B_reg[16] (.clk (CLK_B), .d (n_256), .sena
       (read_signal_B), .aclr (1'b0), .apre (1'b0), .srl (n_237), .srd
       (1'b0), .q (DATA32_DTU_B[16]));
  CDN_flop \DATA32_DTU_B_reg[17] (.clk (CLK_B), .d (n_257), .sena
       (read_signal_B), .aclr (1'b0), .apre (1'b0), .srl (n_237), .srd
       (1'b1), .q (DATA32_DTU_B[17]));
  CDN_flop \DATA32_DTU_B_reg[18] (.clk (CLK_B), .d (n_258), .sena
       (read_signal_B), .aclr (1'b0), .apre (1'b0), .srl (n_237), .srd
       (1'b0), .q (DATA32_DTU_B[18]));
  CDN_flop \DATA32_DTU_B_reg[19] (.clk (CLK_B), .d (n_259), .sena
       (read_signal_B), .aclr (1'b0), .apre (1'b0), .srl (n_237), .srd
       (1'b1), .q (DATA32_DTU_B[19]));
  CDN_flop \DATA32_DTU_B_reg[20] (.clk (CLK_B), .d (n_260), .sena
       (read_signal_B), .aclr (1'b0), .apre (1'b0), .srl (n_237), .srd
       (1'b0), .q (DATA32_DTU_B[20]));
  CDN_flop \DATA32_DTU_B_reg[21] (.clk (CLK_B), .d (n_261), .sena
       (read_signal_B), .aclr (1'b0), .apre (1'b0), .srl (n_237), .srd
       (1'b1), .q (DATA32_DTU_B[21]));
  CDN_flop \DATA32_DTU_B_reg[22] (.clk (CLK_B), .d (n_262), .sena
       (read_signal_B), .aclr (1'b0), .apre (1'b0), .srl (n_237), .srd
       (1'b0), .q (DATA32_DTU_B[22]));
  CDN_flop \DATA32_DTU_B_reg[23] (.clk (CLK_B), .d (n_263), .sena
       (read_signal_B), .aclr (1'b0), .apre (1'b0), .srl (n_237), .srd
       (1'b1), .q (DATA32_DTU_B[23]));
  CDN_flop \DATA32_DTU_B_reg[24] (.clk (CLK_B), .d (n_264), .sena
       (read_signal_B), .aclr (1'b0), .apre (1'b0), .srl (n_237), .srd
       (1'b0), .q (DATA32_DTU_B[24]));
  CDN_flop \DATA32_DTU_B_reg[25] (.clk (CLK_B), .d (n_265), .sena
       (read_signal_B), .aclr (1'b0), .apre (1'b0), .srl (n_237), .srd
       (1'b1), .q (DATA32_DTU_B[25]));
  CDN_flop \DATA32_DTU_B_reg[26] (.clk (CLK_B), .d (n_266), .sena
       (read_signal_B), .aclr (1'b0), .apre (1'b0), .srl (n_237), .srd
       (1'b0), .q (DATA32_DTU_B[26]));
  CDN_flop \DATA32_DTU_B_reg[27] (.clk (CLK_B), .d (n_267), .sena
       (read_signal_B), .aclr (1'b0), .apre (1'b0), .srl (n_237), .srd
       (1'b1), .q (DATA32_DTU_B[27]));
  CDN_flop \DATA32_DTU_B_reg[28] (.clk (CLK_B), .d (n_268), .sena
       (read_signal_B), .aclr (1'b0), .apre (1'b0), .srl (n_237), .srd
       (1'b0), .q (DATA32_DTU_B[28]));
  CDN_flop \DATA32_DTU_B_reg[29] (.clk (CLK_B), .d (n_269), .sena
       (read_signal_B), .aclr (1'b0), .apre (1'b0), .srl (n_237), .srd
       (1'b1), .q (DATA32_DTU_B[29]));
  CDN_flop \DATA32_DTU_B_reg[30] (.clk (CLK_B), .d (n_270), .sena
       (read_signal_B), .aclr (1'b0), .apre (1'b0), .srl (n_237), .srd
       (1'b1), .q (DATA32_DTU_B[30]));
  CDN_flop \DATA32_DTU_B_reg[31] (.clk (CLK_B), .d (n_271), .sena
       (read_signal_B), .aclr (1'b0), .apre (1'b0), .srl (n_237), .srd
       (1'b1), .q (DATA32_DTU_B[31]));
  CDN_flop \DATA32_DTU_C_reg[0] (.clk (CLK_C), .d (n_205), .sena
       (read_signal_C), .aclr (1'b0), .apre (1'b0), .srl (n_202), .srd
       (1'b0), .q (DATA32_DTU_C[0]));
  CDN_flop \DATA32_DTU_C_reg[1] (.clk (CLK_C), .d (n_206), .sena
       (read_signal_C), .aclr (1'b0), .apre (1'b0), .srl (n_202), .srd
       (1'b1), .q (DATA32_DTU_C[1]));
  CDN_flop \DATA32_DTU_C_reg[2] (.clk (CLK_C), .d (n_207), .sena
       (read_signal_C), .aclr (1'b0), .apre (1'b0), .srl (n_202), .srd
       (1'b0), .q (DATA32_DTU_C[2]));
  CDN_flop \DATA32_DTU_C_reg[3] (.clk (CLK_C), .d (n_208), .sena
       (read_signal_C), .aclr (1'b0), .apre (1'b0), .srl (n_202), .srd
       (1'b1), .q (DATA32_DTU_C[3]));
  CDN_flop \DATA32_DTU_C_reg[4] (.clk (CLK_C), .d (n_209), .sena
       (read_signal_C), .aclr (1'b0), .apre (1'b0), .srl (n_202), .srd
       (1'b0), .q (DATA32_DTU_C[4]));
  CDN_flop \DATA32_DTU_C_reg[5] (.clk (CLK_C), .d (n_210), .sena
       (read_signal_C), .aclr (1'b0), .apre (1'b0), .srl (n_202), .srd
       (1'b1), .q (DATA32_DTU_C[5]));
  CDN_flop \DATA32_DTU_C_reg[6] (.clk (CLK_C), .d (n_211), .sena
       (read_signal_C), .aclr (1'b0), .apre (1'b0), .srl (n_202), .srd
       (1'b0), .q (DATA32_DTU_C[6]));
  CDN_flop \DATA32_DTU_C_reg[7] (.clk (CLK_C), .d (n_212), .sena
       (read_signal_C), .aclr (1'b0), .apre (1'b0), .srl (n_202), .srd
       (1'b1), .q (DATA32_DTU_C[7]));
  CDN_flop \DATA32_DTU_C_reg[8] (.clk (CLK_C), .d (n_213), .sena
       (read_signal_C), .aclr (1'b0), .apre (1'b0), .srl (n_202), .srd
       (1'b0), .q (DATA32_DTU_C[8]));
  CDN_flop \DATA32_DTU_C_reg[9] (.clk (CLK_C), .d (n_214), .sena
       (read_signal_C), .aclr (1'b0), .apre (1'b0), .srl (n_202), .srd
       (1'b1), .q (DATA32_DTU_C[9]));
  CDN_flop \DATA32_DTU_C_reg[10] (.clk (CLK_C), .d (n_215), .sena
       (read_signal_C), .aclr (1'b0), .apre (1'b0), .srl (n_202), .srd
       (1'b0), .q (DATA32_DTU_C[10]));
  CDN_flop \DATA32_DTU_C_reg[11] (.clk (CLK_C), .d (n_216), .sena
       (read_signal_C), .aclr (1'b0), .apre (1'b0), .srl (n_202), .srd
       (1'b1), .q (DATA32_DTU_C[11]));
  CDN_flop \DATA32_DTU_C_reg[12] (.clk (CLK_C), .d (n_217), .sena
       (read_signal_C), .aclr (1'b0), .apre (1'b0), .srl (n_202), .srd
       (1'b0), .q (DATA32_DTU_C[12]));
  CDN_flop \DATA32_DTU_C_reg[13] (.clk (CLK_C), .d (n_218), .sena
       (read_signal_C), .aclr (1'b0), .apre (1'b0), .srl (n_202), .srd
       (1'b1), .q (DATA32_DTU_C[13]));
  CDN_flop \DATA32_DTU_C_reg[14] (.clk (CLK_C), .d (n_219), .sena
       (read_signal_C), .aclr (1'b0), .apre (1'b0), .srl (n_202), .srd
       (1'b0), .q (DATA32_DTU_C[14]));
  CDN_flop \DATA32_DTU_C_reg[15] (.clk (CLK_C), .d (n_220), .sena
       (read_signal_C), .aclr (1'b0), .apre (1'b0), .srl (n_202), .srd
       (1'b1), .q (DATA32_DTU_C[15]));
  CDN_flop \DATA32_DTU_C_reg[16] (.clk (CLK_C), .d (n_221), .sena
       (read_signal_C), .aclr (1'b0), .apre (1'b0), .srl (n_202), .srd
       (1'b0), .q (DATA32_DTU_C[16]));
  CDN_flop \DATA32_DTU_C_reg[17] (.clk (CLK_C), .d (n_222), .sena
       (read_signal_C), .aclr (1'b0), .apre (1'b0), .srl (n_202), .srd
       (1'b1), .q (DATA32_DTU_C[17]));
  CDN_flop \DATA32_DTU_C_reg[18] (.clk (CLK_C), .d (n_223), .sena
       (read_signal_C), .aclr (1'b0), .apre (1'b0), .srl (n_202), .srd
       (1'b0), .q (DATA32_DTU_C[18]));
  CDN_flop \DATA32_DTU_C_reg[19] (.clk (CLK_C), .d (n_224), .sena
       (read_signal_C), .aclr (1'b0), .apre (1'b0), .srl (n_202), .srd
       (1'b1), .q (DATA32_DTU_C[19]));
  CDN_flop \DATA32_DTU_C_reg[20] (.clk (CLK_C), .d (n_225), .sena
       (read_signal_C), .aclr (1'b0), .apre (1'b0), .srl (n_202), .srd
       (1'b0), .q (DATA32_DTU_C[20]));
  CDN_flop \DATA32_DTU_C_reg[21] (.clk (CLK_C), .d (n_226), .sena
       (read_signal_C), .aclr (1'b0), .apre (1'b0), .srl (n_202), .srd
       (1'b1), .q (DATA32_DTU_C[21]));
  CDN_flop \DATA32_DTU_C_reg[22] (.clk (CLK_C), .d (n_227), .sena
       (read_signal_C), .aclr (1'b0), .apre (1'b0), .srl (n_202), .srd
       (1'b0), .q (DATA32_DTU_C[22]));
  CDN_flop \DATA32_DTU_C_reg[23] (.clk (CLK_C), .d (n_228), .sena
       (read_signal_C), .aclr (1'b0), .apre (1'b0), .srl (n_202), .srd
       (1'b1), .q (DATA32_DTU_C[23]));
  CDN_flop \DATA32_DTU_C_reg[24] (.clk (CLK_C), .d (n_229), .sena
       (read_signal_C), .aclr (1'b0), .apre (1'b0), .srl (n_202), .srd
       (1'b0), .q (DATA32_DTU_C[24]));
  CDN_flop \DATA32_DTU_C_reg[25] (.clk (CLK_C), .d (n_230), .sena
       (read_signal_C), .aclr (1'b0), .apre (1'b0), .srl (n_202), .srd
       (1'b1), .q (DATA32_DTU_C[25]));
  CDN_flop \DATA32_DTU_C_reg[26] (.clk (CLK_C), .d (n_231), .sena
       (read_signal_C), .aclr (1'b0), .apre (1'b0), .srl (n_202), .srd
       (1'b0), .q (DATA32_DTU_C[26]));
  CDN_flop \DATA32_DTU_C_reg[27] (.clk (CLK_C), .d (n_232), .sena
       (read_signal_C), .aclr (1'b0), .apre (1'b0), .srl (n_202), .srd
       (1'b1), .q (DATA32_DTU_C[27]));
  CDN_flop \DATA32_DTU_C_reg[28] (.clk (CLK_C), .d (n_233), .sena
       (read_signal_C), .aclr (1'b0), .apre (1'b0), .srl (n_202), .srd
       (1'b0), .q (DATA32_DTU_C[28]));
  CDN_flop \DATA32_DTU_C_reg[29] (.clk (CLK_C), .d (n_234), .sena
       (read_signal_C), .aclr (1'b0), .apre (1'b0), .srl (n_202), .srd
       (1'b1), .q (DATA32_DTU_C[29]));
  CDN_flop \DATA32_DTU_C_reg[30] (.clk (CLK_C), .d (n_235), .sena
       (read_signal_C), .aclr (1'b0), .apre (1'b0), .srl (n_202), .srd
       (1'b1), .q (DATA32_DTU_C[30]));
  CDN_flop \DATA32_DTU_C_reg[31] (.clk (CLK_C), .d (n_236), .sena
       (read_signal_C), .aclr (1'b0), .apre (1'b0), .srl (n_202), .srd
       (1'b1), .q (DATA32_DTU_C[31]));
  not g215 (n_202, reset_C);
  not g216 (n_237, reset_B);
  not g217 (n_272, reset_A);
  or g218 (n_673, CLK_TmrError, HammError);
  or g219 (tmrError, resetTmrError, tmrError_oFIFO, DATA32_DTUTmrError,
       n_673);
endmodule

module LDTU_DATA32_ATU_DTUTMR_Nbits_3232(CLK_A, CLK_B, CLK_C, RST_A,
     RST_B, RST_C, CALIBRATION_BUSY_A, CALIBRATION_BUSY_B,
     CALIBRATION_BUSY_C, TEST_ENABLE_A, TEST_ENABLE_B, TEST_ENABLE_C,
     DATA32_ATU_0, DATA32_ATU_1, DATA32_ATU_2, DATA32_ATU_3,
     DATA32_DTU, decode_signal, DATA32_0, DATA32_1, DATA32_2, DATA32_3,
     tmrError);
  input CLK_A, CLK_B, CLK_C, RST_A, RST_B, RST_C, CALIBRATION_BUSY_A,
       CALIBRATION_BUSY_B, CALIBRATION_BUSY_C, TEST_ENABLE_A,
       TEST_ENABLE_B, TEST_ENABLE_C, decode_signal;
  input [31:0] DATA32_ATU_0, DATA32_ATU_1, DATA32_ATU_2, DATA32_ATU_3,
       DATA32_DTU;
  output [31:0] DATA32_0, DATA32_1, DATA32_2, DATA32_3;
  output tmrError;
  wire CLK_A, CLK_B, CLK_C, RST_A, RST_B, RST_C, CALIBRATION_BUSY_A,
       CALIBRATION_BUSY_B, CALIBRATION_BUSY_C, TEST_ENABLE_A,
       TEST_ENABLE_B, TEST_ENABLE_C, decode_signal;
  wire [31:0] DATA32_ATU_0, DATA32_ATU_1, DATA32_ATU_2, DATA32_ATU_3,
       DATA32_DTU;
  wire [31:0] DATA32_0, DATA32_1, DATA32_2, DATA32_3;
  wire tmrError;
  wire [31:0] DATA32_ATU_0_A;
  wire [31:0] DATA32_ATU_0_B;
  wire [31:0] DATA32_ATU_0_C;
  wire [31:0] DATA32_ATU_1_A;
  wire [31:0] DATA32_ATU_1_B;
  wire [31:0] DATA32_ATU_1_C;
  wire [31:0] DATA32_ATU_2_A;
  wire [31:0] DATA32_ATU_2_B;
  wire [31:0] DATA32_ATU_2_C;
  wire [31:0] DATA32_ATU_3_A;
  wire [31:0] DATA32_ATU_3_B;
  wire [31:0] DATA32_ATU_3_C;
  wire [31:0] DATA32_DTU_A;
  wire [31:0] DATA32_DTU_B;
  wire [31:0] DATA32_DTU_C;
  wire [31:0] DATA32_0_A;
  wire [31:0] DATA32_0_B;
  wire [31:0] DATA32_0_C;
  wire [31:0] DATA32_1_A;
  wire [31:0] DATA32_1_B;
  wire [31:0] DATA32_1_C;
  wire [31:0] DATA32_2_A;
  wire [31:0] DATA32_2_B;
  wire [31:0] DATA32_2_C;
  wire [31:0] DATA32_3_A;
  wire [31:0] DATA32_3_B;
  wire [31:0] DATA32_3_C;
  wire DATA32_0TmrError, DATA32_1TmrError, DATA32_2TmrError,
       DATA32_3TmrError, UNCONNECTED1448, UNCONNECTED1449,
       UNCONNECTED1450, UNCONNECTED1451;
  wire UNCONNECTED1452, UNCONNECTED1453, UNCONNECTED1454,
       UNCONNECTED1455, UNCONNECTED1456, UNCONNECTED1457,
       UNCONNECTED1458, UNCONNECTED1459;
  wire UNCONNECTED1460, UNCONNECTED1461, UNCONNECTED1462,
       UNCONNECTED1463, UNCONNECTED1464, UNCONNECTED1465,
       UNCONNECTED1466, UNCONNECTED1467;
  wire UNCONNECTED1468, UNCONNECTED1469, UNCONNECTED1470,
       UNCONNECTED1471, UNCONNECTED1472, UNCONNECTED1473,
       UNCONNECTED1474, UNCONNECTED1475;
  wire UNCONNECTED1476, UNCONNECTED1477, UNCONNECTED1478,
       UNCONNECTED1479, UNCONNECTED1480, UNCONNECTED1481,
       UNCONNECTED1482, UNCONNECTED1483;
  wire UNCONNECTED1484, UNCONNECTED1485, UNCONNECTED1486,
       UNCONNECTED1487, UNCONNECTED1488, UNCONNECTED1489,
       UNCONNECTED1490, UNCONNECTED1491;
  wire UNCONNECTED1492, UNCONNECTED1493, UNCONNECTED1494,
       UNCONNECTED1495, UNCONNECTED1496, UNCONNECTED1497,
       UNCONNECTED1498, UNCONNECTED1499;
  wire UNCONNECTED1500, UNCONNECTED1501, UNCONNECTED1502,
       UNCONNECTED1503, UNCONNECTED1504, UNCONNECTED1505,
       UNCONNECTED1506, UNCONNECTED1507;
  wire UNCONNECTED1508, UNCONNECTED1509, UNCONNECTED1510,
       UNCONNECTED1511, UNCONNECTED1512, UNCONNECTED1513,
       UNCONNECTED1514, UNCONNECTED1515;
  wire UNCONNECTED1516, UNCONNECTED1517, UNCONNECTED1518,
       UNCONNECTED1519, UNCONNECTED1520, UNCONNECTED1521,
       UNCONNECTED1522, UNCONNECTED1523;
  wire UNCONNECTED1524, UNCONNECTED1525, UNCONNECTED1526,
       UNCONNECTED1527, UNCONNECTED1528, UNCONNECTED1529,
       UNCONNECTED1530, UNCONNECTED1531;
  wire UNCONNECTED1532, UNCONNECTED1533, UNCONNECTED1534,
       UNCONNECTED1535, UNCONNECTED1536, UNCONNECTED1537,
       UNCONNECTED1538, UNCONNECTED1539;
  wire UNCONNECTED1540, UNCONNECTED1541, UNCONNECTED1542,
       UNCONNECTED1543, UNCONNECTED1544, UNCONNECTED1545,
       UNCONNECTED1546, UNCONNECTED1547;
  wire UNCONNECTED1548, UNCONNECTED1549, UNCONNECTED1550,
       UNCONNECTED1551, UNCONNECTED1552, UNCONNECTED1553,
       UNCONNECTED1554, UNCONNECTED1555;
  wire UNCONNECTED1556, UNCONNECTED1557, UNCONNECTED1558,
       UNCONNECTED1559, UNCONNECTED1560, UNCONNECTED1561,
       UNCONNECTED1562, UNCONNECTED1563;
  wire UNCONNECTED1564, UNCONNECTED1565, UNCONNECTED1566,
       UNCONNECTED1567, UNCONNECTED1568, UNCONNECTED1569,
       UNCONNECTED1570, UNCONNECTED1571;
  wire UNCONNECTED1572, UNCONNECTED1573, UNCONNECTED1574,
       UNCONNECTED1575, UNCONNECTED1576, UNCONNECTED1577,
       UNCONNECTED1578, UNCONNECTED1579;
  wire UNCONNECTED1580, UNCONNECTED1581, UNCONNECTED1582,
       UNCONNECTED1583, UNCONNECTED1584, UNCONNECTED1585,
       UNCONNECTED1586, UNCONNECTED1587;
  wire UNCONNECTED1588, UNCONNECTED1589, UNCONNECTED1590,
       UNCONNECTED1591, UNCONNECTED1592, UNCONNECTED1593,
       UNCONNECTED1594, UNCONNECTED1595;
  wire UNCONNECTED1596, UNCONNECTED1597, UNCONNECTED1598,
       UNCONNECTED1599, UNCONNECTED1600, UNCONNECTED1601,
       UNCONNECTED1602, UNCONNECTED1603;
  wire UNCONNECTED1604, UNCONNECTED1605, UNCONNECTED1606,
       UNCONNECTED1607, UNCONNECTED1608, UNCONNECTED1609,
       UNCONNECTED1610, UNCONNECTED1611;
  wire UNCONNECTED1612, UNCONNECTED1613, UNCONNECTED1614,
       UNCONNECTED1615, UNCONNECTED1616, UNCONNECTED1617,
       UNCONNECTED1618, UNCONNECTED1619;
  wire UNCONNECTED1620, UNCONNECTED1621, UNCONNECTED1622,
       UNCONNECTED1623, UNCONNECTED1624, UNCONNECTED1625,
       UNCONNECTED1626, UNCONNECTED1627;
  wire UNCONNECTED1628, UNCONNECTED1629, UNCONNECTED1630,
       UNCONNECTED1631, UNCONNECTED1632, UNCONNECTED1633,
       UNCONNECTED1634, UNCONNECTED1635;
  wire UNCONNECTED1636, UNCONNECTED1637, UNCONNECTED1638,
       UNCONNECTED1639, UNCONNECTED1640, UNCONNECTED1641,
       UNCONNECTED1642, UNCONNECTED1643;
  wire UNCONNECTED1644, UNCONNECTED1645, UNCONNECTED1646,
       UNCONNECTED1647, UNCONNECTED1648, UNCONNECTED1649,
       UNCONNECTED1650, UNCONNECTED1651;
  wire UNCONNECTED1652, UNCONNECTED1653, UNCONNECTED1654,
       UNCONNECTED1655, UNCONNECTED1656, UNCONNECTED1657,
       UNCONNECTED1658, UNCONNECTED1659;
  wire UNCONNECTED1660, UNCONNECTED1661, UNCONNECTED1662,
       UNCONNECTED1663, UNCONNECTED1664, UNCONNECTED1665,
       UNCONNECTED1666, UNCONNECTED1667;
  wire UNCONNECTED1668, UNCONNECTED1669, UNCONNECTED1670,
       UNCONNECTED1671, UNCONNECTED1672, UNCONNECTED1673,
       UNCONNECTED1674, UNCONNECTED1675;
  wire UNCONNECTED1676, UNCONNECTED1677, UNCONNECTED1678,
       UNCONNECTED1679, UNCONNECTED1680, UNCONNECTED1681,
       UNCONNECTED1682, UNCONNECTED1683;
  wire UNCONNECTED1684, UNCONNECTED1685, UNCONNECTED1686,
       UNCONNECTED1687, UNCONNECTED1688, UNCONNECTED1689,
       UNCONNECTED1690, UNCONNECTED1691;
  wire UNCONNECTED1692, UNCONNECTED1693, UNCONNECTED1694,
       UNCONNECTED1695, UNCONNECTED1696, UNCONNECTED1697,
       UNCONNECTED1698, UNCONNECTED1699;
  wire UNCONNECTED1700, UNCONNECTED1701, UNCONNECTED1702,
       UNCONNECTED1703, UNCONNECTED1704, UNCONNECTED1705,
       UNCONNECTED1706, UNCONNECTED1707;
  wire UNCONNECTED1708, UNCONNECTED1709, UNCONNECTED1710,
       UNCONNECTED1711, UNCONNECTED1712, UNCONNECTED1713,
       UNCONNECTED1714, UNCONNECTED1715;
  wire UNCONNECTED1716, UNCONNECTED1717, UNCONNECTED1718,
       UNCONNECTED1719, UNCONNECTED1720, UNCONNECTED1721,
       UNCONNECTED1722, UNCONNECTED1723;
  wire UNCONNECTED1724, UNCONNECTED1725, UNCONNECTED1726,
       UNCONNECTED1727, UNCONNECTED1728, UNCONNECTED1729,
       UNCONNECTED1730, UNCONNECTED1731;
  wire UNCONNECTED1732, UNCONNECTED1733, UNCONNECTED1734,
       UNCONNECTED1735, UNCONNECTED1736, UNCONNECTED1737,
       UNCONNECTED1738, UNCONNECTED1739;
  wire UNCONNECTED1740, UNCONNECTED1741, UNCONNECTED1742,
       UNCONNECTED1743, UNCONNECTED1744, UNCONNECTED1745,
       UNCONNECTED1746, UNCONNECTED1747;
  wire UNCONNECTED1748, UNCONNECTED1749, UNCONNECTED1750,
       UNCONNECTED1751, UNCONNECTED1752, UNCONNECTED1753,
       UNCONNECTED1754, UNCONNECTED1755;
  wire UNCONNECTED1756, UNCONNECTED1757, UNCONNECTED1758,
       UNCONNECTED1759, UNCONNECTED1760, UNCONNECTED1761,
       UNCONNECTED1762, UNCONNECTED1763;
  wire UNCONNECTED1764, UNCONNECTED1765, UNCONNECTED1766,
       UNCONNECTED1767, UNCONNECTED1768, UNCONNECTED1769,
       UNCONNECTED1770, UNCONNECTED1771;
  wire UNCONNECTED1772, UNCONNECTED1773, UNCONNECTED1774,
       UNCONNECTED1775, UNCONNECTED1776, UNCONNECTED1777,
       UNCONNECTED1778, UNCONNECTED1779;
  wire UNCONNECTED1780, UNCONNECTED1781, UNCONNECTED1782,
       UNCONNECTED1783, UNCONNECTED1784, UNCONNECTED1785,
       UNCONNECTED1786, UNCONNECTED1787;
  wire UNCONNECTED1788, UNCONNECTED1789, UNCONNECTED1790,
       UNCONNECTED1791, UNCONNECTED1792, UNCONNECTED1793,
       UNCONNECTED1794, UNCONNECTED1795;
  wire UNCONNECTED1796, UNCONNECTED1797, UNCONNECTED1798,
       UNCONNECTED1799, UNCONNECTED1800, UNCONNECTED1801,
       UNCONNECTED1802, UNCONNECTED1803;
  wire UNCONNECTED1804, UNCONNECTED1805, UNCONNECTED1806,
       UNCONNECTED1807, UNCONNECTED1808, UNCONNECTED1809,
       UNCONNECTED1810, UNCONNECTED1811;
  wire UNCONNECTED1812, UNCONNECTED1813, UNCONNECTED1814,
       UNCONNECTED1815, UNCONNECTED1816, UNCONNECTED1817,
       UNCONNECTED1818, UNCONNECTED1819;
  wire UNCONNECTED1820, UNCONNECTED1821, UNCONNECTED1822,
       UNCONNECTED1823, UNCONNECTED1824, UNCONNECTED1825,
       UNCONNECTED1826, UNCONNECTED1827;
  wire UNCONNECTED1828, UNCONNECTED1829, UNCONNECTED1830,
       UNCONNECTED1831, n_778, n_779, n_780, n_781;
  wire n_782, n_783, n_784, n_785, n_786, n_787, n_788, n_789;
  wire n_790, n_791, n_792, n_793, n_794, n_795, n_796, n_797;
  wire n_798, n_799, n_800, n_801, n_802, n_803, n_804, n_805;
  wire n_806, n_807, n_808, n_809, n_810, n_811, n_812, n_813;
  wire n_814, n_815, n_816, n_817, n_818, n_819, n_820, n_821;
  wire n_822, n_823, n_824, n_825, n_826, n_827, n_828, n_829;
  wire n_830, n_831, n_832, n_833, n_834, n_835, n_836, n_837;
  wire n_838, n_839, n_840, n_841, n_842, n_843, n_844, n_845;
  wire n_846, n_847, n_848, n_849, n_850, n_851, n_852, n_853;
  wire n_854, n_855, n_856, n_857, n_858, n_859, n_860, n_861;
  wire n_862, n_863, n_864, n_865, n_866, n_867, n_868, n_869;
  wire n_870, n_871, n_872, n_873, n_874, n_875, n_876, n_877;
  wire n_878, n_879, n_880, n_881, n_882, n_883, n_884, n_885;
  wire n_886, n_887, n_888, n_889, n_890, n_891, n_892, n_893;
  wire n_894, n_895, n_896, n_897, n_898, n_899, n_900, n_901;
  wire n_902, n_903, n_904, n_905, n_906, n_907, n_908, n_909;
  wire n_910, n_911, n_912, n_913, n_914, n_915, n_916, n_917;
  wire n_918, n_919, n_920, n_921, n_922, n_923, n_924, n_925;
  wire n_926, n_927, n_928, n_929, n_930, n_931, n_932, n_933;
  wire n_934, n_935, n_936, n_937, n_938, n_939, n_940, n_941;
  wire n_942, n_943, n_944, n_945, n_946, n_947, n_948, n_949;
  wire n_950, n_951, n_952, n_953, n_954, n_955, n_956, n_957;
  wire n_958, n_959, n_960, n_961, n_962, n_963, n_964, n_965;
  wire n_966, n_967, n_968, n_969, n_970, n_971, n_972, n_973;
  wire n_974, n_975, n_976, n_977, n_978, n_979, n_980, n_981;
  wire n_982, n_983, n_984, n_985, n_986, n_987, n_988, n_989;
  wire n_990, n_991, n_992, n_993, n_994, n_995, n_996, n_997;
  wire n_998, n_999, n_1000, n_1001, n_1002, n_1003, n_1004, n_1005;
  wire n_1006, n_1007, n_1008, n_1009, n_1010, n_1011, n_1012, n_1013;
  wire n_1014, n_1015, n_1016, n_1017, n_1018, n_1019, n_1020, n_1021;
  wire n_1022, n_1023, n_1024, n_1025, n_1026, n_1027, n_1028, n_1029;
  wire n_1030, n_1031, n_1032, n_1033, n_1034, n_1035, n_1036, n_1037;
  wire n_1038, n_1039, n_1040, n_1041, n_1042, n_1043, n_1044, n_1045;
  wire n_1046, n_1047, n_1048, n_1049, n_1050, n_1051, n_1052, n_1053;
  wire n_1054, n_1055, n_1056, n_1057, n_1058, n_1059, n_1060, n_1061;
  wire n_1062, n_1063, n_1064, n_1065, n_1066, n_1067, n_1068, n_1069;
  wire n_1070, n_1071, n_1072, n_1073, n_1074, n_1075, n_1076, n_1077;
  wire n_1078, n_1079, n_1080, n_1081, n_1082, n_1083, n_1084, n_1085;
  wire n_1086, n_1087, n_1088, n_1089, n_1090, n_1091, n_1092, n_1093;
  wire n_1094, n_1095, n_1096, n_1097, n_1098, n_1099, n_1100, n_1101;
  wire n_1102, n_1103, n_1104, n_1105, n_1106, n_1107, n_1108, n_1109;
  wire n_1110, n_1111, n_1112, n_1113, n_1114, n_1115, n_1116, n_1117;
  wire n_1118, n_1119, n_1120, n_1121, n_1122, n_1123, n_1124, n_1125;
  wire n_1126, n_1127, n_1128, n_1129, n_1130, n_1131, n_1132, n_1133;
  wire n_1134, n_1135, n_1136, n_1137, n_1138, n_1139, n_1140, n_1141;
  wire n_1142, n_1143, n_1144, n_1145, n_1146, n_1147, n_1148, n_1149;
  wire n_1150, n_1151, n_1152, n_1153, n_1154, n_1155, n_1156, n_1157;
  wire n_1158, n_1159, n_1160, n_1161, n_1162, n_1163, n_1164, n_1165;
  wire n_1166, n_1167, n_1168, n_1169, n_1170, n_1171, n_1172, n_1173;
  wire n_1174, n_1175, n_1176, n_1177, n_1178, n_1179, n_1180, n_1181;
  wire n_1182, n_1183, n_1184, n_1185, n_1186, n_1187, n_1188, n_1189;
  wire n_1190, n_1191, n_1192, n_1193, n_1194, n_1195, n_1196, n_1197;
  wire n_1198, n_1199, n_1200, n_1201, n_1202, n_1203, n_1204, n_1205;
  wire n_1206, n_1207, n_1208, n_1209, n_1210, n_1211, n_1212, n_1213;
  wire n_1214, n_1215, n_1216, n_1217, n_1218, n_1219, n_1220, n_1221;
  wire n_1222, n_1223, n_1224, n_1225, n_1226, n_1227, n_1228, n_1229;
  wire n_1230, n_1231, n_1232, n_1233, n_1234, n_1235, n_1236, n_1237;
  wire n_1238, n_1239, n_1240, n_1241, n_1242, n_1243, n_1244, n_1245;
  wire n_1246, n_1247, n_1248, n_1249, n_1250, n_1251, n_1252, n_1253;
  wire n_1254, n_1255, n_1256, n_1257, n_1258, n_1259, n_1260, n_1261;
  wire n_1262, n_1263, n_1264, n_1265, n_1266;
  fanout_WIDTH32 DATA32_ATU_0Fanout(.in (DATA32_ATU_0), .outA
       (DATA32_ATU_0_A), .outB (DATA32_ATU_0_B), .outC
       (DATA32_ATU_0_C));
  fanout_WIDTH32 DATA32_ATU_1Fanout(.in (DATA32_ATU_1), .outA
       (DATA32_ATU_1_A), .outB (DATA32_ATU_1_B), .outC
       (DATA32_ATU_1_C));
  fanout_WIDTH32 DATA32_ATU_2Fanout(.in (DATA32_ATU_2), .outA
       (DATA32_ATU_2_A), .outB (DATA32_ATU_2_B), .outC
       (DATA32_ATU_2_C));
  fanout_WIDTH32 DATA32_ATU_3Fanout(.in (DATA32_ATU_3), .outA
       (DATA32_ATU_3_A), .outB (DATA32_ATU_3_B), .outC
       (DATA32_ATU_3_C));
  fanout_WIDTH32 DATA32_DTUFanout(.in (DATA32_DTU), .outA
       (DATA32_DTU_A), .outB (DATA32_DTU_B), .outC (DATA32_DTU_C));
  majorityVoter_WIDTH32 DATA32_0Voter(.inA (DATA32_0_A), .inB
       (DATA32_0_B), .inC (DATA32_0_C), .out (DATA32_0), .tmrErr
       (DATA32_0TmrError));
  majorityVoter_WIDTH32 DATA32_1Voter(.inA (DATA32_1_A), .inB
       (DATA32_1_B), .inC (DATA32_1_C), .out (DATA32_1), .tmrErr
       (DATA32_1TmrError));
  majorityVoter_WIDTH32 DATA32_2Voter(.inA (DATA32_2_A), .inB
       (DATA32_2_B), .inC (DATA32_2_C), .out (DATA32_2), .tmrErr
       (DATA32_2TmrError));
  majorityVoter_WIDTH32 DATA32_3Voter(.inA (DATA32_3_A), .inB
       (DATA32_3_B), .inC (DATA32_3_C), .out (DATA32_3), .tmrErr
       (DATA32_3TmrError));
  bmux_279 mux_DATA32_3_C_140_21(.ctl (n_779), .in_0 (DATA32_ATU_3_C),
       .in_1 (32'b01011010010110100101101001011010), .z ({n_811, n_810,
       n_809, n_808, n_807, n_806, n_805, n_804, n_803, n_802, n_801,
       n_800, n_799, n_798, n_797, n_796, n_795, n_794, n_793, n_792,
       n_791, n_790, n_789, n_788, n_787, n_786, n_785, n_784, n_783,
       n_782, n_781, n_780}));
  bmux_279 mux_DATA32_3_C_134_12(.ctl (n_778), .in_0 ({n_811, n_810,
       n_809, n_808, n_807, n_806, n_805, n_804, n_803, n_802, n_801,
       n_800, n_799, n_798, n_797, n_796, n_795, n_794, n_793, n_792,
       n_791, n_790, n_789, n_788, n_787, n_786, n_785, n_784, n_783,
       n_782, n_781, n_780}), .in_1
       (32'b01011010010110100101101001011010), .z ({UNCONNECTED1479,
       UNCONNECTED1478, UNCONNECTED1477, UNCONNECTED1476,
       UNCONNECTED1475, UNCONNECTED1474, UNCONNECTED1473,
       UNCONNECTED1472, UNCONNECTED1471, UNCONNECTED1470,
       UNCONNECTED1469, UNCONNECTED1468, UNCONNECTED1467,
       UNCONNECTED1466, UNCONNECTED1465, UNCONNECTED1464,
       UNCONNECTED1463, UNCONNECTED1462, UNCONNECTED1461,
       UNCONNECTED1460, UNCONNECTED1459, UNCONNECTED1458,
       UNCONNECTED1457, UNCONNECTED1456, UNCONNECTED1455,
       UNCONNECTED1454, UNCONNECTED1453, UNCONNECTED1452,
       UNCONNECTED1451, UNCONNECTED1450, UNCONNECTED1449,
       UNCONNECTED1448}));
  bmux_279 mux_DATA32_2_C_140_21(.ctl (n_779), .in_0 (DATA32_ATU_2_C),
       .in_1 (32'b01011010010110100101101001011010), .z ({n_843, n_842,
       n_841, n_840, n_839, n_838, n_837, n_836, n_835, n_834, n_833,
       n_832, n_831, n_830, n_829, n_828, n_827, n_826, n_825, n_824,
       n_823, n_822, n_821, n_820, n_819, n_818, n_817, n_816, n_815,
       n_814, n_813, n_812}));
  bmux_279 mux_DATA32_2_C_134_12(.ctl (n_778), .in_0 ({n_843, n_842,
       n_841, n_840, n_839, n_838, n_837, n_836, n_835, n_834, n_833,
       n_832, n_831, n_830, n_829, n_828, n_827, n_826, n_825, n_824,
       n_823, n_822, n_821, n_820, n_819, n_818, n_817, n_816, n_815,
       n_814, n_813, n_812}), .in_1
       (32'b01011010010110100101101001011010), .z ({UNCONNECTED1511,
       UNCONNECTED1510, UNCONNECTED1509, UNCONNECTED1508,
       UNCONNECTED1507, UNCONNECTED1506, UNCONNECTED1505,
       UNCONNECTED1504, UNCONNECTED1503, UNCONNECTED1502,
       UNCONNECTED1501, UNCONNECTED1500, UNCONNECTED1499,
       UNCONNECTED1498, UNCONNECTED1497, UNCONNECTED1496,
       UNCONNECTED1495, UNCONNECTED1494, UNCONNECTED1493,
       UNCONNECTED1492, UNCONNECTED1491, UNCONNECTED1490,
       UNCONNECTED1489, UNCONNECTED1488, UNCONNECTED1487,
       UNCONNECTED1486, UNCONNECTED1485, UNCONNECTED1484,
       UNCONNECTED1483, UNCONNECTED1482, UNCONNECTED1481,
       UNCONNECTED1480}));
  bmux_279 mux_DATA32_1_C_140_21(.ctl (n_779), .in_0 (DATA32_ATU_1_C),
       .in_1 (32'b01011010010110100101101001011010), .z ({n_875, n_874,
       n_873, n_872, n_871, n_870, n_869, n_868, n_867, n_866, n_865,
       n_864, n_863, n_862, n_861, n_860, n_859, n_858, n_857, n_856,
       n_855, n_854, n_853, n_852, n_851, n_850, n_849, n_848, n_847,
       n_846, n_845, n_844}));
  bmux_279 mux_DATA32_1_C_134_12(.ctl (n_778), .in_0 ({n_875, n_874,
       n_873, n_872, n_871, n_870, n_869, n_868, n_867, n_866, n_865,
       n_864, n_863, n_862, n_861, n_860, n_859, n_858, n_857, n_856,
       n_855, n_854, n_853, n_852, n_851, n_850, n_849, n_848, n_847,
       n_846, n_845, n_844}), .in_1
       (32'b01011010010110100101101001011010), .z ({UNCONNECTED1543,
       UNCONNECTED1542, UNCONNECTED1541, UNCONNECTED1540,
       UNCONNECTED1539, UNCONNECTED1538, UNCONNECTED1537,
       UNCONNECTED1536, UNCONNECTED1535, UNCONNECTED1534,
       UNCONNECTED1533, UNCONNECTED1532, UNCONNECTED1531,
       UNCONNECTED1530, UNCONNECTED1529, UNCONNECTED1528,
       UNCONNECTED1527, UNCONNECTED1526, UNCONNECTED1525,
       UNCONNECTED1524, UNCONNECTED1523, UNCONNECTED1522,
       UNCONNECTED1521, UNCONNECTED1520, UNCONNECTED1519,
       UNCONNECTED1518, UNCONNECTED1517, UNCONNECTED1516,
       UNCONNECTED1515, UNCONNECTED1514, UNCONNECTED1513,
       UNCONNECTED1512}));
  bmux_279 mux_DATA32_0_C_141_27(.ctl (n_876), .in_0
       (32'b11101010101010101010101010101010), .in_1 (DATA32_DTU_C), .z
       ({n_908, n_907, n_906, n_905, n_904, n_903, n_902, n_901, n_900,
       n_899, n_898, n_897, n_896, n_895, n_894, n_893, n_892, n_891,
       n_890, n_889, n_888, n_887, n_886, n_885, n_884, n_883, n_882,
       n_881, n_880, n_879, n_878, n_877}));
  bmux_279 mux_DATA32_0_C_140_21(.ctl (n_779), .in_0 (DATA32_ATU_0_C),
       .in_1 ({n_908, n_907, n_906, n_905, n_904, n_903, n_902, n_901,
       n_900, n_899, n_898, n_897, n_896, n_895, n_894, n_893, n_892,
       n_891, n_890, n_889, n_888, n_887, n_886, n_885, n_884, n_883,
       n_882, n_881, n_880, n_879, n_878, n_877}), .z ({n_940, n_939,
       n_938, n_937, n_936, n_935, n_934, n_933, n_932, n_931, n_930,
       n_929, n_928, n_927, n_926, n_925, n_924, n_923, n_922, n_921,
       n_920, n_919, n_918, n_917, n_916, n_915, n_914, n_913, n_912,
       n_911, n_910, n_909}));
  bmux_279 mux_DATA32_0_C_134_12(.ctl (n_778), .in_0 ({n_940, n_939,
       n_938, n_937, n_936, n_935, n_934, n_933, n_932, n_931, n_930,
       n_929, n_928, n_927, n_926, n_925, n_924, n_923, n_922, n_921,
       n_920, n_919, n_918, n_917, n_916, n_915, n_914, n_913, n_912,
       n_911, n_910, n_909}), .in_1
       (32'b11101010101010101010101010101010), .z ({UNCONNECTED1575,
       UNCONNECTED1574, UNCONNECTED1573, UNCONNECTED1572,
       UNCONNECTED1571, UNCONNECTED1570, UNCONNECTED1569,
       UNCONNECTED1568, UNCONNECTED1567, UNCONNECTED1566,
       UNCONNECTED1565, UNCONNECTED1564, UNCONNECTED1563,
       UNCONNECTED1562, UNCONNECTED1561, UNCONNECTED1560,
       UNCONNECTED1559, UNCONNECTED1558, UNCONNECTED1557,
       UNCONNECTED1556, UNCONNECTED1555, UNCONNECTED1554,
       UNCONNECTED1553, UNCONNECTED1552, UNCONNECTED1551,
       UNCONNECTED1550, UNCONNECTED1549, UNCONNECTED1548,
       UNCONNECTED1547, UNCONNECTED1546, UNCONNECTED1545,
       UNCONNECTED1544}));
  bmux_279 mux_DATA32_3_B_118_21(.ctl (n_942), .in_0 (DATA32_ATU_3_B),
       .in_1 (32'b01011010010110100101101001011010), .z ({n_974, n_973,
       n_972, n_971, n_970, n_969, n_968, n_967, n_966, n_965, n_964,
       n_963, n_962, n_961, n_960, n_959, n_958, n_957, n_956, n_955,
       n_954, n_953, n_952, n_951, n_950, n_949, n_948, n_947, n_946,
       n_945, n_944, n_943}));
  bmux_279 mux_DATA32_3_B_112_12(.ctl (n_941), .in_0 ({n_974, n_973,
       n_972, n_971, n_970, n_969, n_968, n_967, n_966, n_965, n_964,
       n_963, n_962, n_961, n_960, n_959, n_958, n_957, n_956, n_955,
       n_954, n_953, n_952, n_951, n_950, n_949, n_948, n_947, n_946,
       n_945, n_944, n_943}), .in_1
       (32'b01011010010110100101101001011010), .z ({UNCONNECTED1607,
       UNCONNECTED1606, UNCONNECTED1605, UNCONNECTED1604,
       UNCONNECTED1603, UNCONNECTED1602, UNCONNECTED1601,
       UNCONNECTED1600, UNCONNECTED1599, UNCONNECTED1598,
       UNCONNECTED1597, UNCONNECTED1596, UNCONNECTED1595,
       UNCONNECTED1594, UNCONNECTED1593, UNCONNECTED1592,
       UNCONNECTED1591, UNCONNECTED1590, UNCONNECTED1589,
       UNCONNECTED1588, UNCONNECTED1587, UNCONNECTED1586,
       UNCONNECTED1585, UNCONNECTED1584, UNCONNECTED1583,
       UNCONNECTED1582, UNCONNECTED1581, UNCONNECTED1580,
       UNCONNECTED1579, UNCONNECTED1578, UNCONNECTED1577,
       UNCONNECTED1576}));
  bmux_279 mux_DATA32_2_B_118_21(.ctl (n_942), .in_0 (DATA32_ATU_2_B),
       .in_1 (32'b01011010010110100101101001011010), .z ({n_1006,
       n_1005, n_1004, n_1003, n_1002, n_1001, n_1000, n_999, n_998,
       n_997, n_996, n_995, n_994, n_993, n_992, n_991, n_990, n_989,
       n_988, n_987, n_986, n_985, n_984, n_983, n_982, n_981, n_980,
       n_979, n_978, n_977, n_976, n_975}));
  bmux_279 mux_DATA32_2_B_112_12(.ctl (n_941), .in_0 ({n_1006, n_1005,
       n_1004, n_1003, n_1002, n_1001, n_1000, n_999, n_998, n_997,
       n_996, n_995, n_994, n_993, n_992, n_991, n_990, n_989, n_988,
       n_987, n_986, n_985, n_984, n_983, n_982, n_981, n_980, n_979,
       n_978, n_977, n_976, n_975}), .in_1
       (32'b01011010010110100101101001011010), .z ({UNCONNECTED1639,
       UNCONNECTED1638, UNCONNECTED1637, UNCONNECTED1636,
       UNCONNECTED1635, UNCONNECTED1634, UNCONNECTED1633,
       UNCONNECTED1632, UNCONNECTED1631, UNCONNECTED1630,
       UNCONNECTED1629, UNCONNECTED1628, UNCONNECTED1627,
       UNCONNECTED1626, UNCONNECTED1625, UNCONNECTED1624,
       UNCONNECTED1623, UNCONNECTED1622, UNCONNECTED1621,
       UNCONNECTED1620, UNCONNECTED1619, UNCONNECTED1618,
       UNCONNECTED1617, UNCONNECTED1616, UNCONNECTED1615,
       UNCONNECTED1614, UNCONNECTED1613, UNCONNECTED1612,
       UNCONNECTED1611, UNCONNECTED1610, UNCONNECTED1609,
       UNCONNECTED1608}));
  bmux_279 mux_DATA32_1_B_118_21(.ctl (n_942), .in_0 (DATA32_ATU_1_B),
       .in_1 (32'b01011010010110100101101001011010), .z ({n_1038,
       n_1037, n_1036, n_1035, n_1034, n_1033, n_1032, n_1031, n_1030,
       n_1029, n_1028, n_1027, n_1026, n_1025, n_1024, n_1023, n_1022,
       n_1021, n_1020, n_1019, n_1018, n_1017, n_1016, n_1015, n_1014,
       n_1013, n_1012, n_1011, n_1010, n_1009, n_1008, n_1007}));
  bmux_279 mux_DATA32_1_B_112_12(.ctl (n_941), .in_0 ({n_1038, n_1037,
       n_1036, n_1035, n_1034, n_1033, n_1032, n_1031, n_1030, n_1029,
       n_1028, n_1027, n_1026, n_1025, n_1024, n_1023, n_1022, n_1021,
       n_1020, n_1019, n_1018, n_1017, n_1016, n_1015, n_1014, n_1013,
       n_1012, n_1011, n_1010, n_1009, n_1008, n_1007}), .in_1
       (32'b01011010010110100101101001011010), .z ({UNCONNECTED1671,
       UNCONNECTED1670, UNCONNECTED1669, UNCONNECTED1668,
       UNCONNECTED1667, UNCONNECTED1666, UNCONNECTED1665,
       UNCONNECTED1664, UNCONNECTED1663, UNCONNECTED1662,
       UNCONNECTED1661, UNCONNECTED1660, UNCONNECTED1659,
       UNCONNECTED1658, UNCONNECTED1657, UNCONNECTED1656,
       UNCONNECTED1655, UNCONNECTED1654, UNCONNECTED1653,
       UNCONNECTED1652, UNCONNECTED1651, UNCONNECTED1650,
       UNCONNECTED1649, UNCONNECTED1648, UNCONNECTED1647,
       UNCONNECTED1646, UNCONNECTED1645, UNCONNECTED1644,
       UNCONNECTED1643, UNCONNECTED1642, UNCONNECTED1641,
       UNCONNECTED1640}));
  bmux_279 mux_DATA32_0_B_119_27(.ctl (n_1039), .in_0
       (32'b11101010101010101010101010101010), .in_1 (DATA32_DTU_B), .z
       ({n_1071, n_1070, n_1069, n_1068, n_1067, n_1066, n_1065,
       n_1064, n_1063, n_1062, n_1061, n_1060, n_1059, n_1058, n_1057,
       n_1056, n_1055, n_1054, n_1053, n_1052, n_1051, n_1050, n_1049,
       n_1048, n_1047, n_1046, n_1045, n_1044, n_1043, n_1042, n_1041,
       n_1040}));
  bmux_279 mux_DATA32_0_B_118_21(.ctl (n_942), .in_0 (DATA32_ATU_0_B),
       .in_1 ({n_1071, n_1070, n_1069, n_1068, n_1067, n_1066, n_1065,
       n_1064, n_1063, n_1062, n_1061, n_1060, n_1059, n_1058, n_1057,
       n_1056, n_1055, n_1054, n_1053, n_1052, n_1051, n_1050, n_1049,
       n_1048, n_1047, n_1046, n_1045, n_1044, n_1043, n_1042, n_1041,
       n_1040}), .z ({n_1103, n_1102, n_1101, n_1100, n_1099, n_1098,
       n_1097, n_1096, n_1095, n_1094, n_1093, n_1092, n_1091, n_1090,
       n_1089, n_1088, n_1087, n_1086, n_1085, n_1084, n_1083, n_1082,
       n_1081, n_1080, n_1079, n_1078, n_1077, n_1076, n_1075, n_1074,
       n_1073, n_1072}));
  bmux_279 mux_DATA32_0_B_112_12(.ctl (n_941), .in_0 ({n_1103, n_1102,
       n_1101, n_1100, n_1099, n_1098, n_1097, n_1096, n_1095, n_1094,
       n_1093, n_1092, n_1091, n_1090, n_1089, n_1088, n_1087, n_1086,
       n_1085, n_1084, n_1083, n_1082, n_1081, n_1080, n_1079, n_1078,
       n_1077, n_1076, n_1075, n_1074, n_1073, n_1072}), .in_1
       (32'b11101010101010101010101010101010), .z ({UNCONNECTED1703,
       UNCONNECTED1702, UNCONNECTED1701, UNCONNECTED1700,
       UNCONNECTED1699, UNCONNECTED1698, UNCONNECTED1697,
       UNCONNECTED1696, UNCONNECTED1695, UNCONNECTED1694,
       UNCONNECTED1693, UNCONNECTED1692, UNCONNECTED1691,
       UNCONNECTED1690, UNCONNECTED1689, UNCONNECTED1688,
       UNCONNECTED1687, UNCONNECTED1686, UNCONNECTED1685,
       UNCONNECTED1684, UNCONNECTED1683, UNCONNECTED1682,
       UNCONNECTED1681, UNCONNECTED1680, UNCONNECTED1679,
       UNCONNECTED1678, UNCONNECTED1677, UNCONNECTED1676,
       UNCONNECTED1675, UNCONNECTED1674, UNCONNECTED1673,
       UNCONNECTED1672}));
  bmux_279 mux_DATA32_3_A_96_21(.ctl (n_1105), .in_0 (DATA32_ATU_3_A),
       .in_1 (32'b01011010010110100101101001011010), .z ({n_1137,
       n_1136, n_1135, n_1134, n_1133, n_1132, n_1131, n_1130, n_1129,
       n_1128, n_1127, n_1126, n_1125, n_1124, n_1123, n_1122, n_1121,
       n_1120, n_1119, n_1118, n_1117, n_1116, n_1115, n_1114, n_1113,
       n_1112, n_1111, n_1110, n_1109, n_1108, n_1107, n_1106}));
  bmux_279 mux_DATA32_3_A_90_12(.ctl (n_1104), .in_0 ({n_1137, n_1136,
       n_1135, n_1134, n_1133, n_1132, n_1131, n_1130, n_1129, n_1128,
       n_1127, n_1126, n_1125, n_1124, n_1123, n_1122, n_1121, n_1120,
       n_1119, n_1118, n_1117, n_1116, n_1115, n_1114, n_1113, n_1112,
       n_1111, n_1110, n_1109, n_1108, n_1107, n_1106}), .in_1
       (32'b01011010010110100101101001011010), .z ({UNCONNECTED1735,
       UNCONNECTED1734, UNCONNECTED1733, UNCONNECTED1732,
       UNCONNECTED1731, UNCONNECTED1730, UNCONNECTED1729,
       UNCONNECTED1728, UNCONNECTED1727, UNCONNECTED1726,
       UNCONNECTED1725, UNCONNECTED1724, UNCONNECTED1723,
       UNCONNECTED1722, UNCONNECTED1721, UNCONNECTED1720,
       UNCONNECTED1719, UNCONNECTED1718, UNCONNECTED1717,
       UNCONNECTED1716, UNCONNECTED1715, UNCONNECTED1714,
       UNCONNECTED1713, UNCONNECTED1712, UNCONNECTED1711,
       UNCONNECTED1710, UNCONNECTED1709, UNCONNECTED1708,
       UNCONNECTED1707, UNCONNECTED1706, UNCONNECTED1705,
       UNCONNECTED1704}));
  bmux_279 mux_DATA32_2_A_96_21(.ctl (n_1105), .in_0 (DATA32_ATU_2_A),
       .in_1 (32'b01011010010110100101101001011010), .z ({n_1169,
       n_1168, n_1167, n_1166, n_1165, n_1164, n_1163, n_1162, n_1161,
       n_1160, n_1159, n_1158, n_1157, n_1156, n_1155, n_1154, n_1153,
       n_1152, n_1151, n_1150, n_1149, n_1148, n_1147, n_1146, n_1145,
       n_1144, n_1143, n_1142, n_1141, n_1140, n_1139, n_1138}));
  bmux_279 mux_DATA32_2_A_90_12(.ctl (n_1104), .in_0 ({n_1169, n_1168,
       n_1167, n_1166, n_1165, n_1164, n_1163, n_1162, n_1161, n_1160,
       n_1159, n_1158, n_1157, n_1156, n_1155, n_1154, n_1153, n_1152,
       n_1151, n_1150, n_1149, n_1148, n_1147, n_1146, n_1145, n_1144,
       n_1143, n_1142, n_1141, n_1140, n_1139, n_1138}), .in_1
       (32'b01011010010110100101101001011010), .z ({UNCONNECTED1767,
       UNCONNECTED1766, UNCONNECTED1765, UNCONNECTED1764,
       UNCONNECTED1763, UNCONNECTED1762, UNCONNECTED1761,
       UNCONNECTED1760, UNCONNECTED1759, UNCONNECTED1758,
       UNCONNECTED1757, UNCONNECTED1756, UNCONNECTED1755,
       UNCONNECTED1754, UNCONNECTED1753, UNCONNECTED1752,
       UNCONNECTED1751, UNCONNECTED1750, UNCONNECTED1749,
       UNCONNECTED1748, UNCONNECTED1747, UNCONNECTED1746,
       UNCONNECTED1745, UNCONNECTED1744, UNCONNECTED1743,
       UNCONNECTED1742, UNCONNECTED1741, UNCONNECTED1740,
       UNCONNECTED1739, UNCONNECTED1738, UNCONNECTED1737,
       UNCONNECTED1736}));
  bmux_279 mux_DATA32_1_A_96_21(.ctl (n_1105), .in_0 (DATA32_ATU_1_A),
       .in_1 (32'b01011010010110100101101001011010), .z ({n_1201,
       n_1200, n_1199, n_1198, n_1197, n_1196, n_1195, n_1194, n_1193,
       n_1192, n_1191, n_1190, n_1189, n_1188, n_1187, n_1186, n_1185,
       n_1184, n_1183, n_1182, n_1181, n_1180, n_1179, n_1178, n_1177,
       n_1176, n_1175, n_1174, n_1173, n_1172, n_1171, n_1170}));
  bmux_279 mux_DATA32_1_A_90_12(.ctl (n_1104), .in_0 ({n_1201, n_1200,
       n_1199, n_1198, n_1197, n_1196, n_1195, n_1194, n_1193, n_1192,
       n_1191, n_1190, n_1189, n_1188, n_1187, n_1186, n_1185, n_1184,
       n_1183, n_1182, n_1181, n_1180, n_1179, n_1178, n_1177, n_1176,
       n_1175, n_1174, n_1173, n_1172, n_1171, n_1170}), .in_1
       (32'b01011010010110100101101001011010), .z ({UNCONNECTED1799,
       UNCONNECTED1798, UNCONNECTED1797, UNCONNECTED1796,
       UNCONNECTED1795, UNCONNECTED1794, UNCONNECTED1793,
       UNCONNECTED1792, UNCONNECTED1791, UNCONNECTED1790,
       UNCONNECTED1789, UNCONNECTED1788, UNCONNECTED1787,
       UNCONNECTED1786, UNCONNECTED1785, UNCONNECTED1784,
       UNCONNECTED1783, UNCONNECTED1782, UNCONNECTED1781,
       UNCONNECTED1780, UNCONNECTED1779, UNCONNECTED1778,
       UNCONNECTED1777, UNCONNECTED1776, UNCONNECTED1775,
       UNCONNECTED1774, UNCONNECTED1773, UNCONNECTED1772,
       UNCONNECTED1771, UNCONNECTED1770, UNCONNECTED1769,
       UNCONNECTED1768}));
  bmux_279 mux_DATA32_0_A_97_27(.ctl (n_1202), .in_0
       (32'b11101010101010101010101010101010), .in_1 (DATA32_DTU_A), .z
       ({n_1234, n_1233, n_1232, n_1231, n_1230, n_1229, n_1228,
       n_1227, n_1226, n_1225, n_1224, n_1223, n_1222, n_1221, n_1220,
       n_1219, n_1218, n_1217, n_1216, n_1215, n_1214, n_1213, n_1212,
       n_1211, n_1210, n_1209, n_1208, n_1207, n_1206, n_1205, n_1204,
       n_1203}));
  bmux_279 mux_DATA32_0_A_96_21(.ctl (n_1105), .in_0 (DATA32_ATU_0_A),
       .in_1 ({n_1234, n_1233, n_1232, n_1231, n_1230, n_1229, n_1228,
       n_1227, n_1226, n_1225, n_1224, n_1223, n_1222, n_1221, n_1220,
       n_1219, n_1218, n_1217, n_1216, n_1215, n_1214, n_1213, n_1212,
       n_1211, n_1210, n_1209, n_1208, n_1207, n_1206, n_1205, n_1204,
       n_1203}), .z ({n_1266, n_1265, n_1264, n_1263, n_1262, n_1261,
       n_1260, n_1259, n_1258, n_1257, n_1256, n_1255, n_1254, n_1253,
       n_1252, n_1251, n_1250, n_1249, n_1248, n_1247, n_1246, n_1245,
       n_1244, n_1243, n_1242, n_1241, n_1240, n_1239, n_1238, n_1237,
       n_1236, n_1235}));
  bmux_279 mux_DATA32_0_A_90_12(.ctl (n_1104), .in_0 ({n_1266, n_1265,
       n_1264, n_1263, n_1262, n_1261, n_1260, n_1259, n_1258, n_1257,
       n_1256, n_1255, n_1254, n_1253, n_1252, n_1251, n_1250, n_1249,
       n_1248, n_1247, n_1246, n_1245, n_1244, n_1243, n_1242, n_1241,
       n_1240, n_1239, n_1238, n_1237, n_1236, n_1235}), .in_1
       (32'b11101010101010101010101010101010), .z ({UNCONNECTED1831,
       UNCONNECTED1830, UNCONNECTED1829, UNCONNECTED1828,
       UNCONNECTED1827, UNCONNECTED1826, UNCONNECTED1825,
       UNCONNECTED1824, UNCONNECTED1823, UNCONNECTED1822,
       UNCONNECTED1821, UNCONNECTED1820, UNCONNECTED1819,
       UNCONNECTED1818, UNCONNECTED1817, UNCONNECTED1816,
       UNCONNECTED1815, UNCONNECTED1814, UNCONNECTED1813,
       UNCONNECTED1812, UNCONNECTED1811, UNCONNECTED1810,
       UNCONNECTED1809, UNCONNECTED1808, UNCONNECTED1807,
       UNCONNECTED1806, UNCONNECTED1805, UNCONNECTED1804,
       UNCONNECTED1803, UNCONNECTED1802, UNCONNECTED1801,
       UNCONNECTED1800}));
  CDN_flop \DATA32_0_A_reg[0] (.clk (CLK_A), .d (n_1235), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b0), .q
       (DATA32_0_A[0]));
  CDN_flop \DATA32_0_A_reg[1] (.clk (CLK_A), .d (n_1236), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b1), .q
       (DATA32_0_A[1]));
  CDN_flop \DATA32_0_A_reg[2] (.clk (CLK_A), .d (n_1237), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b0), .q
       (DATA32_0_A[2]));
  CDN_flop \DATA32_0_A_reg[3] (.clk (CLK_A), .d (n_1238), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b1), .q
       (DATA32_0_A[3]));
  CDN_flop \DATA32_0_A_reg[4] (.clk (CLK_A), .d (n_1239), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b0), .q
       (DATA32_0_A[4]));
  CDN_flop \DATA32_0_A_reg[5] (.clk (CLK_A), .d (n_1240), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b1), .q
       (DATA32_0_A[5]));
  CDN_flop \DATA32_0_A_reg[6] (.clk (CLK_A), .d (n_1241), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b0), .q
       (DATA32_0_A[6]));
  CDN_flop \DATA32_0_A_reg[7] (.clk (CLK_A), .d (n_1242), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b1), .q
       (DATA32_0_A[7]));
  CDN_flop \DATA32_0_A_reg[8] (.clk (CLK_A), .d (n_1243), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b0), .q
       (DATA32_0_A[8]));
  CDN_flop \DATA32_0_A_reg[9] (.clk (CLK_A), .d (n_1244), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b1), .q
       (DATA32_0_A[9]));
  CDN_flop \DATA32_0_A_reg[10] (.clk (CLK_A), .d (n_1245), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b0),
       .q (DATA32_0_A[10]));
  CDN_flop \DATA32_0_A_reg[11] (.clk (CLK_A), .d (n_1246), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b1),
       .q (DATA32_0_A[11]));
  CDN_flop \DATA32_0_A_reg[12] (.clk (CLK_A), .d (n_1247), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b0),
       .q (DATA32_0_A[12]));
  CDN_flop \DATA32_0_A_reg[13] (.clk (CLK_A), .d (n_1248), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b1),
       .q (DATA32_0_A[13]));
  CDN_flop \DATA32_0_A_reg[14] (.clk (CLK_A), .d (n_1249), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b0),
       .q (DATA32_0_A[14]));
  CDN_flop \DATA32_0_A_reg[15] (.clk (CLK_A), .d (n_1250), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b1),
       .q (DATA32_0_A[15]));
  CDN_flop \DATA32_0_A_reg[16] (.clk (CLK_A), .d (n_1251), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b0),
       .q (DATA32_0_A[16]));
  CDN_flop \DATA32_0_A_reg[17] (.clk (CLK_A), .d (n_1252), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b1),
       .q (DATA32_0_A[17]));
  CDN_flop \DATA32_0_A_reg[18] (.clk (CLK_A), .d (n_1253), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b0),
       .q (DATA32_0_A[18]));
  CDN_flop \DATA32_0_A_reg[19] (.clk (CLK_A), .d (n_1254), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b1),
       .q (DATA32_0_A[19]));
  CDN_flop \DATA32_0_A_reg[20] (.clk (CLK_A), .d (n_1255), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b0),
       .q (DATA32_0_A[20]));
  CDN_flop \DATA32_0_A_reg[21] (.clk (CLK_A), .d (n_1256), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b1),
       .q (DATA32_0_A[21]));
  CDN_flop \DATA32_0_A_reg[22] (.clk (CLK_A), .d (n_1257), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b0),
       .q (DATA32_0_A[22]));
  CDN_flop \DATA32_0_A_reg[23] (.clk (CLK_A), .d (n_1258), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b1),
       .q (DATA32_0_A[23]));
  CDN_flop \DATA32_0_A_reg[24] (.clk (CLK_A), .d (n_1259), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b0),
       .q (DATA32_0_A[24]));
  CDN_flop \DATA32_0_A_reg[25] (.clk (CLK_A), .d (n_1260), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b1),
       .q (DATA32_0_A[25]));
  CDN_flop \DATA32_0_A_reg[26] (.clk (CLK_A), .d (n_1261), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b0),
       .q (DATA32_0_A[26]));
  CDN_flop \DATA32_0_A_reg[27] (.clk (CLK_A), .d (n_1262), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b1),
       .q (DATA32_0_A[27]));
  CDN_flop \DATA32_0_A_reg[28] (.clk (CLK_A), .d (n_1263), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b0),
       .q (DATA32_0_A[28]));
  CDN_flop \DATA32_0_A_reg[29] (.clk (CLK_A), .d (n_1264), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b1),
       .q (DATA32_0_A[29]));
  CDN_flop \DATA32_0_A_reg[30] (.clk (CLK_A), .d (n_1265), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b1),
       .q (DATA32_0_A[30]));
  CDN_flop \DATA32_0_A_reg[31] (.clk (CLK_A), .d (n_1266), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b1),
       .q (DATA32_0_A[31]));
  CDN_flop \DATA32_1_A_reg[0] (.clk (CLK_A), .d (n_1170), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b0), .q
       (DATA32_1_A[0]));
  CDN_flop \DATA32_1_A_reg[1] (.clk (CLK_A), .d (n_1171), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b1), .q
       (DATA32_1_A[1]));
  CDN_flop \DATA32_1_A_reg[2] (.clk (CLK_A), .d (n_1172), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b0), .q
       (DATA32_1_A[2]));
  CDN_flop \DATA32_1_A_reg[3] (.clk (CLK_A), .d (n_1173), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b1), .q
       (DATA32_1_A[3]));
  CDN_flop \DATA32_1_A_reg[4] (.clk (CLK_A), .d (n_1174), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b1), .q
       (DATA32_1_A[4]));
  CDN_flop \DATA32_1_A_reg[5] (.clk (CLK_A), .d (n_1175), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b0), .q
       (DATA32_1_A[5]));
  CDN_flop \DATA32_1_A_reg[6] (.clk (CLK_A), .d (n_1176), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b1), .q
       (DATA32_1_A[6]));
  CDN_flop \DATA32_1_A_reg[7] (.clk (CLK_A), .d (n_1177), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b0), .q
       (DATA32_1_A[7]));
  CDN_flop \DATA32_1_A_reg[8] (.clk (CLK_A), .d (n_1178), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b0), .q
       (DATA32_1_A[8]));
  CDN_flop \DATA32_1_A_reg[9] (.clk (CLK_A), .d (n_1179), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b1), .q
       (DATA32_1_A[9]));
  CDN_flop \DATA32_1_A_reg[10] (.clk (CLK_A), .d (n_1180), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b0),
       .q (DATA32_1_A[10]));
  CDN_flop \DATA32_1_A_reg[11] (.clk (CLK_A), .d (n_1181), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b1),
       .q (DATA32_1_A[11]));
  CDN_flop \DATA32_1_A_reg[12] (.clk (CLK_A), .d (n_1182), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b1),
       .q (DATA32_1_A[12]));
  CDN_flop \DATA32_1_A_reg[13] (.clk (CLK_A), .d (n_1183), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b0),
       .q (DATA32_1_A[13]));
  CDN_flop \DATA32_1_A_reg[14] (.clk (CLK_A), .d (n_1184), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b1),
       .q (DATA32_1_A[14]));
  CDN_flop \DATA32_1_A_reg[15] (.clk (CLK_A), .d (n_1185), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b0),
       .q (DATA32_1_A[15]));
  CDN_flop \DATA32_1_A_reg[16] (.clk (CLK_A), .d (n_1186), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b0),
       .q (DATA32_1_A[16]));
  CDN_flop \DATA32_1_A_reg[17] (.clk (CLK_A), .d (n_1187), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b1),
       .q (DATA32_1_A[17]));
  CDN_flop \DATA32_1_A_reg[18] (.clk (CLK_A), .d (n_1188), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b0),
       .q (DATA32_1_A[18]));
  CDN_flop \DATA32_1_A_reg[19] (.clk (CLK_A), .d (n_1189), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b1),
       .q (DATA32_1_A[19]));
  CDN_flop \DATA32_1_A_reg[20] (.clk (CLK_A), .d (n_1190), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b1),
       .q (DATA32_1_A[20]));
  CDN_flop \DATA32_1_A_reg[21] (.clk (CLK_A), .d (n_1191), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b0),
       .q (DATA32_1_A[21]));
  CDN_flop \DATA32_1_A_reg[22] (.clk (CLK_A), .d (n_1192), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b1),
       .q (DATA32_1_A[22]));
  CDN_flop \DATA32_1_A_reg[23] (.clk (CLK_A), .d (n_1193), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b0),
       .q (DATA32_1_A[23]));
  CDN_flop \DATA32_1_A_reg[24] (.clk (CLK_A), .d (n_1194), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b0),
       .q (DATA32_1_A[24]));
  CDN_flop \DATA32_1_A_reg[25] (.clk (CLK_A), .d (n_1195), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b1),
       .q (DATA32_1_A[25]));
  CDN_flop \DATA32_1_A_reg[26] (.clk (CLK_A), .d (n_1196), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b0),
       .q (DATA32_1_A[26]));
  CDN_flop \DATA32_1_A_reg[27] (.clk (CLK_A), .d (n_1197), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b1),
       .q (DATA32_1_A[27]));
  CDN_flop \DATA32_1_A_reg[28] (.clk (CLK_A), .d (n_1198), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b1),
       .q (DATA32_1_A[28]));
  CDN_flop \DATA32_1_A_reg[29] (.clk (CLK_A), .d (n_1199), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b0),
       .q (DATA32_1_A[29]));
  CDN_flop \DATA32_1_A_reg[30] (.clk (CLK_A), .d (n_1200), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b1),
       .q (DATA32_1_A[30]));
  CDN_flop \DATA32_1_A_reg[31] (.clk (CLK_A), .d (n_1201), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b0),
       .q (DATA32_1_A[31]));
  CDN_flop \DATA32_2_A_reg[0] (.clk (CLK_A), .d (n_1138), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b0), .q
       (DATA32_2_A[0]));
  CDN_flop \DATA32_2_A_reg[1] (.clk (CLK_A), .d (n_1139), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b1), .q
       (DATA32_2_A[1]));
  CDN_flop \DATA32_2_A_reg[2] (.clk (CLK_A), .d (n_1140), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b0), .q
       (DATA32_2_A[2]));
  CDN_flop \DATA32_2_A_reg[3] (.clk (CLK_A), .d (n_1141), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b1), .q
       (DATA32_2_A[3]));
  CDN_flop \DATA32_2_A_reg[4] (.clk (CLK_A), .d (n_1142), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b1), .q
       (DATA32_2_A[4]));
  CDN_flop \DATA32_2_A_reg[5] (.clk (CLK_A), .d (n_1143), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b0), .q
       (DATA32_2_A[5]));
  CDN_flop \DATA32_2_A_reg[6] (.clk (CLK_A), .d (n_1144), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b1), .q
       (DATA32_2_A[6]));
  CDN_flop \DATA32_2_A_reg[7] (.clk (CLK_A), .d (n_1145), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b0), .q
       (DATA32_2_A[7]));
  CDN_flop \DATA32_2_A_reg[8] (.clk (CLK_A), .d (n_1146), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b0), .q
       (DATA32_2_A[8]));
  CDN_flop \DATA32_2_A_reg[9] (.clk (CLK_A), .d (n_1147), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b1), .q
       (DATA32_2_A[9]));
  CDN_flop \DATA32_2_A_reg[10] (.clk (CLK_A), .d (n_1148), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b0),
       .q (DATA32_2_A[10]));
  CDN_flop \DATA32_2_A_reg[11] (.clk (CLK_A), .d (n_1149), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b1),
       .q (DATA32_2_A[11]));
  CDN_flop \DATA32_2_A_reg[12] (.clk (CLK_A), .d (n_1150), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b1),
       .q (DATA32_2_A[12]));
  CDN_flop \DATA32_2_A_reg[13] (.clk (CLK_A), .d (n_1151), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b0),
       .q (DATA32_2_A[13]));
  CDN_flop \DATA32_2_A_reg[14] (.clk (CLK_A), .d (n_1152), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b1),
       .q (DATA32_2_A[14]));
  CDN_flop \DATA32_2_A_reg[15] (.clk (CLK_A), .d (n_1153), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b0),
       .q (DATA32_2_A[15]));
  CDN_flop \DATA32_2_A_reg[16] (.clk (CLK_A), .d (n_1154), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b0),
       .q (DATA32_2_A[16]));
  CDN_flop \DATA32_2_A_reg[17] (.clk (CLK_A), .d (n_1155), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b1),
       .q (DATA32_2_A[17]));
  CDN_flop \DATA32_2_A_reg[18] (.clk (CLK_A), .d (n_1156), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b0),
       .q (DATA32_2_A[18]));
  CDN_flop \DATA32_2_A_reg[19] (.clk (CLK_A), .d (n_1157), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b1),
       .q (DATA32_2_A[19]));
  CDN_flop \DATA32_2_A_reg[20] (.clk (CLK_A), .d (n_1158), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b1),
       .q (DATA32_2_A[20]));
  CDN_flop \DATA32_2_A_reg[21] (.clk (CLK_A), .d (n_1159), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b0),
       .q (DATA32_2_A[21]));
  CDN_flop \DATA32_2_A_reg[22] (.clk (CLK_A), .d (n_1160), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b1),
       .q (DATA32_2_A[22]));
  CDN_flop \DATA32_2_A_reg[23] (.clk (CLK_A), .d (n_1161), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b0),
       .q (DATA32_2_A[23]));
  CDN_flop \DATA32_2_A_reg[24] (.clk (CLK_A), .d (n_1162), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b0),
       .q (DATA32_2_A[24]));
  CDN_flop \DATA32_2_A_reg[25] (.clk (CLK_A), .d (n_1163), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b1),
       .q (DATA32_2_A[25]));
  CDN_flop \DATA32_2_A_reg[26] (.clk (CLK_A), .d (n_1164), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b0),
       .q (DATA32_2_A[26]));
  CDN_flop \DATA32_2_A_reg[27] (.clk (CLK_A), .d (n_1165), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b1),
       .q (DATA32_2_A[27]));
  CDN_flop \DATA32_2_A_reg[28] (.clk (CLK_A), .d (n_1166), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b1),
       .q (DATA32_2_A[28]));
  CDN_flop \DATA32_2_A_reg[29] (.clk (CLK_A), .d (n_1167), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b0),
       .q (DATA32_2_A[29]));
  CDN_flop \DATA32_2_A_reg[30] (.clk (CLK_A), .d (n_1168), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b1),
       .q (DATA32_2_A[30]));
  CDN_flop \DATA32_2_A_reg[31] (.clk (CLK_A), .d (n_1169), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b0),
       .q (DATA32_2_A[31]));
  CDN_flop \DATA32_3_A_reg[0] (.clk (CLK_A), .d (n_1106), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b0), .q
       (DATA32_3_A[0]));
  CDN_flop \DATA32_3_A_reg[1] (.clk (CLK_A), .d (n_1107), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b1), .q
       (DATA32_3_A[1]));
  CDN_flop \DATA32_3_A_reg[2] (.clk (CLK_A), .d (n_1108), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b0), .q
       (DATA32_3_A[2]));
  CDN_flop \DATA32_3_A_reg[3] (.clk (CLK_A), .d (n_1109), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b1), .q
       (DATA32_3_A[3]));
  CDN_flop \DATA32_3_A_reg[4] (.clk (CLK_A), .d (n_1110), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b1), .q
       (DATA32_3_A[4]));
  CDN_flop \DATA32_3_A_reg[5] (.clk (CLK_A), .d (n_1111), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b0), .q
       (DATA32_3_A[5]));
  CDN_flop \DATA32_3_A_reg[6] (.clk (CLK_A), .d (n_1112), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b1), .q
       (DATA32_3_A[6]));
  CDN_flop \DATA32_3_A_reg[7] (.clk (CLK_A), .d (n_1113), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b0), .q
       (DATA32_3_A[7]));
  CDN_flop \DATA32_3_A_reg[8] (.clk (CLK_A), .d (n_1114), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b0), .q
       (DATA32_3_A[8]));
  CDN_flop \DATA32_3_A_reg[9] (.clk (CLK_A), .d (n_1115), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b1), .q
       (DATA32_3_A[9]));
  CDN_flop \DATA32_3_A_reg[10] (.clk (CLK_A), .d (n_1116), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b0),
       .q (DATA32_3_A[10]));
  CDN_flop \DATA32_3_A_reg[11] (.clk (CLK_A), .d (n_1117), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b1),
       .q (DATA32_3_A[11]));
  CDN_flop \DATA32_3_A_reg[12] (.clk (CLK_A), .d (n_1118), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b1),
       .q (DATA32_3_A[12]));
  CDN_flop \DATA32_3_A_reg[13] (.clk (CLK_A), .d (n_1119), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b0),
       .q (DATA32_3_A[13]));
  CDN_flop \DATA32_3_A_reg[14] (.clk (CLK_A), .d (n_1120), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b1),
       .q (DATA32_3_A[14]));
  CDN_flop \DATA32_3_A_reg[15] (.clk (CLK_A), .d (n_1121), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b0),
       .q (DATA32_3_A[15]));
  CDN_flop \DATA32_3_A_reg[16] (.clk (CLK_A), .d (n_1122), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b0),
       .q (DATA32_3_A[16]));
  CDN_flop \DATA32_3_A_reg[17] (.clk (CLK_A), .d (n_1123), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b1),
       .q (DATA32_3_A[17]));
  CDN_flop \DATA32_3_A_reg[18] (.clk (CLK_A), .d (n_1124), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b0),
       .q (DATA32_3_A[18]));
  CDN_flop \DATA32_3_A_reg[19] (.clk (CLK_A), .d (n_1125), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b1),
       .q (DATA32_3_A[19]));
  CDN_flop \DATA32_3_A_reg[20] (.clk (CLK_A), .d (n_1126), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b1),
       .q (DATA32_3_A[20]));
  CDN_flop \DATA32_3_A_reg[21] (.clk (CLK_A), .d (n_1127), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b0),
       .q (DATA32_3_A[21]));
  CDN_flop \DATA32_3_A_reg[22] (.clk (CLK_A), .d (n_1128), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b1),
       .q (DATA32_3_A[22]));
  CDN_flop \DATA32_3_A_reg[23] (.clk (CLK_A), .d (n_1129), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b0),
       .q (DATA32_3_A[23]));
  CDN_flop \DATA32_3_A_reg[24] (.clk (CLK_A), .d (n_1130), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b0),
       .q (DATA32_3_A[24]));
  CDN_flop \DATA32_3_A_reg[25] (.clk (CLK_A), .d (n_1131), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b1),
       .q (DATA32_3_A[25]));
  CDN_flop \DATA32_3_A_reg[26] (.clk (CLK_A), .d (n_1132), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b0),
       .q (DATA32_3_A[26]));
  CDN_flop \DATA32_3_A_reg[27] (.clk (CLK_A), .d (n_1133), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b1),
       .q (DATA32_3_A[27]));
  CDN_flop \DATA32_3_A_reg[28] (.clk (CLK_A), .d (n_1134), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b1),
       .q (DATA32_3_A[28]));
  CDN_flop \DATA32_3_A_reg[29] (.clk (CLK_A), .d (n_1135), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b0),
       .q (DATA32_3_A[29]));
  CDN_flop \DATA32_3_A_reg[30] (.clk (CLK_A), .d (n_1136), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b1),
       .q (DATA32_3_A[30]));
  CDN_flop \DATA32_3_A_reg[31] (.clk (CLK_A), .d (n_1137), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_1104), .srd (1'b0),
       .q (DATA32_3_A[31]));
  CDN_flop \DATA32_0_B_reg[0] (.clk (CLK_B), .d (n_1072), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b0), .q
       (DATA32_0_B[0]));
  CDN_flop \DATA32_0_B_reg[1] (.clk (CLK_B), .d (n_1073), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b1), .q
       (DATA32_0_B[1]));
  CDN_flop \DATA32_0_B_reg[2] (.clk (CLK_B), .d (n_1074), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b0), .q
       (DATA32_0_B[2]));
  CDN_flop \DATA32_0_B_reg[3] (.clk (CLK_B), .d (n_1075), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b1), .q
       (DATA32_0_B[3]));
  CDN_flop \DATA32_0_B_reg[4] (.clk (CLK_B), .d (n_1076), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b0), .q
       (DATA32_0_B[4]));
  CDN_flop \DATA32_0_B_reg[5] (.clk (CLK_B), .d (n_1077), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b1), .q
       (DATA32_0_B[5]));
  CDN_flop \DATA32_0_B_reg[6] (.clk (CLK_B), .d (n_1078), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b0), .q
       (DATA32_0_B[6]));
  CDN_flop \DATA32_0_B_reg[7] (.clk (CLK_B), .d (n_1079), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b1), .q
       (DATA32_0_B[7]));
  CDN_flop \DATA32_0_B_reg[8] (.clk (CLK_B), .d (n_1080), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b0), .q
       (DATA32_0_B[8]));
  CDN_flop \DATA32_0_B_reg[9] (.clk (CLK_B), .d (n_1081), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b1), .q
       (DATA32_0_B[9]));
  CDN_flop \DATA32_0_B_reg[10] (.clk (CLK_B), .d (n_1082), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b0),
       .q (DATA32_0_B[10]));
  CDN_flop \DATA32_0_B_reg[11] (.clk (CLK_B), .d (n_1083), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b1),
       .q (DATA32_0_B[11]));
  CDN_flop \DATA32_0_B_reg[12] (.clk (CLK_B), .d (n_1084), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b0),
       .q (DATA32_0_B[12]));
  CDN_flop \DATA32_0_B_reg[13] (.clk (CLK_B), .d (n_1085), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b1),
       .q (DATA32_0_B[13]));
  CDN_flop \DATA32_0_B_reg[14] (.clk (CLK_B), .d (n_1086), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b0),
       .q (DATA32_0_B[14]));
  CDN_flop \DATA32_0_B_reg[15] (.clk (CLK_B), .d (n_1087), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b1),
       .q (DATA32_0_B[15]));
  CDN_flop \DATA32_0_B_reg[16] (.clk (CLK_B), .d (n_1088), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b0),
       .q (DATA32_0_B[16]));
  CDN_flop \DATA32_0_B_reg[17] (.clk (CLK_B), .d (n_1089), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b1),
       .q (DATA32_0_B[17]));
  CDN_flop \DATA32_0_B_reg[18] (.clk (CLK_B), .d (n_1090), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b0),
       .q (DATA32_0_B[18]));
  CDN_flop \DATA32_0_B_reg[19] (.clk (CLK_B), .d (n_1091), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b1),
       .q (DATA32_0_B[19]));
  CDN_flop \DATA32_0_B_reg[20] (.clk (CLK_B), .d (n_1092), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b0),
       .q (DATA32_0_B[20]));
  CDN_flop \DATA32_0_B_reg[21] (.clk (CLK_B), .d (n_1093), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b1),
       .q (DATA32_0_B[21]));
  CDN_flop \DATA32_0_B_reg[22] (.clk (CLK_B), .d (n_1094), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b0),
       .q (DATA32_0_B[22]));
  CDN_flop \DATA32_0_B_reg[23] (.clk (CLK_B), .d (n_1095), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b1),
       .q (DATA32_0_B[23]));
  CDN_flop \DATA32_0_B_reg[24] (.clk (CLK_B), .d (n_1096), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b0),
       .q (DATA32_0_B[24]));
  CDN_flop \DATA32_0_B_reg[25] (.clk (CLK_B), .d (n_1097), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b1),
       .q (DATA32_0_B[25]));
  CDN_flop \DATA32_0_B_reg[26] (.clk (CLK_B), .d (n_1098), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b0),
       .q (DATA32_0_B[26]));
  CDN_flop \DATA32_0_B_reg[27] (.clk (CLK_B), .d (n_1099), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b1),
       .q (DATA32_0_B[27]));
  CDN_flop \DATA32_0_B_reg[28] (.clk (CLK_B), .d (n_1100), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b0),
       .q (DATA32_0_B[28]));
  CDN_flop \DATA32_0_B_reg[29] (.clk (CLK_B), .d (n_1101), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b1),
       .q (DATA32_0_B[29]));
  CDN_flop \DATA32_0_B_reg[30] (.clk (CLK_B), .d (n_1102), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b1),
       .q (DATA32_0_B[30]));
  CDN_flop \DATA32_0_B_reg[31] (.clk (CLK_B), .d (n_1103), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b1),
       .q (DATA32_0_B[31]));
  CDN_flop \DATA32_1_B_reg[0] (.clk (CLK_B), .d (n_1007), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b0), .q
       (DATA32_1_B[0]));
  CDN_flop \DATA32_1_B_reg[1] (.clk (CLK_B), .d (n_1008), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b1), .q
       (DATA32_1_B[1]));
  CDN_flop \DATA32_1_B_reg[2] (.clk (CLK_B), .d (n_1009), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b0), .q
       (DATA32_1_B[2]));
  CDN_flop \DATA32_1_B_reg[3] (.clk (CLK_B), .d (n_1010), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b1), .q
       (DATA32_1_B[3]));
  CDN_flop \DATA32_1_B_reg[4] (.clk (CLK_B), .d (n_1011), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b1), .q
       (DATA32_1_B[4]));
  CDN_flop \DATA32_1_B_reg[5] (.clk (CLK_B), .d (n_1012), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b0), .q
       (DATA32_1_B[5]));
  CDN_flop \DATA32_1_B_reg[6] (.clk (CLK_B), .d (n_1013), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b1), .q
       (DATA32_1_B[6]));
  CDN_flop \DATA32_1_B_reg[7] (.clk (CLK_B), .d (n_1014), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b0), .q
       (DATA32_1_B[7]));
  CDN_flop \DATA32_1_B_reg[8] (.clk (CLK_B), .d (n_1015), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b0), .q
       (DATA32_1_B[8]));
  CDN_flop \DATA32_1_B_reg[9] (.clk (CLK_B), .d (n_1016), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b1), .q
       (DATA32_1_B[9]));
  CDN_flop \DATA32_1_B_reg[10] (.clk (CLK_B), .d (n_1017), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b0),
       .q (DATA32_1_B[10]));
  CDN_flop \DATA32_1_B_reg[11] (.clk (CLK_B), .d (n_1018), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b1),
       .q (DATA32_1_B[11]));
  CDN_flop \DATA32_1_B_reg[12] (.clk (CLK_B), .d (n_1019), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b1),
       .q (DATA32_1_B[12]));
  CDN_flop \DATA32_1_B_reg[13] (.clk (CLK_B), .d (n_1020), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b0),
       .q (DATA32_1_B[13]));
  CDN_flop \DATA32_1_B_reg[14] (.clk (CLK_B), .d (n_1021), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b1),
       .q (DATA32_1_B[14]));
  CDN_flop \DATA32_1_B_reg[15] (.clk (CLK_B), .d (n_1022), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b0),
       .q (DATA32_1_B[15]));
  CDN_flop \DATA32_1_B_reg[16] (.clk (CLK_B), .d (n_1023), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b0),
       .q (DATA32_1_B[16]));
  CDN_flop \DATA32_1_B_reg[17] (.clk (CLK_B), .d (n_1024), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b1),
       .q (DATA32_1_B[17]));
  CDN_flop \DATA32_1_B_reg[18] (.clk (CLK_B), .d (n_1025), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b0),
       .q (DATA32_1_B[18]));
  CDN_flop \DATA32_1_B_reg[19] (.clk (CLK_B), .d (n_1026), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b1),
       .q (DATA32_1_B[19]));
  CDN_flop \DATA32_1_B_reg[20] (.clk (CLK_B), .d (n_1027), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b1),
       .q (DATA32_1_B[20]));
  CDN_flop \DATA32_1_B_reg[21] (.clk (CLK_B), .d (n_1028), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b0),
       .q (DATA32_1_B[21]));
  CDN_flop \DATA32_1_B_reg[22] (.clk (CLK_B), .d (n_1029), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b1),
       .q (DATA32_1_B[22]));
  CDN_flop \DATA32_1_B_reg[23] (.clk (CLK_B), .d (n_1030), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b0),
       .q (DATA32_1_B[23]));
  CDN_flop \DATA32_1_B_reg[24] (.clk (CLK_B), .d (n_1031), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b0),
       .q (DATA32_1_B[24]));
  CDN_flop \DATA32_1_B_reg[25] (.clk (CLK_B), .d (n_1032), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b1),
       .q (DATA32_1_B[25]));
  CDN_flop \DATA32_1_B_reg[26] (.clk (CLK_B), .d (n_1033), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b0),
       .q (DATA32_1_B[26]));
  CDN_flop \DATA32_1_B_reg[27] (.clk (CLK_B), .d (n_1034), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b1),
       .q (DATA32_1_B[27]));
  CDN_flop \DATA32_1_B_reg[28] (.clk (CLK_B), .d (n_1035), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b1),
       .q (DATA32_1_B[28]));
  CDN_flop \DATA32_1_B_reg[29] (.clk (CLK_B), .d (n_1036), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b0),
       .q (DATA32_1_B[29]));
  CDN_flop \DATA32_1_B_reg[30] (.clk (CLK_B), .d (n_1037), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b1),
       .q (DATA32_1_B[30]));
  CDN_flop \DATA32_1_B_reg[31] (.clk (CLK_B), .d (n_1038), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b0),
       .q (DATA32_1_B[31]));
  CDN_flop \DATA32_2_B_reg[0] (.clk (CLK_B), .d (n_975), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b0), .q
       (DATA32_2_B[0]));
  CDN_flop \DATA32_2_B_reg[1] (.clk (CLK_B), .d (n_976), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b1), .q
       (DATA32_2_B[1]));
  CDN_flop \DATA32_2_B_reg[2] (.clk (CLK_B), .d (n_977), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b0), .q
       (DATA32_2_B[2]));
  CDN_flop \DATA32_2_B_reg[3] (.clk (CLK_B), .d (n_978), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b1), .q
       (DATA32_2_B[3]));
  CDN_flop \DATA32_2_B_reg[4] (.clk (CLK_B), .d (n_979), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b1), .q
       (DATA32_2_B[4]));
  CDN_flop \DATA32_2_B_reg[5] (.clk (CLK_B), .d (n_980), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b0), .q
       (DATA32_2_B[5]));
  CDN_flop \DATA32_2_B_reg[6] (.clk (CLK_B), .d (n_981), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b1), .q
       (DATA32_2_B[6]));
  CDN_flop \DATA32_2_B_reg[7] (.clk (CLK_B), .d (n_982), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b0), .q
       (DATA32_2_B[7]));
  CDN_flop \DATA32_2_B_reg[8] (.clk (CLK_B), .d (n_983), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b0), .q
       (DATA32_2_B[8]));
  CDN_flop \DATA32_2_B_reg[9] (.clk (CLK_B), .d (n_984), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b1), .q
       (DATA32_2_B[9]));
  CDN_flop \DATA32_2_B_reg[10] (.clk (CLK_B), .d (n_985), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b0), .q
       (DATA32_2_B[10]));
  CDN_flop \DATA32_2_B_reg[11] (.clk (CLK_B), .d (n_986), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b1), .q
       (DATA32_2_B[11]));
  CDN_flop \DATA32_2_B_reg[12] (.clk (CLK_B), .d (n_987), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b1), .q
       (DATA32_2_B[12]));
  CDN_flop \DATA32_2_B_reg[13] (.clk (CLK_B), .d (n_988), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b0), .q
       (DATA32_2_B[13]));
  CDN_flop \DATA32_2_B_reg[14] (.clk (CLK_B), .d (n_989), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b1), .q
       (DATA32_2_B[14]));
  CDN_flop \DATA32_2_B_reg[15] (.clk (CLK_B), .d (n_990), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b0), .q
       (DATA32_2_B[15]));
  CDN_flop \DATA32_2_B_reg[16] (.clk (CLK_B), .d (n_991), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b0), .q
       (DATA32_2_B[16]));
  CDN_flop \DATA32_2_B_reg[17] (.clk (CLK_B), .d (n_992), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b1), .q
       (DATA32_2_B[17]));
  CDN_flop \DATA32_2_B_reg[18] (.clk (CLK_B), .d (n_993), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b0), .q
       (DATA32_2_B[18]));
  CDN_flop \DATA32_2_B_reg[19] (.clk (CLK_B), .d (n_994), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b1), .q
       (DATA32_2_B[19]));
  CDN_flop \DATA32_2_B_reg[20] (.clk (CLK_B), .d (n_995), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b1), .q
       (DATA32_2_B[20]));
  CDN_flop \DATA32_2_B_reg[21] (.clk (CLK_B), .d (n_996), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b0), .q
       (DATA32_2_B[21]));
  CDN_flop \DATA32_2_B_reg[22] (.clk (CLK_B), .d (n_997), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b1), .q
       (DATA32_2_B[22]));
  CDN_flop \DATA32_2_B_reg[23] (.clk (CLK_B), .d (n_998), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b0), .q
       (DATA32_2_B[23]));
  CDN_flop \DATA32_2_B_reg[24] (.clk (CLK_B), .d (n_999), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b0), .q
       (DATA32_2_B[24]));
  CDN_flop \DATA32_2_B_reg[25] (.clk (CLK_B), .d (n_1000), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b1),
       .q (DATA32_2_B[25]));
  CDN_flop \DATA32_2_B_reg[26] (.clk (CLK_B), .d (n_1001), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b0),
       .q (DATA32_2_B[26]));
  CDN_flop \DATA32_2_B_reg[27] (.clk (CLK_B), .d (n_1002), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b1),
       .q (DATA32_2_B[27]));
  CDN_flop \DATA32_2_B_reg[28] (.clk (CLK_B), .d (n_1003), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b1),
       .q (DATA32_2_B[28]));
  CDN_flop \DATA32_2_B_reg[29] (.clk (CLK_B), .d (n_1004), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b0),
       .q (DATA32_2_B[29]));
  CDN_flop \DATA32_2_B_reg[30] (.clk (CLK_B), .d (n_1005), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b1),
       .q (DATA32_2_B[30]));
  CDN_flop \DATA32_2_B_reg[31] (.clk (CLK_B), .d (n_1006), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b0),
       .q (DATA32_2_B[31]));
  CDN_flop \DATA32_3_B_reg[0] (.clk (CLK_B), .d (n_943), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b0), .q
       (DATA32_3_B[0]));
  CDN_flop \DATA32_3_B_reg[1] (.clk (CLK_B), .d (n_944), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b1), .q
       (DATA32_3_B[1]));
  CDN_flop \DATA32_3_B_reg[2] (.clk (CLK_B), .d (n_945), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b0), .q
       (DATA32_3_B[2]));
  CDN_flop \DATA32_3_B_reg[3] (.clk (CLK_B), .d (n_946), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b1), .q
       (DATA32_3_B[3]));
  CDN_flop \DATA32_3_B_reg[4] (.clk (CLK_B), .d (n_947), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b1), .q
       (DATA32_3_B[4]));
  CDN_flop \DATA32_3_B_reg[5] (.clk (CLK_B), .d (n_948), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b0), .q
       (DATA32_3_B[5]));
  CDN_flop \DATA32_3_B_reg[6] (.clk (CLK_B), .d (n_949), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b1), .q
       (DATA32_3_B[6]));
  CDN_flop \DATA32_3_B_reg[7] (.clk (CLK_B), .d (n_950), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b0), .q
       (DATA32_3_B[7]));
  CDN_flop \DATA32_3_B_reg[8] (.clk (CLK_B), .d (n_951), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b0), .q
       (DATA32_3_B[8]));
  CDN_flop \DATA32_3_B_reg[9] (.clk (CLK_B), .d (n_952), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b1), .q
       (DATA32_3_B[9]));
  CDN_flop \DATA32_3_B_reg[10] (.clk (CLK_B), .d (n_953), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b0), .q
       (DATA32_3_B[10]));
  CDN_flop \DATA32_3_B_reg[11] (.clk (CLK_B), .d (n_954), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b1), .q
       (DATA32_3_B[11]));
  CDN_flop \DATA32_3_B_reg[12] (.clk (CLK_B), .d (n_955), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b1), .q
       (DATA32_3_B[12]));
  CDN_flop \DATA32_3_B_reg[13] (.clk (CLK_B), .d (n_956), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b0), .q
       (DATA32_3_B[13]));
  CDN_flop \DATA32_3_B_reg[14] (.clk (CLK_B), .d (n_957), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b1), .q
       (DATA32_3_B[14]));
  CDN_flop \DATA32_3_B_reg[15] (.clk (CLK_B), .d (n_958), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b0), .q
       (DATA32_3_B[15]));
  CDN_flop \DATA32_3_B_reg[16] (.clk (CLK_B), .d (n_959), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b0), .q
       (DATA32_3_B[16]));
  CDN_flop \DATA32_3_B_reg[17] (.clk (CLK_B), .d (n_960), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b1), .q
       (DATA32_3_B[17]));
  CDN_flop \DATA32_3_B_reg[18] (.clk (CLK_B), .d (n_961), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b0), .q
       (DATA32_3_B[18]));
  CDN_flop \DATA32_3_B_reg[19] (.clk (CLK_B), .d (n_962), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b1), .q
       (DATA32_3_B[19]));
  CDN_flop \DATA32_3_B_reg[20] (.clk (CLK_B), .d (n_963), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b1), .q
       (DATA32_3_B[20]));
  CDN_flop \DATA32_3_B_reg[21] (.clk (CLK_B), .d (n_964), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b0), .q
       (DATA32_3_B[21]));
  CDN_flop \DATA32_3_B_reg[22] (.clk (CLK_B), .d (n_965), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b1), .q
       (DATA32_3_B[22]));
  CDN_flop \DATA32_3_B_reg[23] (.clk (CLK_B), .d (n_966), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b0), .q
       (DATA32_3_B[23]));
  CDN_flop \DATA32_3_B_reg[24] (.clk (CLK_B), .d (n_967), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b0), .q
       (DATA32_3_B[24]));
  CDN_flop \DATA32_3_B_reg[25] (.clk (CLK_B), .d (n_968), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b1), .q
       (DATA32_3_B[25]));
  CDN_flop \DATA32_3_B_reg[26] (.clk (CLK_B), .d (n_969), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b0), .q
       (DATA32_3_B[26]));
  CDN_flop \DATA32_3_B_reg[27] (.clk (CLK_B), .d (n_970), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b1), .q
       (DATA32_3_B[27]));
  CDN_flop \DATA32_3_B_reg[28] (.clk (CLK_B), .d (n_971), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b1), .q
       (DATA32_3_B[28]));
  CDN_flop \DATA32_3_B_reg[29] (.clk (CLK_B), .d (n_972), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b0), .q
       (DATA32_3_B[29]));
  CDN_flop \DATA32_3_B_reg[30] (.clk (CLK_B), .d (n_973), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b1), .q
       (DATA32_3_B[30]));
  CDN_flop \DATA32_3_B_reg[31] (.clk (CLK_B), .d (n_974), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_941), .srd (1'b0), .q
       (DATA32_3_B[31]));
  CDN_flop \DATA32_0_C_reg[0] (.clk (CLK_C), .d (n_909), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b0), .q
       (DATA32_0_C[0]));
  CDN_flop \DATA32_0_C_reg[1] (.clk (CLK_C), .d (n_910), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b1), .q
       (DATA32_0_C[1]));
  CDN_flop \DATA32_0_C_reg[2] (.clk (CLK_C), .d (n_911), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b0), .q
       (DATA32_0_C[2]));
  CDN_flop \DATA32_0_C_reg[3] (.clk (CLK_C), .d (n_912), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b1), .q
       (DATA32_0_C[3]));
  CDN_flop \DATA32_0_C_reg[4] (.clk (CLK_C), .d (n_913), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b0), .q
       (DATA32_0_C[4]));
  CDN_flop \DATA32_0_C_reg[5] (.clk (CLK_C), .d (n_914), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b1), .q
       (DATA32_0_C[5]));
  CDN_flop \DATA32_0_C_reg[6] (.clk (CLK_C), .d (n_915), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b0), .q
       (DATA32_0_C[6]));
  CDN_flop \DATA32_0_C_reg[7] (.clk (CLK_C), .d (n_916), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b1), .q
       (DATA32_0_C[7]));
  CDN_flop \DATA32_0_C_reg[8] (.clk (CLK_C), .d (n_917), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b0), .q
       (DATA32_0_C[8]));
  CDN_flop \DATA32_0_C_reg[9] (.clk (CLK_C), .d (n_918), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b1), .q
       (DATA32_0_C[9]));
  CDN_flop \DATA32_0_C_reg[10] (.clk (CLK_C), .d (n_919), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b0), .q
       (DATA32_0_C[10]));
  CDN_flop \DATA32_0_C_reg[11] (.clk (CLK_C), .d (n_920), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b1), .q
       (DATA32_0_C[11]));
  CDN_flop \DATA32_0_C_reg[12] (.clk (CLK_C), .d (n_921), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b0), .q
       (DATA32_0_C[12]));
  CDN_flop \DATA32_0_C_reg[13] (.clk (CLK_C), .d (n_922), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b1), .q
       (DATA32_0_C[13]));
  CDN_flop \DATA32_0_C_reg[14] (.clk (CLK_C), .d (n_923), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b0), .q
       (DATA32_0_C[14]));
  CDN_flop \DATA32_0_C_reg[15] (.clk (CLK_C), .d (n_924), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b1), .q
       (DATA32_0_C[15]));
  CDN_flop \DATA32_0_C_reg[16] (.clk (CLK_C), .d (n_925), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b0), .q
       (DATA32_0_C[16]));
  CDN_flop \DATA32_0_C_reg[17] (.clk (CLK_C), .d (n_926), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b1), .q
       (DATA32_0_C[17]));
  CDN_flop \DATA32_0_C_reg[18] (.clk (CLK_C), .d (n_927), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b0), .q
       (DATA32_0_C[18]));
  CDN_flop \DATA32_0_C_reg[19] (.clk (CLK_C), .d (n_928), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b1), .q
       (DATA32_0_C[19]));
  CDN_flop \DATA32_0_C_reg[20] (.clk (CLK_C), .d (n_929), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b0), .q
       (DATA32_0_C[20]));
  CDN_flop \DATA32_0_C_reg[21] (.clk (CLK_C), .d (n_930), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b1), .q
       (DATA32_0_C[21]));
  CDN_flop \DATA32_0_C_reg[22] (.clk (CLK_C), .d (n_931), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b0), .q
       (DATA32_0_C[22]));
  CDN_flop \DATA32_0_C_reg[23] (.clk (CLK_C), .d (n_932), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b1), .q
       (DATA32_0_C[23]));
  CDN_flop \DATA32_0_C_reg[24] (.clk (CLK_C), .d (n_933), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b0), .q
       (DATA32_0_C[24]));
  CDN_flop \DATA32_0_C_reg[25] (.clk (CLK_C), .d (n_934), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b1), .q
       (DATA32_0_C[25]));
  CDN_flop \DATA32_0_C_reg[26] (.clk (CLK_C), .d (n_935), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b0), .q
       (DATA32_0_C[26]));
  CDN_flop \DATA32_0_C_reg[27] (.clk (CLK_C), .d (n_936), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b1), .q
       (DATA32_0_C[27]));
  CDN_flop \DATA32_0_C_reg[28] (.clk (CLK_C), .d (n_937), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b0), .q
       (DATA32_0_C[28]));
  CDN_flop \DATA32_0_C_reg[29] (.clk (CLK_C), .d (n_938), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b1), .q
       (DATA32_0_C[29]));
  CDN_flop \DATA32_0_C_reg[30] (.clk (CLK_C), .d (n_939), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b1), .q
       (DATA32_0_C[30]));
  CDN_flop \DATA32_0_C_reg[31] (.clk (CLK_C), .d (n_940), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b1), .q
       (DATA32_0_C[31]));
  CDN_flop \DATA32_1_C_reg[0] (.clk (CLK_C), .d (n_844), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b0), .q
       (DATA32_1_C[0]));
  CDN_flop \DATA32_1_C_reg[1] (.clk (CLK_C), .d (n_845), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b1), .q
       (DATA32_1_C[1]));
  CDN_flop \DATA32_1_C_reg[2] (.clk (CLK_C), .d (n_846), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b0), .q
       (DATA32_1_C[2]));
  CDN_flop \DATA32_1_C_reg[3] (.clk (CLK_C), .d (n_847), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b1), .q
       (DATA32_1_C[3]));
  CDN_flop \DATA32_1_C_reg[4] (.clk (CLK_C), .d (n_848), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b1), .q
       (DATA32_1_C[4]));
  CDN_flop \DATA32_1_C_reg[5] (.clk (CLK_C), .d (n_849), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b0), .q
       (DATA32_1_C[5]));
  CDN_flop \DATA32_1_C_reg[6] (.clk (CLK_C), .d (n_850), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b1), .q
       (DATA32_1_C[6]));
  CDN_flop \DATA32_1_C_reg[7] (.clk (CLK_C), .d (n_851), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b0), .q
       (DATA32_1_C[7]));
  CDN_flop \DATA32_1_C_reg[8] (.clk (CLK_C), .d (n_852), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b0), .q
       (DATA32_1_C[8]));
  CDN_flop \DATA32_1_C_reg[9] (.clk (CLK_C), .d (n_853), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b1), .q
       (DATA32_1_C[9]));
  CDN_flop \DATA32_1_C_reg[10] (.clk (CLK_C), .d (n_854), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b0), .q
       (DATA32_1_C[10]));
  CDN_flop \DATA32_1_C_reg[11] (.clk (CLK_C), .d (n_855), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b1), .q
       (DATA32_1_C[11]));
  CDN_flop \DATA32_1_C_reg[12] (.clk (CLK_C), .d (n_856), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b1), .q
       (DATA32_1_C[12]));
  CDN_flop \DATA32_1_C_reg[13] (.clk (CLK_C), .d (n_857), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b0), .q
       (DATA32_1_C[13]));
  CDN_flop \DATA32_1_C_reg[14] (.clk (CLK_C), .d (n_858), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b1), .q
       (DATA32_1_C[14]));
  CDN_flop \DATA32_1_C_reg[15] (.clk (CLK_C), .d (n_859), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b0), .q
       (DATA32_1_C[15]));
  CDN_flop \DATA32_1_C_reg[16] (.clk (CLK_C), .d (n_860), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b0), .q
       (DATA32_1_C[16]));
  CDN_flop \DATA32_1_C_reg[17] (.clk (CLK_C), .d (n_861), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b1), .q
       (DATA32_1_C[17]));
  CDN_flop \DATA32_1_C_reg[18] (.clk (CLK_C), .d (n_862), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b0), .q
       (DATA32_1_C[18]));
  CDN_flop \DATA32_1_C_reg[19] (.clk (CLK_C), .d (n_863), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b1), .q
       (DATA32_1_C[19]));
  CDN_flop \DATA32_1_C_reg[20] (.clk (CLK_C), .d (n_864), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b1), .q
       (DATA32_1_C[20]));
  CDN_flop \DATA32_1_C_reg[21] (.clk (CLK_C), .d (n_865), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b0), .q
       (DATA32_1_C[21]));
  CDN_flop \DATA32_1_C_reg[22] (.clk (CLK_C), .d (n_866), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b1), .q
       (DATA32_1_C[22]));
  CDN_flop \DATA32_1_C_reg[23] (.clk (CLK_C), .d (n_867), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b0), .q
       (DATA32_1_C[23]));
  CDN_flop \DATA32_1_C_reg[24] (.clk (CLK_C), .d (n_868), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b0), .q
       (DATA32_1_C[24]));
  CDN_flop \DATA32_1_C_reg[25] (.clk (CLK_C), .d (n_869), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b1), .q
       (DATA32_1_C[25]));
  CDN_flop \DATA32_1_C_reg[26] (.clk (CLK_C), .d (n_870), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b0), .q
       (DATA32_1_C[26]));
  CDN_flop \DATA32_1_C_reg[27] (.clk (CLK_C), .d (n_871), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b1), .q
       (DATA32_1_C[27]));
  CDN_flop \DATA32_1_C_reg[28] (.clk (CLK_C), .d (n_872), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b1), .q
       (DATA32_1_C[28]));
  CDN_flop \DATA32_1_C_reg[29] (.clk (CLK_C), .d (n_873), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b0), .q
       (DATA32_1_C[29]));
  CDN_flop \DATA32_1_C_reg[30] (.clk (CLK_C), .d (n_874), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b1), .q
       (DATA32_1_C[30]));
  CDN_flop \DATA32_1_C_reg[31] (.clk (CLK_C), .d (n_875), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b0), .q
       (DATA32_1_C[31]));
  CDN_flop \DATA32_2_C_reg[0] (.clk (CLK_C), .d (n_812), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b0), .q
       (DATA32_2_C[0]));
  CDN_flop \DATA32_2_C_reg[1] (.clk (CLK_C), .d (n_813), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b1), .q
       (DATA32_2_C[1]));
  CDN_flop \DATA32_2_C_reg[2] (.clk (CLK_C), .d (n_814), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b0), .q
       (DATA32_2_C[2]));
  CDN_flop \DATA32_2_C_reg[3] (.clk (CLK_C), .d (n_815), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b1), .q
       (DATA32_2_C[3]));
  CDN_flop \DATA32_2_C_reg[4] (.clk (CLK_C), .d (n_816), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b1), .q
       (DATA32_2_C[4]));
  CDN_flop \DATA32_2_C_reg[5] (.clk (CLK_C), .d (n_817), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b0), .q
       (DATA32_2_C[5]));
  CDN_flop \DATA32_2_C_reg[6] (.clk (CLK_C), .d (n_818), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b1), .q
       (DATA32_2_C[6]));
  CDN_flop \DATA32_2_C_reg[7] (.clk (CLK_C), .d (n_819), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b0), .q
       (DATA32_2_C[7]));
  CDN_flop \DATA32_2_C_reg[8] (.clk (CLK_C), .d (n_820), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b0), .q
       (DATA32_2_C[8]));
  CDN_flop \DATA32_2_C_reg[9] (.clk (CLK_C), .d (n_821), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b1), .q
       (DATA32_2_C[9]));
  CDN_flop \DATA32_2_C_reg[10] (.clk (CLK_C), .d (n_822), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b0), .q
       (DATA32_2_C[10]));
  CDN_flop \DATA32_2_C_reg[11] (.clk (CLK_C), .d (n_823), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b1), .q
       (DATA32_2_C[11]));
  CDN_flop \DATA32_2_C_reg[12] (.clk (CLK_C), .d (n_824), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b1), .q
       (DATA32_2_C[12]));
  CDN_flop \DATA32_2_C_reg[13] (.clk (CLK_C), .d (n_825), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b0), .q
       (DATA32_2_C[13]));
  CDN_flop \DATA32_2_C_reg[14] (.clk (CLK_C), .d (n_826), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b1), .q
       (DATA32_2_C[14]));
  CDN_flop \DATA32_2_C_reg[15] (.clk (CLK_C), .d (n_827), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b0), .q
       (DATA32_2_C[15]));
  CDN_flop \DATA32_2_C_reg[16] (.clk (CLK_C), .d (n_828), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b0), .q
       (DATA32_2_C[16]));
  CDN_flop \DATA32_2_C_reg[17] (.clk (CLK_C), .d (n_829), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b1), .q
       (DATA32_2_C[17]));
  CDN_flop \DATA32_2_C_reg[18] (.clk (CLK_C), .d (n_830), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b0), .q
       (DATA32_2_C[18]));
  CDN_flop \DATA32_2_C_reg[19] (.clk (CLK_C), .d (n_831), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b1), .q
       (DATA32_2_C[19]));
  CDN_flop \DATA32_2_C_reg[20] (.clk (CLK_C), .d (n_832), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b1), .q
       (DATA32_2_C[20]));
  CDN_flop \DATA32_2_C_reg[21] (.clk (CLK_C), .d (n_833), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b0), .q
       (DATA32_2_C[21]));
  CDN_flop \DATA32_2_C_reg[22] (.clk (CLK_C), .d (n_834), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b1), .q
       (DATA32_2_C[22]));
  CDN_flop \DATA32_2_C_reg[23] (.clk (CLK_C), .d (n_835), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b0), .q
       (DATA32_2_C[23]));
  CDN_flop \DATA32_2_C_reg[24] (.clk (CLK_C), .d (n_836), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b0), .q
       (DATA32_2_C[24]));
  CDN_flop \DATA32_2_C_reg[25] (.clk (CLK_C), .d (n_837), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b1), .q
       (DATA32_2_C[25]));
  CDN_flop \DATA32_2_C_reg[26] (.clk (CLK_C), .d (n_838), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b0), .q
       (DATA32_2_C[26]));
  CDN_flop \DATA32_2_C_reg[27] (.clk (CLK_C), .d (n_839), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b1), .q
       (DATA32_2_C[27]));
  CDN_flop \DATA32_2_C_reg[28] (.clk (CLK_C), .d (n_840), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b1), .q
       (DATA32_2_C[28]));
  CDN_flop \DATA32_2_C_reg[29] (.clk (CLK_C), .d (n_841), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b0), .q
       (DATA32_2_C[29]));
  CDN_flop \DATA32_2_C_reg[30] (.clk (CLK_C), .d (n_842), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b1), .q
       (DATA32_2_C[30]));
  CDN_flop \DATA32_2_C_reg[31] (.clk (CLK_C), .d (n_843), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b0), .q
       (DATA32_2_C[31]));
  CDN_flop \DATA32_3_C_reg[0] (.clk (CLK_C), .d (n_780), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b0), .q
       (DATA32_3_C[0]));
  CDN_flop \DATA32_3_C_reg[1] (.clk (CLK_C), .d (n_781), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b1), .q
       (DATA32_3_C[1]));
  CDN_flop \DATA32_3_C_reg[2] (.clk (CLK_C), .d (n_782), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b0), .q
       (DATA32_3_C[2]));
  CDN_flop \DATA32_3_C_reg[3] (.clk (CLK_C), .d (n_783), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b1), .q
       (DATA32_3_C[3]));
  CDN_flop \DATA32_3_C_reg[4] (.clk (CLK_C), .d (n_784), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b1), .q
       (DATA32_3_C[4]));
  CDN_flop \DATA32_3_C_reg[5] (.clk (CLK_C), .d (n_785), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b0), .q
       (DATA32_3_C[5]));
  CDN_flop \DATA32_3_C_reg[6] (.clk (CLK_C), .d (n_786), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b1), .q
       (DATA32_3_C[6]));
  CDN_flop \DATA32_3_C_reg[7] (.clk (CLK_C), .d (n_787), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b0), .q
       (DATA32_3_C[7]));
  CDN_flop \DATA32_3_C_reg[8] (.clk (CLK_C), .d (n_788), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b0), .q
       (DATA32_3_C[8]));
  CDN_flop \DATA32_3_C_reg[9] (.clk (CLK_C), .d (n_789), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b1), .q
       (DATA32_3_C[9]));
  CDN_flop \DATA32_3_C_reg[10] (.clk (CLK_C), .d (n_790), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b0), .q
       (DATA32_3_C[10]));
  CDN_flop \DATA32_3_C_reg[11] (.clk (CLK_C), .d (n_791), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b1), .q
       (DATA32_3_C[11]));
  CDN_flop \DATA32_3_C_reg[12] (.clk (CLK_C), .d (n_792), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b1), .q
       (DATA32_3_C[12]));
  CDN_flop \DATA32_3_C_reg[13] (.clk (CLK_C), .d (n_793), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b0), .q
       (DATA32_3_C[13]));
  CDN_flop \DATA32_3_C_reg[14] (.clk (CLK_C), .d (n_794), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b1), .q
       (DATA32_3_C[14]));
  CDN_flop \DATA32_3_C_reg[15] (.clk (CLK_C), .d (n_795), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b0), .q
       (DATA32_3_C[15]));
  CDN_flop \DATA32_3_C_reg[16] (.clk (CLK_C), .d (n_796), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b0), .q
       (DATA32_3_C[16]));
  CDN_flop \DATA32_3_C_reg[17] (.clk (CLK_C), .d (n_797), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b1), .q
       (DATA32_3_C[17]));
  CDN_flop \DATA32_3_C_reg[18] (.clk (CLK_C), .d (n_798), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b0), .q
       (DATA32_3_C[18]));
  CDN_flop \DATA32_3_C_reg[19] (.clk (CLK_C), .d (n_799), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b1), .q
       (DATA32_3_C[19]));
  CDN_flop \DATA32_3_C_reg[20] (.clk (CLK_C), .d (n_800), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b1), .q
       (DATA32_3_C[20]));
  CDN_flop \DATA32_3_C_reg[21] (.clk (CLK_C), .d (n_801), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b0), .q
       (DATA32_3_C[21]));
  CDN_flop \DATA32_3_C_reg[22] (.clk (CLK_C), .d (n_802), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b1), .q
       (DATA32_3_C[22]));
  CDN_flop \DATA32_3_C_reg[23] (.clk (CLK_C), .d (n_803), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b0), .q
       (DATA32_3_C[23]));
  CDN_flop \DATA32_3_C_reg[24] (.clk (CLK_C), .d (n_804), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b0), .q
       (DATA32_3_C[24]));
  CDN_flop \DATA32_3_C_reg[25] (.clk (CLK_C), .d (n_805), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b1), .q
       (DATA32_3_C[25]));
  CDN_flop \DATA32_3_C_reg[26] (.clk (CLK_C), .d (n_806), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b0), .q
       (DATA32_3_C[26]));
  CDN_flop \DATA32_3_C_reg[27] (.clk (CLK_C), .d (n_807), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b1), .q
       (DATA32_3_C[27]));
  CDN_flop \DATA32_3_C_reg[28] (.clk (CLK_C), .d (n_808), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b1), .q
       (DATA32_3_C[28]));
  CDN_flop \DATA32_3_C_reg[29] (.clk (CLK_C), .d (n_809), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b0), .q
       (DATA32_3_C[29]));
  CDN_flop \DATA32_3_C_reg[30] (.clk (CLK_C), .d (n_810), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b1), .q
       (DATA32_3_C[30]));
  CDN_flop \DATA32_3_C_reg[31] (.clk (CLK_C), .d (n_811), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (n_778), .srd (1'b0), .q
       (DATA32_3_C[31]));
  not g33 (n_778, RST_C);
  not g34 (n_779, TEST_ENABLE_C);
  not g35 (n_876, CALIBRATION_BUSY_C);
  not g36 (n_941, RST_B);
  not g37 (n_942, TEST_ENABLE_B);
  not g38 (n_1039, CALIBRATION_BUSY_B);
  not g39 (n_1104, RST_A);
  not g40 (n_1105, TEST_ENABLE_A);
  not g41 (n_1202, CALIBRATION_BUSY_A);
  or g42 (tmrError, DATA32_0TmrError, DATA32_1TmrError,
       DATA32_2TmrError, DATA32_3TmrError);
endmodule

module LiTE_DTU_160MHz_v1_2(DCLK_1, DCLK_10, CLK_A, CLK_B, CLK_C,
     RST_A, RST_B, RST_C, CALIBRATION_BUSY_1, CALIBRATION_BUSY_10,
     TEST_ENABLE, GAIN_SEL_MODE, DATA12_g01, DATA12_g10,
     SATURATION_value, BSL_VAL_g01, BSL_VAL_g10, losing_data,
     totalError, DATA32_ATU_0, DATA32_ATU_1, DATA32_ATU_2,
     DATA32_ATU_3, DATA32_0, DATA32_1, DATA32_2, DATA32_3,
     decode_signal, handshake);
  input DCLK_1, DCLK_10, CLK_A, CLK_B, CLK_C, RST_A, RST_B, RST_C,
       CALIBRATION_BUSY_1, CALIBRATION_BUSY_10, TEST_ENABLE, handshake;
  input [1:0] GAIN_SEL_MODE;
  input [11:0] DATA12_g01, DATA12_g10, SATURATION_value;
  input [7:0] BSL_VAL_g01, BSL_VAL_g10;
  input [31:0] DATA32_ATU_0, DATA32_ATU_1, DATA32_ATU_2, DATA32_ATU_3;
  output losing_data, totalError, decode_signal;
  output [31:0] DATA32_0, DATA32_1, DATA32_2, DATA32_3;
  wire DCLK_1, DCLK_10, CLK_A, CLK_B, CLK_C, RST_A, RST_B, RST_C,
       CALIBRATION_BUSY_1, CALIBRATION_BUSY_10, TEST_ENABLE, handshake;
  wire [1:0] GAIN_SEL_MODE;
  wire [11:0] DATA12_g01, DATA12_g10, SATURATION_value;
  wire [7:0] BSL_VAL_g01, BSL_VAL_g10;
  wire [31:0] DATA32_ATU_0, DATA32_ATU_1, DATA32_ATU_2, DATA32_ATU_3;
  wire losing_data, totalError, decode_signal;
  wire [31:0] DATA32_0, DATA32_1, DATA32_2, DATA32_3;
  wire [11:0] DATA_gain_01;
  wire [11:0] DATA_gain_10;
  wire [12:0] DATA_to_enc;
  wire [31:0] DATA_32;
  wire [31:0] DATA_from_CU;
  wire [31:0] DATA32_DTU;
  wire CALIBRATION_BUSY, CALIBRATION_BUSY_A, CALIBRATION_BUSY_B,
       CALIBRATION_BUSY_C, Load, RD_to_SERIALIZER, TEST_ENABLE_A,
       TEST_ENABLE_B;
  wire TEST_ENABLE_C, baseline_flag, full, n_16, n_17, n_18, n_348,
       n_349;
  wire n_351, n_352, n_353, n_355, n_356, n_357, n_359, n_360;
  wire n_361, reset_A, reset_B, reset_C, tmrError_BS, tmrError_CU,
       tmrError_enc, tmrError_iFIFO;
  wire tmrError_mux, tmrError_oFIFO, write_signal;
  LDTU_BSTMR_Nbits_1212_Nbits_88 B_subtraction(.DCLK_1 (DCLK_1),
       .DCLK_10 (DCLK_10), .CLK_A (CLK_A), .CLK_B (CLK_B), .CLK_C
       (CLK_C), .reset_A (reset_A), .reset_B (reset_B), .reset_C
       (reset_C), .DATA12_g01 (DATA12_g01), .DATA12_g10 (DATA12_g10),
       .BSL_VAL_g01 (BSL_VAL_g01), .BSL_VAL_g10 (BSL_VAL_g10),
       .DATA_gain_01 (DATA_gain_01), .DATA_gain_10 (DATA_gain_10),
       .tmrError (tmrError_BS));
  LDTU_iFIFOTMR_Nbits_1212_FifoDepth8_NBitsCnt3 Selection_TMR(.CLK_A
       (CLK_A), .CLK_B (CLK_B), .CLK_C (CLK_C), .reset_A (reset_A),
       .reset_B (reset_B), .reset_C (reset_C), .GAIN_SEL_MODE
       (GAIN_SEL_MODE), .DATA_gain_01 (DATA_gain_01), .DATA_gain_10
       (DATA_gain_10), .SATURATION_value (SATURATION_value),
       .DATA_to_enc (DATA_to_enc), .baseline_flag (baseline_flag),
       .tmrError (tmrError_iFIFO));
  LDTU_EncoderTMR_Nbits_1212_Nbits_3232 Encoder(.CLK_A (CLK_A), .CLK_B
       (CLK_B), .CLK_C (CLK_C), .reset_A (reset_A), .reset_B (reset_B),
       .reset_C (reset_C), .baseline_flag (baseline_flag), .DATA_to_enc
       (DATA_to_enc), .DATA_32 (DATA_32), .Load (Load), .tmrError
       (tmrError_enc));
  LDTU_CUTMR_Nbits_3232 Control_Unit(.CLK_A (CLK_A), .CLK_B (CLK_B),
       .CLK_C (CLK_C), .reset_A (reset_A), .reset_B (reset_B), .reset_C
       (reset_C), .Load_data (Load), .DATA_32 (DATA_32), .full (full),
       .DATA_from_CU (DATA_from_CU), .losing_data (losing_data),
       .write_signal (write_signal), .read_signal (RD_to_SERIALIZER),
       .tmrError (tmrError_CU), .handshake (handshake));
  LDTU_oFIFO_top_Nbits_3232_FifoDepth_buff16_bits_ptr4
       StorageFIFO(.CLK_A (CLK_A), .CLK_B (CLK_B), .CLK_C (CLK_C),
       .reset_A (reset_A), .reset_B (reset_B), .reset_C (reset_C),
       .write_signal (write_signal), .read_signal (RD_to_SERIALIZER),
       .data_in_32 (DATA_from_CU), .DATA32_DTU (DATA32_DTU),
       .full_signal (full), .decode_signal (decode_signal), .tmrError
       (tmrError_oFIFO));
  LDTU_DATA32_ATU_DTUTMR_Nbits_3232 DATA32_mux(.CLK_A (CLK_A), .CLK_B
       (CLK_B), .CLK_C (CLK_C), .RST_A (RST_A), .RST_B (RST_B), .RST_C
       (RST_C), .CALIBRATION_BUSY_A (CALIBRATION_BUSY_A),
       .CALIBRATION_BUSY_B (CALIBRATION_BUSY_B), .CALIBRATION_BUSY_C
       (CALIBRATION_BUSY_C), .TEST_ENABLE_A (TEST_ENABLE_A),
       .TEST_ENABLE_B (TEST_ENABLE_B), .TEST_ENABLE_C (TEST_ENABLE_C),
       .DATA32_ATU_0 (DATA32_ATU_0), .DATA32_ATU_1 (DATA32_ATU_1),
       .DATA32_ATU_2 (DATA32_ATU_2), .DATA32_ATU_3 (DATA32_ATU_3),
       .DATA32_DTU (DATA32_DTU), .decode_signal (decode_signal),
       .DATA32_0 (DATA32_0), .DATA32_1 (DATA32_1), .DATA32_2
       (DATA32_2), .DATA32_3 (DATA32_3), .tmrError (tmrError_mux));
  fanout CALIBRATION_BUSYFanout(.in (CALIBRATION_BUSY), .outA
       (CALIBRATION_BUSY_A), .outB (CALIBRATION_BUSY_B), .outC
       (CALIBRATION_BUSY_C));
  fanout TEST_ENABLEFanout(.in (TEST_ENABLE), .outA (TEST_ENABLE_A),
       .outB (TEST_ENABLE_B), .outC (TEST_ENABLE_C));
  bmux mux_86_24(.ctl (n_16), .in_0 (1'b0), .in_1 (1'b1), .z (reset_A));
  bmux mux_87_24(.ctl (n_17), .in_0 (1'b0), .in_1 (1'b1), .z (reset_B));
  bmux mux_88_24(.ctl (n_18), .in_0 (1'b0), .in_1 (1'b1), .z (reset_C));
  or g1 (CALIBRATION_BUSY, CALIBRATION_BUSY_1, CALIBRATION_BUSY_10);
  nand g13 (n_351, n_348, n_349, RST_A);
  not g14 (n_16, n_351);
  nand g18 (n_355, n_352, n_353, RST_B);
  not g19 (n_17, n_355);
  nand g23 (n_359, n_356, n_357, RST_C);
  not g24 (n_18, n_359);
  not g25 (n_348, TEST_ENABLE_A);
  not g26 (n_349, CALIBRATION_BUSY_A);
  not g27 (n_352, TEST_ENABLE_B);
  not g28 (n_353, CALIBRATION_BUSY_B);
  not g29 (n_356, TEST_ENABLE_C);
  not g30 (n_357, CALIBRATION_BUSY_C);
  or g31 (n_360, tmrError_BS, tmrError_iFIFO);
  or g32 (n_361, tmrError_enc, tmrError_CU);
  or g33 (totalError, tmrError_oFIFO, tmrError_mux, n_360, n_361);
endmodule

`ifdef RC_CDN_GENERIC_GATE
`else
module CDN_flop(clk, d, sena, aclr, apre, srl, srd, q);
  input clk, d, sena, aclr, apre, srl, srd;
  output q;
  wire clk, d, sena, aclr, apre, srl, srd;
  wire q;
  reg  qi;
  assign #1 q = qi;
  always 
    @(posedge clk or posedge apre or posedge aclr) 
      if (aclr) 
        qi <= 0;
      else if (apre) 
          qi <= 1;
        else if (srl) 
            qi <= srd;
          else begin
            if (sena) 
              qi <= d;
          end
  initial 
    qi <= 1'b0;
endmodule
`endif
`ifdef RC_CDN_GENERIC_GATE
`else
`ifdef ONE_HOT_MUX // captures one-hot property of select inputs
module CDN_mux16(sel0, data0, sel1, data1, sel2, data2, sel3, data3,
     sel4, data4, sel5, data5, sel6, data6, sel7, data7, sel8, data8,
     sel9, data9, sel10, data10, sel11, data11, sel12, data12, sel13,
     data13, sel14, data14, sel15, data15, z);
  input sel0, data0, sel1, data1, sel2, data2, sel3, data3, sel4,
       data4, sel5, data5, sel6, data6, sel7, data7, sel8, data8, sel9,
       data9, sel10, data10, sel11, data11, sel12, data12, sel13,
       data13, sel14, data14, sel15, data15;
  output z;
  wire sel0, data0, sel1, data1, sel2, data2, sel3, data3, sel4, data4,
       sel5, data5, sel6, data6, sel7, data7, sel8, data8, sel9, data9,
       sel10, data10, sel11, data11, sel12, data12, sel13, data13,
       sel14, data14, sel15, data15;
  reg  z;
  always 
    @(sel0 or sel1 or sel2 or sel3 or sel4 or sel5 or sel6 or sel7 or
         sel8 or sel9 or sel10 or sel11 or sel12 or sel13 or sel14 or
         sel15 or data0 or data1 or data2 or data3 or data4 or data5 or
         data6 or data7 or data8 or data9 or data10 or data11 or data12
         or data13 or data14 or data15) 
      case ({sel0, sel1, sel2, sel3, sel4, sel5, sel6, sel7, sel8,
           sel9, sel10, sel11, sel12, sel13, sel14, sel15})
       16'b1000000000000000: z = data0;
       16'b0100000000000000: z = data1;
       16'b0010000000000000: z = data2;
       16'b0001000000000000: z = data3;
       16'b0000100000000000: z = data4;
       16'b0000010000000000: z = data5;
       16'b0000001000000000: z = data6;
       16'b0000000100000000: z = data7;
       16'b0000000010000000: z = data8;
       16'b0000000001000000: z = data9;
       16'b0000000000100000: z = data10;
       16'b0000000000010000: z = data11;
       16'b0000000000001000: z = data12;
       16'b0000000000000100: z = data13;
       16'b0000000000000010: z = data14;
       16'b0000000000000001: z = data15;
       default: z = 1'bX;
      endcase
endmodule
`else
module CDN_mux16(sel0, data0, sel1, data1, sel2, data2, sel3, data3,
     sel4, data4, sel5, data5, sel6, data6, sel7, data7, sel8, data8,
     sel9, data9, sel10, data10, sel11, data11, sel12, data12, sel13,
     data13, sel14, data14, sel15, data15, z);
  input sel0, data0, sel1, data1, sel2, data2, sel3, data3, sel4,
       data4, sel5, data5, sel6, data6, sel7, data7, sel8, data8, sel9,
       data9, sel10, data10, sel11, data11, sel12, data12, sel13,
       data13, sel14, data14, sel15, data15;
  output z;
  wire sel0, data0, sel1, data1, sel2, data2, sel3, data3, sel4, data4,
       sel5, data5, sel6, data6, sel7, data7, sel8, data8, sel9, data9,
       sel10, data10, sel11, data11, sel12, data12, sel13, data13,
       sel14, data14, sel15, data15;
  wire z;
  wire w_0, w_1, w_2, w_3, w_4, w_5, w_6, w_7;
  wire w_8, w_9, w_10, w_11, w_12, w_13, w_14, w_15;
  and a_0 (w_0, sel0, data0);
  and a_1 (w_1, sel1, data1);
  and a_2 (w_2, sel2, data2);
  and a_3 (w_3, sel3, data3);
  and a_4 (w_4, sel4, data4);
  and a_5 (w_5, sel5, data5);
  and a_6 (w_6, sel6, data6);
  and a_7 (w_7, sel7, data7);
  and a_8 (w_8, sel8, data8);
  and a_9 (w_9, sel9, data9);
  and a_10 (w_10, sel10, data10);
  and a_11 (w_11, sel11, data11);
  and a_12 (w_12, sel12, data12);
  and a_13 (w_13, sel13, data13);
  and a_14 (w_14, sel14, data14);
  and a_15 (w_15, sel15, data15);
  or org (z, w_0, w_1, w_2, w_3, w_4, w_5, w_6, w_7, w_8, w_9, w_10,
       w_11, w_12, w_13, w_14, w_15);
endmodule
`endif // ONE_HOT_MUX
`endif
`ifdef RC_CDN_GENERIC_GATE
`else
`ifdef ONE_HOT_MUX // captures one-hot property of select inputs
module CDN_mux11(sel0, data0, sel1, data1, sel2, data2, sel3, data3,
     sel4, data4, sel5, data5, sel6, data6, sel7, data7, sel8, data8,
     sel9, data9, sel10, data10, z);
  input sel0, data0, sel1, data1, sel2, data2, sel3, data3, sel4,
       data4, sel5, data5, sel6, data6, sel7, data7, sel8, data8, sel9,
       data9, sel10, data10;
  output z;
  wire sel0, data0, sel1, data1, sel2, data2, sel3, data3, sel4, data4,
       sel5, data5, sel6, data6, sel7, data7, sel8, data8, sel9, data9,
       sel10, data10;
  reg  z;
  always 
    @(sel0 or sel1 or sel2 or sel3 or sel4 or sel5 or sel6 or sel7 or
         sel8 or sel9 or sel10 or data0 or data1 or data2 or data3 or
         data4 or data5 or data6 or data7 or data8 or data9 or data10) 
      case ({sel0, sel1, sel2, sel3, sel4, sel5, sel6, sel7, sel8,
           sel9, sel10})
       11'b10000000000: z = data0;
       11'b01000000000: z = data1;
       11'b00100000000: z = data2;
       11'b00010000000: z = data3;
       11'b00001000000: z = data4;
       11'b00000100000: z = data5;
       11'b00000010000: z = data6;
       11'b00000001000: z = data7;
       11'b00000000100: z = data8;
       11'b00000000010: z = data9;
       11'b00000000001: z = data10;
       default: z = 1'bX;
      endcase
endmodule
`else
module CDN_mux11(sel0, data0, sel1, data1, sel2, data2, sel3, data3,
     sel4, data4, sel5, data5, sel6, data6, sel7, data7, sel8, data8,
     sel9, data9, sel10, data10, z);
  input sel0, data0, sel1, data1, sel2, data2, sel3, data3, sel4,
       data4, sel5, data5, sel6, data6, sel7, data7, sel8, data8, sel9,
       data9, sel10, data10;
  output z;
  wire sel0, data0, sel1, data1, sel2, data2, sel3, data3, sel4, data4,
       sel5, data5, sel6, data6, sel7, data7, sel8, data8, sel9, data9,
       sel10, data10;
  wire z;
  wire w_0, w_1, w_2, w_3, w_4, w_5, w_6, w_7;
  wire w_8, w_9, w_10;
  and a_0 (w_0, sel0, data0);
  and a_1 (w_1, sel1, data1);
  and a_2 (w_2, sel2, data2);
  and a_3 (w_3, sel3, data3);
  and a_4 (w_4, sel4, data4);
  and a_5 (w_5, sel5, data5);
  and a_6 (w_6, sel6, data6);
  and a_7 (w_7, sel7, data7);
  and a_8 (w_8, sel8, data8);
  and a_9 (w_9, sel9, data9);
  and a_10 (w_10, sel10, data10);
  or org (z, w_0, w_1, w_2, w_3, w_4, w_5, w_6, w_7, w_8, w_9, w_10);
endmodule
`endif // ONE_HOT_MUX
`endif
`ifdef RC_CDN_GENERIC_GATE
`else
`ifdef ONE_HOT_MUX
module CDN_bmux2(sel0, data0, data1, z);
  input sel0, data0, data1;
  output z;
  wire sel0, data0, data1;
  reg  z;
  always 
    @(sel0 or data0 or data1) 
      case ({sel0})
       1'b0: z = data0;
       1'b1: z = data1;
      endcase
endmodule
`else
module CDN_bmux2(sel0, data0, data1, z);
  input sel0, data0, data1;
  output z;
  wire sel0, data0, data1;
  wire z;
  wire inv_sel0, w_0, w_1;
  not i_0 (inv_sel0, sel0);
  and a_0 (w_0, inv_sel0, data0);
  and a_1 (w_1, sel0, data1);
  or org (z, w_0, w_1);
endmodule
`endif // ONE_HOT_MUX
`endif
`ifdef RC_CDN_GENERIC_GATE
`else
`ifdef ONE_HOT_MUX
module CDN_bmux8(sel0, data0, data1, sel1, data2, data3, sel2, data4,
     data5, data6, data7, z);
  input sel0, data0, data1, sel1, data2, data3, sel2, data4, data5,
       data6, data7;
  output z;
  wire sel0, data0, data1, sel1, data2, data3, sel2, data4, data5,
       data6, data7;
  reg  z;
  always 
    @(sel0 or sel1 or sel2 or data0 or data1 or data2 or data3 or data4
         or data5 or data6 or data7) 
      case ({sel0, sel1, sel2})
       3'b000: z = data0;
       3'b100: z = data1;
       3'b010: z = data2;
       3'b110: z = data3;
       3'b001: z = data4;
       3'b101: z = data5;
       3'b011: z = data6;
       3'b111: z = data7;
      endcase
endmodule
`else
module CDN_bmux8(sel0, data0, data1, sel1, data2, data3, sel2, data4,
     data5, data6, data7, z);
  input sel0, data0, data1, sel1, data2, data3, sel2, data4, data5,
       data6, data7;
  output z;
  wire sel0, data0, data1, sel1, data2, data3, sel2, data4, data5,
       data6, data7;
  wire z;
  wire inv_sel0, inv_sel1, inv_sel2, w_0, w_1, w_2, w_3, w_4;
  wire w_5, w_6, w_7;
  not i_0 (inv_sel0, sel0);
  not i_1 (inv_sel1, sel1);
  not i_2 (inv_sel2, sel2);
  and a_0 (w_0, inv_sel2, inv_sel1, inv_sel0, data0);
  and a_1 (w_1, inv_sel2, inv_sel1, sel0, data1);
  and a_2 (w_2, inv_sel2, sel1, inv_sel0, data2);
  and a_3 (w_3, inv_sel2, sel1, sel0, data3);
  and a_4 (w_4, sel2, inv_sel1, inv_sel0, data4);
  and a_5 (w_5, sel2, inv_sel1, sel0, data5);
  and a_6 (w_6, sel2, sel1, inv_sel0, data6);
  and a_7 (w_7, sel2, sel1, sel0, data7);
  or org (z, w_0, w_1, w_2, w_3, w_4, w_5, w_6, w_7);
endmodule
`endif // ONE_HOT_MUX
`endif
`ifdef RC_CDN_GENERIC_GATE
`else
`ifdef ONE_HOT_MUX
module CDN_bmux16(sel0, data0, data1, sel1, data2, data3, sel2, data4,
     data5, data6, data7, sel3, data8, data9, data10, data11, data12,
     data13, data14, data15, z);
  input sel0, data0, data1, sel1, data2, data3, sel2, data4, data5,
       data6, data7, sel3, data8, data9, data10, data11, data12,
       data13, data14, data15;
  output z;
  wire sel0, data0, data1, sel1, data2, data3, sel2, data4, data5,
       data6, data7, sel3, data8, data9, data10, data11, data12,
       data13, data14, data15;
  reg  z;
  always 
    @(sel0 or sel1 or sel2 or sel3 or data0 or data1 or data2 or data3
         or data4 or data5 or data6 or data7 or data8 or data9 or
         data10 or data11 or data12 or data13 or data14 or data15) 
      case ({sel0, sel1, sel2, sel3})
       4'b0000: z = data0;
       4'b1000: z = data1;
       4'b0100: z = data2;
       4'b1100: z = data3;
       4'b0010: z = data4;
       4'b1010: z = data5;
       4'b0110: z = data6;
       4'b1110: z = data7;
       4'b0001: z = data8;
       4'b1001: z = data9;
       4'b0101: z = data10;
       4'b1101: z = data11;
       4'b0011: z = data12;
       4'b1011: z = data13;
       4'b0111: z = data14;
       4'b1111: z = data15;
      endcase
endmodule
`else
module CDN_bmux16(sel0, data0, data1, sel1, data2, data3, sel2, data4,
     data5, data6, data7, sel3, data8, data9, data10, data11, data12,
     data13, data14, data15, z);
  input sel0, data0, data1, sel1, data2, data3, sel2, data4, data5,
       data6, data7, sel3, data8, data9, data10, data11, data12,
       data13, data14, data15;
  output z;
  wire sel0, data0, data1, sel1, data2, data3, sel2, data4, data5,
       data6, data7, sel3, data8, data9, data10, data11, data12,
       data13, data14, data15;
  wire z;
  wire inv_sel0, inv_sel1, inv_sel2, inv_sel3, w_0, w_1, w_2, w_3;
  wire w_4, w_5, w_6, w_7, w_8, w_9, w_10, w_11;
  wire w_12, w_13, w_14, w_15;
  not i_0 (inv_sel0, sel0);
  not i_1 (inv_sel1, sel1);
  not i_2 (inv_sel2, sel2);
  not i_3 (inv_sel3, sel3);
  and a_0 (w_0, inv_sel3, inv_sel2, inv_sel1, inv_sel0, data0);
  and a_1 (w_1, inv_sel3, inv_sel2, inv_sel1, sel0, data1);
  and a_2 (w_2, inv_sel3, inv_sel2, sel1, inv_sel0, data2);
  and a_3 (w_3, inv_sel3, inv_sel2, sel1, sel0, data3);
  and a_4 (w_4, inv_sel3, sel2, inv_sel1, inv_sel0, data4);
  and a_5 (w_5, inv_sel3, sel2, inv_sel1, sel0, data5);
  and a_6 (w_6, inv_sel3, sel2, sel1, inv_sel0, data6);
  and a_7 (w_7, inv_sel3, sel2, sel1, sel0, data7);
  and a_8 (w_8, sel3, inv_sel2, inv_sel1, inv_sel0, data8);
  and a_9 (w_9, sel3, inv_sel2, inv_sel1, sel0, data9);
  and a_10 (w_10, sel3, inv_sel2, sel1, inv_sel0, data10);
  and a_11 (w_11, sel3, inv_sel2, sel1, sel0, data11);
  and a_12 (w_12, sel3, sel2, inv_sel1, inv_sel0, data12);
  and a_13 (w_13, sel3, sel2, inv_sel1, sel0, data13);
  and a_14 (w_14, sel3, sel2, sel1, inv_sel0, data14);
  and a_15 (w_15, sel3, sel2, sel1, sel0, data15);
  or org (z, w_0, w_1, w_2, w_3, w_4, w_5, w_6, w_7, w_8, w_9, w_10,
       w_11, w_12, w_13, w_14, w_15);
endmodule
`endif // ONE_HOT_MUX
`endif
`ifdef RC_CDN_GENERIC_GATE
`else
`ifdef ONE_HOT_MUX
module CDN_bmux4(sel0, data0, data1, sel1, data2, data3, z);
  input sel0, data0, data1, sel1, data2, data3;
  output z;
  wire sel0, data0, data1, sel1, data2, data3;
  reg  z;
  always 
    @(sel0 or sel1 or data0 or data1 or data2 or data3) 
      case ({sel0, sel1})
       2'b00: z = data0;
       2'b10: z = data1;
       2'b01: z = data2;
       2'b11: z = data3;
      endcase
endmodule
`else
module CDN_bmux4(sel0, data0, data1, sel1, data2, data3, z);
  input sel0, data0, data1, sel1, data2, data3;
  output z;
  wire sel0, data0, data1, sel1, data2, data3;
  wire z;
  wire inv_sel0, inv_sel1, w_0, w_1, w_2, w_3;
  not i_0 (inv_sel0, sel0);
  not i_1 (inv_sel1, sel1);
  and a_0 (w_0, inv_sel1, inv_sel0, data0);
  and a_1 (w_1, inv_sel1, sel0, data1);
  and a_2 (w_2, sel1, inv_sel0, data2);
  and a_3 (w_3, sel1, sel0, data3);
  or org (z, w_0, w_1, w_2, w_3);
endmodule
`endif // ONE_HOT_MUX
`endif
`ifdef RC_CDN_GENERIC_GATE
`else
`ifdef ONE_HOT_MUX
module CDN_bmux38(sel0, data0, data1, sel1, data2, data3, sel2, data4,
     data5, data6, data7, sel3, data8, data9, data10, data11, data12,
     data13, data14, data15, sel4, data16, data17, data18, data19,
     data20, data21, data22, data23, data24, data25, data26, data27,
     data28, data29, data30, data31, sel5, data32, data33, data34,
     data35, data36, data37, z);
  input sel0, data0, data1, sel1, data2, data3, sel2, data4, data5,
       data6, data7, sel3, data8, data9, data10, data11, data12,
       data13, data14, data15, sel4, data16, data17, data18, data19,
       data20, data21, data22, data23, data24, data25, data26, data27,
       data28, data29, data30, data31, sel5, data32, data33, data34,
       data35, data36, data37;
  output z;
  wire sel0, data0, data1, sel1, data2, data3, sel2, data4, data5,
       data6, data7, sel3, data8, data9, data10, data11, data12,
       data13, data14, data15, sel4, data16, data17, data18, data19,
       data20, data21, data22, data23, data24, data25, data26, data27,
       data28, data29, data30, data31, sel5, data32, data33, data34,
       data35, data36, data37;
  reg  z;
  always 
    @(sel0 or sel1 or sel2 or sel3 or sel4 or sel5 or data0 or data1 or
         data2 or data3 or data4 or data5 or data6 or data7 or data8 or
         data9 or data10 or data11 or data12 or data13 or data14 or
         data15 or data16 or data17 or data18 or data19 or data20 or
         data21 or data22 or data23 or data24 or data25 or data26 or
         data27 or data28 or data29 or data30 or data31 or data32 or
         data33 or data34 or data35 or data36 or data37) 
      case ({sel0, sel1, sel2, sel3, sel4, sel5})
       6'b000000: z = data0;
       6'b100000: z = data1;
       6'b010000: z = data2;
       6'b110000: z = data3;
       6'b001000: z = data4;
       6'b101000: z = data5;
       6'b011000: z = data6;
       6'b111000: z = data7;
       6'b000100: z = data8;
       6'b100100: z = data9;
       6'b010100: z = data10;
       6'b110100: z = data11;
       6'b001100: z = data12;
       6'b101100: z = data13;
       6'b011100: z = data14;
       6'b111100: z = data15;
       6'b000010: z = data16;
       6'b100010: z = data17;
       6'b010010: z = data18;
       6'b110010: z = data19;
       6'b001010: z = data20;
       6'b101010: z = data21;
       6'b011010: z = data22;
       6'b111010: z = data23;
       6'b000110: z = data24;
       6'b100110: z = data25;
       6'b010110: z = data26;
       6'b110110: z = data27;
       6'b001110: z = data28;
       6'b101110: z = data29;
       6'b011110: z = data30;
       6'b111110: z = data31;
       6'b000001: z = data32;
       6'b100001: z = data33;
       6'b010001: z = data34;
       6'b110001: z = data35;
       6'b001001: z = data36;
       6'b101001: z = data37;
       default: z = 1'bX;
      endcase
endmodule
`else
module CDN_bmux38(sel0, data0, data1, sel1, data2, data3, sel2, data4,
     data5, data6, data7, sel3, data8, data9, data10, data11, data12,
     data13, data14, data15, sel4, data16, data17, data18, data19,
     data20, data21, data22, data23, data24, data25, data26, data27,
     data28, data29, data30, data31, sel5, data32, data33, data34,
     data35, data36, data37, z);
  input sel0, data0, data1, sel1, data2, data3, sel2, data4, data5,
       data6, data7, sel3, data8, data9, data10, data11, data12,
       data13, data14, data15, sel4, data16, data17, data18, data19,
       data20, data21, data22, data23, data24, data25, data26, data27,
       data28, data29, data30, data31, sel5, data32, data33, data34,
       data35, data36, data37;
  output z;
  wire sel0, data0, data1, sel1, data2, data3, sel2, data4, data5,
       data6, data7, sel3, data8, data9, data10, data11, data12,
       data13, data14, data15, sel4, data16, data17, data18, data19,
       data20, data21, data22, data23, data24, data25, data26, data27,
       data28, data29, data30, data31, sel5, data32, data33, data34,
       data35, data36, data37;
  wire z;
  wire inv_sel0, inv_sel1, inv_sel2, inv_sel3, inv_sel4, inv_sel5, w_0,
       w_1;
  wire w_2, w_3, w_4, w_5, w_6, w_7, w_8, w_9;
  wire w_10, w_11, w_12, w_13, w_14, w_15, w_16, w_17;
  wire w_18, w_19, w_20, w_21, w_22, w_23, w_24, w_25;
  wire w_26, w_27, w_28, w_29, w_30, w_31, w_32, w_33;
  wire w_34, w_35, w_36, w_37;
  not i_0 (inv_sel0, sel0);
  not i_1 (inv_sel1, sel1);
  not i_2 (inv_sel2, sel2);
  not i_3 (inv_sel3, sel3);
  not i_4 (inv_sel4, sel4);
  not i_5 (inv_sel5, sel5);
  and a_0 (w_0, inv_sel5, inv_sel4, inv_sel3, inv_sel2, inv_sel1,
       inv_sel0, data0);
  and a_1 (w_1, inv_sel5, inv_sel4, inv_sel3, inv_sel2, inv_sel1, sel0,
       data1);
  and a_2 (w_2, inv_sel5, inv_sel4, inv_sel3, inv_sel2, sel1, inv_sel0,
       data2);
  and a_3 (w_3, inv_sel5, inv_sel4, inv_sel3, inv_sel2, sel1, sel0,
       data3);
  and a_4 (w_4, inv_sel5, inv_sel4, inv_sel3, sel2, inv_sel1, inv_sel0,
       data4);
  and a_5 (w_5, inv_sel5, inv_sel4, inv_sel3, sel2, inv_sel1, sel0,
       data5);
  and a_6 (w_6, inv_sel5, inv_sel4, inv_sel3, sel2, sel1, inv_sel0,
       data6);
  and a_7 (w_7, inv_sel5, inv_sel4, inv_sel3, sel2, sel1, sel0, data7);
  and a_8 (w_8, inv_sel5, inv_sel4, sel3, inv_sel2, inv_sel1, inv_sel0,
       data8);
  and a_9 (w_9, inv_sel5, inv_sel4, sel3, inv_sel2, inv_sel1, sel0,
       data9);
  and a_10 (w_10, inv_sel5, inv_sel4, sel3, inv_sel2, sel1, inv_sel0,
       data10);
  and a_11 (w_11, inv_sel5, inv_sel4, sel3, inv_sel2, sel1, sel0,
       data11);
  and a_12 (w_12, inv_sel5, inv_sel4, sel3, sel2, inv_sel1, inv_sel0,
       data12);
  and a_13 (w_13, inv_sel5, inv_sel4, sel3, sel2, inv_sel1, sel0,
       data13);
  and a_14 (w_14, inv_sel5, inv_sel4, sel3, sel2, sel1, inv_sel0,
       data14);
  and a_15 (w_15, inv_sel5, inv_sel4, sel3, sel2, sel1, sel0, data15);
  and a_16 (w_16, inv_sel5, sel4, inv_sel3, inv_sel2, inv_sel1,
       inv_sel0, data16);
  and a_17 (w_17, inv_sel5, sel4, inv_sel3, inv_sel2, inv_sel1, sel0,
       data17);
  and a_18 (w_18, inv_sel5, sel4, inv_sel3, inv_sel2, sel1, inv_sel0,
       data18);
  and a_19 (w_19, inv_sel5, sel4, inv_sel3, inv_sel2, sel1, sel0,
       data19);
  and a_20 (w_20, inv_sel5, sel4, inv_sel3, sel2, inv_sel1, inv_sel0,
       data20);
  and a_21 (w_21, inv_sel5, sel4, inv_sel3, sel2, inv_sel1, sel0,
       data21);
  and a_22 (w_22, inv_sel5, sel4, inv_sel3, sel2, sel1, inv_sel0,
       data22);
  and a_23 (w_23, inv_sel5, sel4, inv_sel3, sel2, sel1, sel0, data23);
  and a_24 (w_24, inv_sel5, sel4, sel3, inv_sel2, inv_sel1, inv_sel0,
       data24);
  and a_25 (w_25, inv_sel5, sel4, sel3, inv_sel2, inv_sel1, sel0,
       data25);
  and a_26 (w_26, inv_sel5, sel4, sel3, inv_sel2, sel1, inv_sel0,
       data26);
  and a_27 (w_27, inv_sel5, sel4, sel3, inv_sel2, sel1, sel0, data27);
  and a_28 (w_28, inv_sel5, sel4, sel3, sel2, inv_sel1, inv_sel0,
       data28);
  and a_29 (w_29, inv_sel5, sel4, sel3, sel2, inv_sel1, sel0, data29);
  and a_30 (w_30, inv_sel5, sel4, sel3, sel2, sel1, inv_sel0, data30);
  and a_31 (w_31, inv_sel5, sel4, sel3, sel2, sel1, sel0, data31);
  and a_32 (w_32, sel5, inv_sel4, inv_sel3, inv_sel2, inv_sel1,
       inv_sel0, data32);
  and a_33 (w_33, sel5, inv_sel4, inv_sel3, inv_sel2, inv_sel1, sel0,
       data33);
  and a_34 (w_34, sel5, inv_sel4, inv_sel3, inv_sel2, sel1, inv_sel0,
       data34);
  and a_35 (w_35, sel5, inv_sel4, inv_sel3, inv_sel2, sel1, sel0,
       data35);
  and a_36 (w_36, sel5, inv_sel4, inv_sel3, sel2, inv_sel1, inv_sel0,
       data36);
  and a_37 (w_37, sel5, inv_sel4, inv_sel3, sel2, inv_sel1, sel0,
       data37);
  or org (z, w_0, w_1, w_2, w_3, w_4, w_5, w_6, w_7, w_8, w_9, w_10,
       w_11, w_12, w_13, w_14, w_15, w_16, w_17, w_18, w_19, w_20,
       w_21, w_22, w_23, w_24, w_25, w_26, w_27, w_28, w_29, w_30,
       w_31, w_32, w_33, w_34, w_35, w_36, w_37);
endmodule
`endif // ONE_HOT_MUX
`endif
