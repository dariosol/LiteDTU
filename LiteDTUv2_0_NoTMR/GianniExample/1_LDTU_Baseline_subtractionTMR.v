/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./1_LDTU_Baseline_subtractionTMR.v                                                     *
 *                                                                                                  *
 * user    : soldi                                                                                  *
 * host    : elt159xl.to.infn.it                                                                    *
 * date    : 08/02/2021 13:45:12                                                                    *
 *                                                                                                  *
 * workdir : /export/elt159xl/disk0/users/soldi/LiTE-DTU_v2.0_2021_Simulations/pre-synth/LiteDTUv2_0_NoTMR/GianniExample *
 * cmd     : /export/elt159xl/disk0/users/soldi/LiTE-DTU_v2.0_2021_Simulations/tmrg/bin/tmrg        *
 *           1_LDTU_Baseline_subtraction.v -c 1_LDTU_Baseline_subtraction.cfg                       *
 * tmrg rev: ececa199b20e3753893c07f87ef839ce926b269f                                               *
 *                                                                                                  *
 * src file: 1_LDTU_Baseline_subtraction.v                                                          *
 *           File is NOT under version control!                                                     *
 *           Modification time : 2021-02-08 13:44:42.783658                                         *
 *           File Size         : 2500                                                               *
 *           MD5 hash          : 18faa9c04ebaf2454ce37d11d752c8bc                                   *
 *                                                                                                  *
 ****************************************************************************************************/

`timescale    1ps/1ps
module LDTU_BSTMR(
  DCLK_1,
  DCLK_10,
  rst_bA,
  rst_bB,
  rst_bC,
  DATA12_g01,
  DATA12_g10,
  BSL_VAL_g01,
  BSL_VAL_g10,
  DATA_gain_01A,
  DATA_gain_01B,
  DATA_gain_01C,
  DATA_gain_10A,
  DATA_gain_10B,
  DATA_gain_10C,
  SEU_error
);
parameter    Nbits_12=12;
parameter    Nbits_8=8;
wire DCLK_1C;
wire DCLK_1B;
wire DCLK_1A;
wire [Nbits_12-1:0] DATA12_g10C;
wire [Nbits_12-1:0] DATA12_g10B;
wire [Nbits_12-1:0] DATA12_g10A;
wire [Nbits_12-1:0] DATA12_g01C;
wire [Nbits_12-1:0] DATA12_g01B;
wire [Nbits_12-1:0] DATA12_g01A;
wire DCLK_10C;
wire DCLK_10B;
wire DCLK_10A;
wire [Nbits_8-1:0] BSL_VAL_g10C;
wire [Nbits_8-1:0] BSL_VAL_g10B;
wire [Nbits_8-1:0] BSL_VAL_g10A;
wire [Nbits_8-1:0] BSL_VAL_g01C;
wire [Nbits_8-1:0] BSL_VAL_g01B;
wire [Nbits_8-1:0] BSL_VAL_g01A;
wire tmrErrorC;
wor dg10TmrErrorC;
wor dg01TmrErrorC;
wire [Nbits_12-1:0] dg10VotedC;
wire [Nbits_12-1:0] dg01VotedC;
wire tmrErrorB;
wor dg10TmrErrorB;
wor dg01TmrErrorB;
wire [Nbits_12-1:0] dg10VotedB;
wire [Nbits_12-1:0] dg01VotedB;
wire tmrErrorA;
wor dg10TmrErrorA;
wor dg01TmrErrorA;
wire [Nbits_12-1:0] dg01VotedA;
wire [Nbits_12-1:0] dg10VotedA;
wire tmrError;
wor tmrErrorTmrError;
wire tmrError;
input DCLK_1;
input DCLK_10;
input rst_bA;
input rst_bB;
input rst_bC;
input [Nbits_12-1:0] DATA12_g01;
input [Nbits_12-1:0] DATA12_g10;
input [Nbits_8-1:0] BSL_VAL_g01;
input [Nbits_8-1:0] BSL_VAL_g10;
output reg   [Nbits_12-1:0] DATA_gain_01A;
output reg   [Nbits_12-1:0] DATA_gain_01B;
output reg   [Nbits_12-1:0] DATA_gain_01C;
output reg   [Nbits_12-1:0] DATA_gain_10A;
output reg   [Nbits_12-1:0] DATA_gain_10B;
output reg   [Nbits_12-1:0] DATA_gain_10C;
output SEU_error;
wire [Nbits_12-1:0] b_val_g01A;
wire [Nbits_12-1:0] b_val_g01B;
wire [Nbits_12-1:0] b_val_g01C;
wire [Nbits_12-1:0] b_val_g10A;
wire [Nbits_12-1:0] b_val_g10B;
wire [Nbits_12-1:0] b_val_g10C;
wire dg01_TmrErrorA;
wire dg01_TmrErrorB;
wire dg01_TmrErrorC;
wire dg10_TmrErrorA;
wire dg10_TmrErrorB;
wire dg10_TmrErrorC;
reg  [Nbits_12-1:0] d_g01A;
reg  [Nbits_12-1:0] d_g01B;
reg  [Nbits_12-1:0] d_g01C;
reg  [Nbits_12-1:0] d_g10A;
reg  [Nbits_12-1:0] d_g10B;
reg  [Nbits_12-1:0] d_g10C;
wire [Nbits_12-1:0] DATA_g_01A;
wire [Nbits_12-1:0] DATA_g_01B;
wire [Nbits_12-1:0] DATA_g_01C;
wire [Nbits_12-1:0] DATA_g_10A;
wire [Nbits_12-1:0] DATA_g_10B;
wire [Nbits_12-1:0] DATA_g_10C;
wire [Nbits_12-1:0] dg01A;
wire [Nbits_12-1:0] dg01B;
wire [Nbits_12-1:0] dg01C;
wire [Nbits_12-1:0] dg10A;
wire [Nbits_12-1:0] dg10B;
wire [Nbits_12-1:0] dg10C;
assign SEU_error =  tmrError;
assign b_val_g01A =  {4'b0,BSL_VAL_g01A};
assign b_val_g01B =  {4'b0,BSL_VAL_g01B};
assign b_val_g01C =  {4'b0,BSL_VAL_g01C};
assign b_val_g10A =  {4'b0,BSL_VAL_g10A};
assign b_val_g10B =  {4'b0,BSL_VAL_g10B};
assign b_val_g10C =  {4'b0,BSL_VAL_g10C};

always @( posedge DCLK_1A )
  begin
    if (rst_bA==1'b0)
      d_g01A <= 12'b0;
    else
      d_g01A <= DATA12_g01A;
  end

always @( posedge DCLK_1B )
  begin
    if (rst_bB==1'b0)
      d_g01B <= 12'b0;
    else
      d_g01B <= DATA12_g01B;
  end

always @( posedge DCLK_1C )
  begin
    if (rst_bC==1'b0)
      d_g01C <= 12'b0;
    else
      d_g01C <= DATA12_g01C;
  end

always @( posedge DCLK_10A )
  begin
    if (rst_bA==1'b0)
      d_g10A <= 12'b0;
    else
      d_g10A <= DATA12_g10A;
  end

always @( posedge DCLK_10B )
  begin
    if (rst_bB==1'b0)
      d_g10B <= 12'b0;
    else
      d_g10B <= DATA12_g10B;
  end

always @( posedge DCLK_10C )
  begin
    if (rst_bC==1'b0)
      d_g10C <= 12'b0;
    else
      d_g10C <= DATA12_g10C;
  end
assign dg01A =  d_g01A-b_val_g01A;
assign dg01B =  d_g01B-b_val_g01B;
assign dg01C =  d_g01C-b_val_g01C;
assign dg10A =  d_g10A-b_val_g10A;
assign dg10B =  d_g10B-b_val_g10B;
assign dg10C =  d_g10C-b_val_g10C;

always @( posedge DCLK_1A )
  begin
    DATA_g_01A <= dg01VotedA;
  end

always @( posedge DCLK_1B )
  begin
    DATA_g_01B <= dg01VotedB;
  end

always @( posedge DCLK_1C )
  begin
    DATA_g_01C <= dg01VotedC;
  end

always @( posedge DCLK_10A )
  begin
    DATA_g_10A <= dg10VotedA;
  end

always @( posedge DCLK_10B )
  begin
    DATA_g_10B <= dg10VotedB;
  end

always @( posedge DCLK_10C )
  begin
    DATA_g_10C <= dg10VotedC;
  end

majorityVoter tmrErrorVoter (
    .inA(tmrErrorA),
    .inB(tmrErrorB),
    .inC(tmrErrorC),
    .out(tmrError),
    .tmrErr(tmrErrorTmrError)
    );
assign tmrError =  tmrErrorTmrError;

majorityVoter #(.WIDTH(((Nbits_12-1)>(0)) ? ((Nbits_12-1)-(0)+1) : ((0)-(Nbits_12-1)+1))) dg10VoterA (
    .inA(dg10A),
    .inB(dg10B),
    .inC(dg10C),
    .out(dg10VotedA),
    .tmrErr(dg10TmrErrorA)
    );

majorityVoter #(.WIDTH(((Nbits_12-1)>(0)) ? ((Nbits_12-1)-(0)+1) : ((0)-(Nbits_12-1)+1))) dg01VoterA (
    .inA(dg01A),
    .inB(dg01B),
    .inC(dg01C),
    .out(dg01VotedA),
    .tmrErr(dg01TmrErrorA)
    );
assign tmrErrorA =  dg01TmrErrorA|dg10TmrErrorA;

majorityVoter #(.WIDTH(((Nbits_12-1)>(0)) ? ((Nbits_12-1)-(0)+1) : ((0)-(Nbits_12-1)+1))) dg01VoterB (
    .inA(dg01A),
    .inB(dg01B),
    .inC(dg01C),
    .out(dg01VotedB),
    .tmrErr(dg01TmrErrorB)
    );

majorityVoter #(.WIDTH(((Nbits_12-1)>(0)) ? ((Nbits_12-1)-(0)+1) : ((0)-(Nbits_12-1)+1))) dg10VoterB (
    .inA(dg10A),
    .inB(dg10B),
    .inC(dg10C),
    .out(dg10VotedB),
    .tmrErr(dg10TmrErrorB)
    );
assign tmrErrorB =  dg01TmrErrorB|dg10TmrErrorB;

majorityVoter #(.WIDTH(((Nbits_12-1)>(0)) ? ((Nbits_12-1)-(0)+1) : ((0)-(Nbits_12-1)+1))) dg01VoterC (
    .inA(dg01A),
    .inB(dg01B),
    .inC(dg01C),
    .out(dg01VotedC),
    .tmrErr(dg01TmrErrorC)
    );

majorityVoter #(.WIDTH(((Nbits_12-1)>(0)) ? ((Nbits_12-1)-(0)+1) : ((0)-(Nbits_12-1)+1))) dg10VoterC (
    .inA(dg10A),
    .inB(dg10B),
    .inC(dg10C),
    .out(dg10VotedC),
    .tmrErr(dg10TmrErrorC)
    );
assign tmrErrorC =  dg01TmrErrorC|dg10TmrErrorC;

fanout #(.WIDTH(((Nbits_8-1)>(0)) ? ((Nbits_8-1)-(0)+1) : ((0)-(Nbits_8-1)+1))) BSL_VAL_g01Fanout (
    .in(BSL_VAL_g01),
    .outA(BSL_VAL_g01A),
    .outB(BSL_VAL_g01B),
    .outC(BSL_VAL_g01C)
    );

fanout #(.WIDTH(((Nbits_8-1)>(0)) ? ((Nbits_8-1)-(0)+1) : ((0)-(Nbits_8-1)+1))) BSL_VAL_g10Fanout (
    .in(BSL_VAL_g10),
    .outA(BSL_VAL_g10A),
    .outB(BSL_VAL_g10B),
    .outC(BSL_VAL_g10C)
    );

fanout DCLK_10Fanout (
    .in(DCLK_10),
    .outA(DCLK_10A),
    .outB(DCLK_10B),
    .outC(DCLK_10C)
    );

fanout #(.WIDTH(((Nbits_12-1)>(0)) ? ((Nbits_12-1)-(0)+1) : ((0)-(Nbits_12-1)+1))) DATA12_g01Fanout (
    .in(DATA12_g01),
    .outA(DATA12_g01A),
    .outB(DATA12_g01B),
    .outC(DATA12_g01C)
    );

fanout #(.WIDTH(((Nbits_12-1)>(0)) ? ((Nbits_12-1)-(0)+1) : ((0)-(Nbits_12-1)+1))) DATA12_g10Fanout (
    .in(DATA12_g10),
    .outA(DATA12_g10A),
    .outB(DATA12_g10B),
    .outC(DATA12_g10C)
    );

fanout DCLK_1Fanout (
    .in(DCLK_1),
    .outA(DCLK_1A),
    .outB(DCLK_1B),
    .outC(DCLK_1C)
    );
endmodule



// /export/elt159xl/disk0/users/soldi/LiTE-DTU_v2.0_2021_Simulations/tmrg/tmrg/../common/voter.v
module majorityVoter #(
  parameter WIDTH = 1
)( 
  input wire  [WIDTH-1:0] inA,
  input wire  [WIDTH-1:0] inB,
  input wire  [WIDTH-1:0] inC,
  output wire [WIDTH-1:0] out,
  output reg              tmrErr
);
  assign out = (inA&inB) | (inA&inC) | (inB&inC);
  always @(inA or inB or inC) begin
    if (inA!=inB || inA!=inC || inB!=inC)
      tmrErr = 1;
    else
      tmrErr = 0;
  end
endmodule


// /export/elt159xl/disk0/users/soldi/LiTE-DTU_v2.0_2021_Simulations/tmrg/tmrg/../common/fanout.v
module fanout #(
  parameter WIDTH = 1
)(
  input wire  [WIDTH-1:0] in,
  output wire [WIDTH-1:0] outA,
  output wire [WIDTH-1:0] outB,
  output wire [WIDTH-1:0] outC
);
  assign outA = in;
  assign outB = in;
  assign outC = in;
endmodule
